{"ast":null,"code":"import \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\n// connectionHandler.js - Utilidad para manejar problemas de conexi√≥n\n\nimport apiConfig from '../config/apiConfig';\n\n// Estado de la conexi√≥n\nlet isConnected = navigator.onLine;\nlet apiAvailable = false;\nlet connectionTestInProgress = false;\nlet offlineMode = localStorage.getItem('offlineMode') === 'true';\n\n/**\r\n * Prueba la conexi√≥n al API con diferentes dominios alternativos\r\n * @returns {Promise<boolean>} - true si se encuentra una API disponible\r\n */\nexport const testApiConnection = async () => {\n  // Si ya est√° en progreso una prueba, esperar\n  if (connectionTestInProgress) {\n    return apiAvailable;\n  }\n  connectionTestInProgress = true;\n  console.log('üîÑ Probando conexi√≥n con la API...');\n  // Dominios a probar (en orden de preferencia)\n  const domains = [apiConfig.API_DOMAIN,\n  // Dominio configurado actual\n  'https://websap-backend.onrender.com',\n  // Servidor principal de producci√≥n (Render)\n  'https://allseo.xyz',\n  // Servidor principal sin subdominio\n  'https://api.websap.app',\n  // Servidor alternativo\n  'http://localhost:3000' // Local para desarrollo\n  ];\n\n  // Evitar duplicados\n  const uniqueDomains = [...new Set(domains)];\n\n  // Probar cada dominio\n  for (const domain of uniqueDomains) {\n    try {\n      console.log(`üîç Probando API en: ${domain}`);\n\n      // Usar un timeout para evitar esperar demasiado\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 3000);\n      const response = await fetch(`${domain}/api/test/ping`, {\n        method: 'GET',\n        signal: controller.signal,\n        headers: {\n          'Accept': 'application/json'\n        },\n        mode: 'cors',\n        credentials: 'omit'\n      });\n      clearTimeout(timeoutId);\n      if (response.ok) {\n        console.log(`‚úÖ Conexi√≥n exitosa con: ${domain}`);\n\n        // Guardar el dominio que funciona\n        localStorage.setItem('apiUrl', domain);\n\n        // Actualizar configuraci√≥n\n        apiAvailable = true;\n        offlineMode = false;\n        localStorage.setItem('offlineMode', 'false');\n        connectionTestInProgress = false;\n        return true;\n      }\n    } catch (error) {\n      console.warn(`‚ùå Error al conectar con ${domain}:`, error.name === 'AbortError' ? 'Timeout' : error.message);\n    }\n  }\n  console.error('‚ùå No se pudo conectar con ning√∫n servidor API');\n\n  // Si no hay conexi√≥n, activar modo offline\n  apiAvailable = false;\n  offlineMode = true;\n  localStorage.setItem('offlineMode', 'true');\n  connectionTestInProgress = false;\n  return false;\n};\n\n/**\r\n * Comprueba si la aplicaci√≥n est√° en modo offline\r\n * @returns {boolean} - true si est√° en modo offline\r\n */\nexport const isOfflineMode = () => offlineMode;\n\n/**\r\n * Establece manualmente el modo offline\r\n * @param {boolean} status - true para activar el modo offline\r\n */\nexport const setOfflineMode = status => {\n  offlineMode = status;\n  localStorage.setItem('offlineMode', status ? 'true' : 'false');\n  console.log(`${status ? 'üîå Modo offline activado' : 'üåê Modo offline desactivado'}`);\n};\n\n/**\r\n * Configurar los listeners para eventos de conexi√≥n\r\n */\nexport const setupConnectionListeners = () => {\n  // Escuchar cambios en la conexi√≥n\n  window.addEventListener('online', async () => {\n    isConnected = true;\n    console.log('üåê Conexi√≥n a Internet detectada');\n\n    // Probar si la API est√° disponible\n    const apiIsAvailable = await testApiConnection();\n\n    // Notificar a la aplicaci√≥n del cambio\n    window.dispatchEvent(new CustomEvent('api-connection-change', {\n      detail: {\n        connected: apiIsAvailable\n      }\n    }));\n  });\n  window.addEventListener('offline', () => {\n    isConnected = false;\n    apiAvailable = false;\n    console.log('üîå Conexi√≥n a Internet perdida');\n\n    // Notificar a la aplicaci√≥n del cambio\n    window.dispatchEvent(new CustomEvent('api-connection-change', {\n      detail: {\n        connected: false\n      }\n    }));\n  });\n\n  // Realizar un test inicial al cargar\n  setTimeout(() => {\n    testApiConnection().then(available => {\n      window.dispatchEvent(new CustomEvent('api-connection-change', {\n        detail: {\n          connected: available\n        }\n      }));\n    });\n  }, 1000);\n};\n\n// Inicializar\nsetupConnectionListeners();\nexport default {\n  testApiConnection,\n  isOfflineMode,\n  setOfflineMode,\n  apiAvailable,\n  isConnected\n};","map":{"version":3,"names":["apiConfig","isConnected","navigator","onLine","apiAvailable","connectionTestInProgress","offlineMode","localStorage","getItem","testApiConnection","console","log","domains","API_DOMAIN","uniqueDomains","Set","domain","controller","AbortController","timeoutId","setTimeout","abort","response","fetch","method","signal","headers","mode","credentials","clearTimeout","ok","setItem","error","warn","name","message","isOfflineMode","setOfflineMode","status","setupConnectionListeners","window","addEventListener","apiIsAvailable","dispatchEvent","CustomEvent","detail","connected","then","available"],"sources":["F:/Driver google/VUE.JS-2/VUE-JS/websap/src/utils/connectionHandler.js"],"sourcesContent":["// connectionHandler.js - Utilidad para manejar problemas de conexi√≥n\r\n\r\nimport apiConfig from '../config/apiConfig';\r\n\r\n// Estado de la conexi√≥n\r\nlet isConnected = navigator.onLine;\r\nlet apiAvailable = false;\r\nlet connectionTestInProgress = false;\r\nlet offlineMode = localStorage.getItem('offlineMode') === 'true';\r\n\r\n/**\r\n * Prueba la conexi√≥n al API con diferentes dominios alternativos\r\n * @returns {Promise<boolean>} - true si se encuentra una API disponible\r\n */\r\nexport const testApiConnection = async () => {\r\n  // Si ya est√° en progreso una prueba, esperar\r\n  if (connectionTestInProgress) {\r\n    return apiAvailable;\r\n  }\r\n\r\n  connectionTestInProgress = true;\r\n  console.log('üîÑ Probando conexi√≥n con la API...');\r\n  // Dominios a probar (en orden de preferencia)\r\n  const domains = [\r\n    apiConfig.API_DOMAIN,                   // Dominio configurado actual\r\n    'https://websap-backend.onrender.com',  // Servidor principal de producci√≥n (Render)\r\n    'https://allseo.xyz',                  // Servidor principal sin subdominio\r\n    'https://api.websap.app',              // Servidor alternativo\r\n    'http://localhost:3000'                // Local para desarrollo\r\n  ];\r\n\r\n  // Evitar duplicados\r\n  const uniqueDomains = [...new Set(domains)];\r\n  \r\n  // Probar cada dominio\r\n  for (const domain of uniqueDomains) {\r\n    try {\r\n      console.log(`üîç Probando API en: ${domain}`);\r\n      \r\n      // Usar un timeout para evitar esperar demasiado\r\n      const controller = new AbortController();\r\n      const timeoutId = setTimeout(() => controller.abort(), 3000);\r\n      \r\n      const response = await fetch(`${domain}/api/test/ping`, {\r\n        method: 'GET',\r\n        signal: controller.signal,\r\n        headers: { 'Accept': 'application/json' },\r\n        mode: 'cors',\r\n        credentials: 'omit'\r\n      });\r\n      \r\n      clearTimeout(timeoutId);\r\n      \r\n      if (response.ok) {\r\n        console.log(`‚úÖ Conexi√≥n exitosa con: ${domain}`);\r\n        \r\n        // Guardar el dominio que funciona\r\n        localStorage.setItem('apiUrl', domain);\r\n        \r\n        // Actualizar configuraci√≥n\r\n        apiAvailable = true;\r\n        offlineMode = false;\r\n        localStorage.setItem('offlineMode', 'false');\r\n        \r\n        connectionTestInProgress = false;\r\n        return true;\r\n      }\r\n    } catch (error) {\r\n      console.warn(`‚ùå Error al conectar con ${domain}:`, error.name === 'AbortError' ? 'Timeout' : error.message);\r\n    }\r\n  }\r\n  \r\n  console.error('‚ùå No se pudo conectar con ning√∫n servidor API');\r\n  \r\n  // Si no hay conexi√≥n, activar modo offline\r\n  apiAvailable = false;\r\n  offlineMode = true;\r\n  localStorage.setItem('offlineMode', 'true');\r\n  \r\n  connectionTestInProgress = false;\r\n  return false;\r\n};\r\n\r\n/**\r\n * Comprueba si la aplicaci√≥n est√° en modo offline\r\n * @returns {boolean} - true si est√° en modo offline\r\n */\r\nexport const isOfflineMode = () => offlineMode;\r\n\r\n/**\r\n * Establece manualmente el modo offline\r\n * @param {boolean} status - true para activar el modo offline\r\n */\r\nexport const setOfflineMode = (status) => {\r\n  offlineMode = status;\r\n  localStorage.setItem('offlineMode', status ? 'true' : 'false');\r\n  console.log(`${status ? 'üîå Modo offline activado' : 'üåê Modo offline desactivado'}`);\r\n};\r\n\r\n/**\r\n * Configurar los listeners para eventos de conexi√≥n\r\n */\r\nexport const setupConnectionListeners = () => {\r\n  // Escuchar cambios en la conexi√≥n\r\n  window.addEventListener('online', async () => {\r\n    isConnected = true;\r\n    console.log('üåê Conexi√≥n a Internet detectada');\r\n    \r\n    // Probar si la API est√° disponible\r\n    const apiIsAvailable = await testApiConnection();\r\n    \r\n    // Notificar a la aplicaci√≥n del cambio\r\n    window.dispatchEvent(new CustomEvent('api-connection-change', { detail: { connected: apiIsAvailable } }));\r\n  });\r\n  \r\n  window.addEventListener('offline', () => {\r\n    isConnected = false;\r\n    apiAvailable = false;\r\n    console.log('üîå Conexi√≥n a Internet perdida');\r\n    \r\n    // Notificar a la aplicaci√≥n del cambio\r\n    window.dispatchEvent(new CustomEvent('api-connection-change', { detail: { connected: false } }));\r\n  });\r\n  \r\n  // Realizar un test inicial al cargar\r\n  setTimeout(() => {\r\n    testApiConnection().then(available => {\r\n      window.dispatchEvent(new CustomEvent('api-connection-change', { detail: { connected: available } }));\r\n    });\r\n  }, 1000);\r\n};\r\n\r\n// Inicializar\r\nsetupConnectionListeners();\r\n\r\nexport default {\r\n  testApiConnection,\r\n  isOfflineMode,\r\n  setOfflineMode,\r\n  apiAvailable,\r\n  isConnected\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}