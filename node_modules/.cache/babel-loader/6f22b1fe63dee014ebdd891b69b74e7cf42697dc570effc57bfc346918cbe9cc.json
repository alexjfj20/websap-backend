{"ast":null,"code":"// src/services/syncService.js\n\n// Servicio para gestionar la sincronizaci√≥n y el estado de la conexi√≥n\nimport { getPendingPlatos, updatePlatoSyncStatus, getSyncQueue, removeFromSyncQueue, getPlato } from './indexedDBService';\nimport { adaptPlatoData } from '../utils/dataAdapters';\nimport { optimizeImageForSync } from './imageService';\nimport apiConfig from '../config/apiConfig';\nimport { testApiConnection, isOfflineMode } from '../utils/connectionHandler';\n\n// Funci√≥n para obtener las URLs actualizadas del API\nconst getApiUrls = () => {\n  // Si el API URL fue actualizado por el connectionHandler, actualizar la configuraci√≥n\n  const storedApiUrl = localStorage.getItem('apiUrl');\n  if (storedApiUrl) {\n    // Construir URLs con el dominio correcto\n    return {\n      API_URL: `${storedApiUrl}/api`,\n      RAW_URL: `${storedApiUrl}/raw`\n    };\n  }\n\n  // Usar configuraci√≥n por defecto\n  return {\n    API_URL: apiConfig.API_URL,\n    RAW_URL: apiConfig.RAW_URL\n  };\n};\n\n// URLs din√°micas que pueden actualizarse en tiempo de ejecuci√≥n\nlet {\n  API_URL,\n  RAW_URL\n} = getApiUrls();\n\n// Funci√≥n para actualizar las URLs de la API en tiempo de ejecuci√≥n\nconst refreshApiUrls = () => {\n  const urls = getApiUrls();\n  API_URL = urls.API_URL;\n  RAW_URL = urls.RAW_URL;\n  console.log('üîÑ URLs de API actualizadas:', {\n    API_URL,\n    RAW_URL\n  });\n};\n\n// Escuchar los cambios de conexi√≥n para actualizar las URLs\nwindow.addEventListener('api-connection-change', event => {\n  console.log('üåê Estado de conexi√≥n API cambiado:', event.detail.connected);\n  refreshApiUrls();\n});\n\n// Configuraci√≥n espec√≠fica para mejorar la sincronizaci√≥n\nconst SYNC_CONFIG = {\n  skipServerAvailabilityCheck: true,\n  maxPlatoSize: 30000,\n  // 30KB m√°ximo\n  retryIntervals: [5000, 15000, 30000],\n  maxRetries: 2,\n  platoUrl: `${API_URL}/sync/platos`,\n  emergencyPlatoUrl: `${API_URL}/platos/minimal`,\n  useEmergencyEndpoint: true\n};\n\n// Estado de la sincronizaci√≥n\nlet isSyncing = false;\nlet _isOnline = navigator.onLine;\n\n// Alternativa m√°s simple para verificar la conexi√≥n\nconst isOnline = async () => {\n  // Primero comprobamos el estado de navigator.onLine\n  if (!navigator.onLine) {\n    return false;\n  }\n\n  // Intentamos hacer un fetch a un recurso peque√±o (como un favicon)\n  try {\n    const response = await fetch(`${API_URL}/favicon.ico`, {\n      method: 'HEAD',\n      mode: 'no-cors',\n      cache: 'no-store',\n      credentials: 'omit'\n    });\n    return true; // Si no hay excepci√≥n, asumimos que estamos en l√≠nea\n  } catch (error) {\n    console.error('Error al verificar estado de conexi√≥n:', error);\n    return false;\n  }\n};\n\n// Configurar escuchas para eventos de conexi√≥n\nconst setupConnectionListeners = () => {\n  window.addEventListener('online', async () => {\n    console.log('Evento online detectado');\n    _isOnline = await isOnline();\n    if (_isOnline) {\n      console.log('Conexi√≥n a Internet restablecida');\n      // Sincronizar cuando se recupera la conexi√≥n\n      syncData();\n    }\n  });\n  window.addEventListener('offline', () => {\n    console.log('Evento offline detectado');\n    _isOnline = false;\n    console.log('Conexi√≥n a Internet perdida');\n  });\n\n  // Verificar estado inicial\n  isOnline().then(online => {\n    console.log(`Estado inicial de conexi√≥n: ${online ? 'En l√≠nea' : 'Fuera de l√≠nea'}`);\n  });\n};\n\n// Funci√≥n para probar la conexi√≥n con el servidor (modo ultra-ligero)\nconst testServerConnection = async () => {\n  console.log('üîÑ Probando conexi√≥n con el servidor (modo emergencia)...');\n  try {\n    // Usar XMLHttpRequest sin cookies ni headers personalizados\n    const xhr = new XMLHttpRequest();\n    const responsePromise = new Promise(resolve => {\n      const timeoutId = setTimeout(() => {\n        console.warn('‚è±Ô∏è Timeout en la prueba de conexi√≥n');\n        xhr.abort();\n        resolve(false);\n      }, 5000);\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState === 4) {\n          clearTimeout(timeoutId);\n          if (xhr.status >= 200 && xhr.status < 300) {\n            console.log('‚úÖ Conexi√≥n b√°sica establecida');\n            resolve(true);\n          } else if (xhr.status === 431) {\n            console.error('‚ùå Error 431: Request Header Fields Too Large');\n            console.log('üëâ Necesitas reducir el tama√±o de las cookies o headers');\n            resolve(false);\n          } else {\n            console.error(`‚ùå Error en prueba de conexi√≥n: ${xhr.status}`);\n            resolve(false);\n          }\n        }\n      };\n      xhr.onerror = function () {\n        clearTimeout(timeoutId);\n        console.error('‚ùå Error de red en prueba de conexi√≥n');\n        // Intentar con endpoint de emergencia sin headers\n        checkAlternativePort().then(resolve);\n      };\n\n      // Realizar una solicitud GET simple sin headers\n      xhr.open('GET', `${API_URL}/test/ping`, true);\n      // No a√±adir ning√∫n header\n      xhr.withCredentials = false; // Importante: evitar enviar cookies\n      xhr.send();\n    });\n    return await responsePromise;\n  } catch (error) {\n    console.error('‚ùå Error en prueba de conexi√≥n:', error);\n    return false;\n  }\n};\n\n// Comprobar puerto alternativo\nconst checkAlternativePort = async () => {\n  console.log('üîÑ Probando puertos alternativos...');\n\n  // Lista de puertos comunes para probar\n  const ports = [8080, 3000, 5000, 8000];\n  for (const port of ports) {\n    try {\n      console.log(`Probando en puerto: ${port}`);\n      const response = await fetch(`http://localhost:${port}/raw/ping`, {\n        method: 'GET',\n        mode: 'no-cors',\n        cache: 'no-store',\n        credentials: 'omit'\n      });\n      if (response.ok || response.status === 0) {\n        console.log(`‚úÖ Servidor encontrado en puerto ${port}`);\n        // Actualizar URL global para usar este puerto\n        window.SERVER_PORT = port;\n        return true;\n      }\n    } catch (error) {\n      console.log(`Puerto ${port} no disponible`);\n    }\n  }\n  console.error('‚ùå No se encontr√≥ el servidor en ning√∫n puerto com√∫n');\n  return false;\n};\n\n// Funci√≥n para probar la conexi√≥n a MySQL\nconst testMySQLConnection = async () => {\n  console.log('üîÑ Probando conexi√≥n a MySQL...');\n  try {\n    const response = await fetch(`${API_URL}/test/db`, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json'\n      }\n    });\n    if (response.ok) {\n      const data = await response.json();\n      console.log('‚úÖ Conexi√≥n a MySQL establecida:', data);\n\n      // Mostrar informaci√≥n clara sobre la base de datos\n      if (data.data && data.data.database) {\n        console.log(`üìä Base de datos MySQL: ${data.data.database}`);\n        console.log(`üìä Tablas disponibles: ${data.data.tables.join(', ')}`);\n      }\n      return true;\n    } else {\n      console.error('‚ùå Error al conectar con MySQL:', await response.text());\n      return false;\n    }\n  } catch (error) {\n    console.error('‚ùå Error de red al probar la conexi√≥n MySQL:', error);\n    return false;\n  }\n};\n\n// Funci√≥n para sincronizar datos entre IndexedDB y el servidor\nconst syncData = async () => {\n  if (!(await isOnline())) {\n    console.log('Sin conexi√≥n a Internet, la sincronizaci√≥n no es posible');\n    return false;\n  }\n  if (isSyncing) {\n    console.log('Ya hay una sincronizaci√≥n en progreso');\n    return false;\n  }\n  isSyncing = true;\n  console.log('üîÑ Iniciando sincronizaci√≥n de datos...');\n  try {\n    // Procesar la cola de sincronizaci√≥n\n    const syncQueue = await getSyncQueue();\n    console.log(`üìã Cola de sincronizaci√≥n: ${syncQueue.length} elementos`);\n    for (const item of syncQueue) {\n      if (item.entityType === 'plato') {\n        // Obtener el plato completo de IndexedDB\n        const plato = await getPlato(item.entityId);\n        if (plato) {\n          console.log(`üçΩÔ∏è Sincronizando plato: ${plato.name} (${plato.id})`);\n          try {\n            // Intentar sincronizaci√≥n minimalista\n            const success = await syncPlato(plato);\n            if (success.success) {\n              console.log(`‚úÖ Plato ${plato.id} sincronizado correctamente`);\n              await removeFromSyncQueue(item.id);\n            } else {\n              console.error(`‚ùå Error al sincronizar plato ${plato.id}`);\n            }\n          } catch (syncError) {\n            console.error(`‚ùå Excepci√≥n al sincronizar plato ${plato.id}:`, syncError);\n          }\n        } else {\n          console.warn(`‚ö†Ô∏è Plato ${item.entityId} no encontrado en IndexedDB`);\n          await removeFromSyncQueue(item.id);\n        }\n      }\n    }\n\n    // Buscar platos pendientes que no est√©n en la cola\n    console.log('üîç Buscando platos pendientes de sincronizaci√≥n...');\n    const pendingPlatos = await getPendingPlatos();\n    console.log(`üìã Platos pendientes: ${pendingPlatos.length}`);\n    for (const plato of pendingPlatos) {\n      try {\n        console.log(`üçΩÔ∏è Sincronizando plato pendiente: ${plato.name} (${plato.id})`);\n        const success = await syncPlato(plato);\n        if (success.success) {\n          console.log(`‚úÖ Plato pendiente ${plato.id} sincronizado correctamente`);\n        } else {\n          console.error(`‚ùå Error al sincronizar plato pendiente ${plato.id}: ${success.error}`);\n        }\n      } catch (syncError) {\n        console.error(`‚ùå Excepci√≥n al sincronizar plato pendiente ${plato.id}: ${syncError}`);\n      }\n    }\n    console.log('‚úÖ Sincronizaci√≥n completada');\n    return true;\n  } catch (error) {\n    console.error('‚ùå Error durante la sincronizaci√≥n:', error);\n    return false;\n  } finally {\n    isSyncing = false;\n  }\n};\n\n// M√©todo ultra-minimal usando XMLHttpRequest sin headers\nconst tryUltraMinimalSync = async (data, platoId) => {\n  try {\n    console.log('üö® Intentando sincronizaci√≥n ultra-minimal para plato:', platoId);\n\n    // Crear un objeto XMLHttpRequest directamente\n    const xhr = new XMLHttpRequest();\n\n    // Configurar una promesa para manejar la respuesta\n    const responsePromise = new Promise(resolve => {\n      // Configurar timeout\n      const timeoutId = setTimeout(() => {\n        console.warn('‚è±Ô∏è Timeout en sincronizaci√≥n ultra-minimal');\n        xhr.abort();\n        resolve(false);\n      }, 15000);\n      xhr.onreadystatechange = async function () {\n        if (xhr.readyState === 4) {\n          clearTimeout(timeoutId);\n          if (xhr.status >= 200 && xhr.status < 300) {\n            console.log('‚úÖ Sincronizaci√≥n ultra-minimal exitosa');\n            try {\n              await updatePlatoSyncStatus(platoId, 'synced');\n            } catch (dbError) {\n              console.error('Error al actualizar estado en BD:', dbError);\n            }\n            resolve(true);\n          } else {\n            console.error(`‚ùå Error en sincronizaci√≥n ultra-minimal: ${xhr.status}`);\n            resolve(false);\n          }\n        }\n      };\n      xhr.onerror = function () {\n        clearTimeout(timeoutId);\n        console.error('‚ùå Error de red en sincronizaci√≥n ultra-minimal');\n        resolve(false);\n      };\n    });\n\n    // Usar m√©todo POST con datos minimalistas\n    xhr.open('POST', `${API_URL}/platos/emergency-sync`, true);\n\n    // Solo agregar Content-Type, nada m√°s\n    xhr.setRequestHeader('Content-Type', 'application/json');\n\n    // Preparar datos ultra-minimalistas\n    const adaptedData = await adaptPlatoDataWithImageOptimization(data);\n    const minimalData = {\n      id: adaptedData.id,\n      name: (adaptedData.name || \"\").substring(0, 30),\n      price: Number(adaptedData.price) || 0\n    };\n\n    // Enviar los datos\n    xhr.send(JSON.stringify(minimalData));\n    return await responsePromise;\n  } catch (error) {\n    console.error('‚ùå Error en sincronizaci√≥n ultra-minimal:', error);\n    return false;\n  }\n};\n\n// Procesar la cola de sincronizaci√≥n\nconst processSyncQueue = async () => {\n  if (!(await isOnline()) || isSyncing) {\n    console.log(`No se puede procesar la cola. En l√≠nea: ${_isOnline}, Sincronizando: ${isSyncing}`);\n    return false;\n  }\n  isSyncing = true;\n  console.log('Iniciando procesamiento de cola de sincronizaci√≥n...');\n  try {\n    const syncItems = await getSyncQueue();\n    if (syncItems.length === 0) {\n      console.log('No hay elementos en la cola de sincronizaci√≥n');\n      isSyncing = false;\n      return true;\n    }\n    console.log(`Procesando ${syncItems.length} elementos en la cola de sincronizaci√≥n`);\n\n    // Procesar cada elemento de la cola\n    for (const item of syncItems) {\n      let syncSuccess = false;\n      if (item.type === 'create' && item.entityType === 'plato') {\n        syncSuccess = await syncPlatoToServer(item.data);\n      }\n      // Aqu√≠ pueden agregarse m√°s tipos de sincronizaci√≥n seg√∫n sea necesario\n\n      if (syncSuccess) {\n        // Eliminar de la cola si la sincronizaci√≥n fue exitosa\n        await removeFromSyncQueue(item.id);\n        console.log(`Elemento ${item.id} eliminado de la cola de sincronizaci√≥n`);\n      } else {\n        console.log(`No se pudo sincronizar el elemento ${item.id}, se reintentar√° m√°s tarde`);\n      }\n    }\n    console.log('Procesamiento de cola de sincronizaci√≥n completado');\n    return true;\n  } catch (error) {\n    console.error('Error al procesar cola de sincronizaci√≥n:', error);\n    return false;\n  } finally {\n    isSyncing = false;\n  }\n};\n\n// M√©todo de sincronizaci√≥n extremadamente simplificado para problemas persistentes\nexport const syncMinimalDataOnly = async (data, platoId, retryCount = 0) => {\n  const maxRetries = SYNC_CONFIG.maxRetries;\n\n  // Usar datos minimalistas pero incluir la imagen optimizada\n  const adaptedData = await adaptPlatoDataWithImageOptimization(data);\n  const minimalData = {\n    id: adaptedData.id,\n    name: adaptedData.name?.substring(0, 50) || 'Plato sin nombre',\n    price: Number(adaptedData.price) || 0,\n    description: adaptedData.description?.substring(0, 100) || '',\n    category: adaptedData.category || 'principal',\n    image: adaptedData.image,\n    // Incluir la imagen optimizada\n    is_available: Boolean(adaptedData.is_available),\n    minimal_sync: true\n  };\n  return new Promise(resolve => {\n    // Establecer timeout para toda la operaci√≥n\n    const operationTimeoutId = setTimeout(() => {\n      console.warn('‚è±Ô∏è Timeout global de la operaci√≥n de sincronizaci√≥n');\n      resolve(false);\n    }, 30000);\n    const xhr = new XMLHttpRequest();\n\n    // Configurar timeouts m√°s estrictos\n    xhr.timeout = 15000;\n    xhr.onreadystatechange = async function () {\n      if (xhr.readyState === 4) {\n        if (xhr.status >= 200 && xhr.status < 300) {\n          clearTimeout(operationTimeoutId);\n          try {\n            await updatePlatoSyncStatus(platoId, 'synced');\n            console.log(`‚úÖ Sincronizaci√≥n exitosa para plato ${platoId}`);\n          } catch (error) {\n            console.error('Error al actualizar estado:', error);\n          }\n          resolve(true);\n        } else if (xhr.status === 0) {\n          // Conexi√≥n abortada o no establecida\n          console.warn('‚ö†Ô∏è Conexi√≥n interrumpida');\n          handleRetry();\n        } else if (xhr.status === 431) {\n          console.error(`‚ùå Error 431 (Headers demasiado grandes) - Intentando m√©todo ultraminimal`);\n          tryUltraMinimalSync(adaptedData, platoId).then(success => {\n            clearTimeout(operationTimeoutId);\n            resolve(success);\n          });\n        } else {\n          console.error(`‚ùå Error HTTP ${xhr.status} en sincronizaci√≥n`);\n          handleRetry();\n        }\n      }\n    };\n    xhr.ontimeout = function () {\n      console.warn('‚è±Ô∏è Timeout de la petici√≥n HTTP');\n      handleRetry();\n    };\n    xhr.onerror = function () {\n      console.error('‚ùå Error de red en sincronizaci√≥n');\n      handleRetry();\n    };\n\n    // Funci√≥n para manejar reintentos\n    const handleRetry = () => {\n      if (retryCount < maxRetries) {\n        const delay = SYNC_CONFIG.retryIntervals[retryCount] || 5000;\n        console.log(`üîÑ Reintentando en ${delay}ms... (${retryCount + 1}/${maxRetries})`);\n        setTimeout(() => {\n          clearTimeout(operationTimeoutId);\n          syncMinimalDataOnly(data, platoId, retryCount + 1).then(success => resolve(success));\n        }, delay);\n      } else {\n        clearTimeout(operationTimeoutId);\n        console.warn('‚ùå Agotados todos los reintentos de sincronizaci√≥n');\n        resolve(false);\n      }\n    };\n    try {\n      // Usar m√©todo POST con headers m√≠nimos\n      xhr.open('POST', `${API_URL}/platos`, true);\n      xhr.setRequestHeader('Content-Type', 'application/json');\n\n      // Enviar los datos minimalistas\n      xhr.send(JSON.stringify(minimalData));\n    } catch (error) {\n      console.error('‚ùå Error al iniciar la petici√≥n:', error);\n      handleRetry();\n    }\n  });\n};\n\n// Sincronizar un plato con el servidor\nconst syncPlatoToServer = async (plato, retryCount = 0) => {\n  const maxRetries = SYNC_CONFIG.maxRetries;\n\n  // Si el plato est√° marcado como problem√°tico, omitirlo\n  if (plato.sync_problematic) {\n    console.warn(`‚ö†Ô∏è Omitiendo plato ${plato.id} marcado como problem√°tico para sincronizaci√≥n`);\n    return false;\n  }\n  console.log(`Sincronizando plato ${plato.id} con el servidor (intento ${retryCount + 1}/${maxRetries + 1})...`);\n  try {\n    // Omitir verificaci√≥n si est√° desactivada\n    if (!SYNC_CONFIG.skipServerAvailabilityCheck) {\n      // Verificar si el servidor est√° disponible\n      const serverAvailable = await checkServerAvailability();\n      if (!serverAvailable) {\n        console.error('‚ùå El servidor no est√° disponible. Posponiendo sincronizaci√≥n.');\n        return false;\n      }\n    }\n\n    // Preparar datos para sincronizaci√≥n incluyendo la imagen\n    let adaptedData = await adaptPlatoDataWithImageOptimization(plato);\n    let syncData = {\n      id: adaptedData.id,\n      name: adaptedData.name?.substring(0, 50) || 'Plato sin nombre',\n      price: Number(adaptedData.price) || 0,\n      description: adaptedData.description?.substring(0, 100) || '',\n      availableQuantity: Number(adaptedData.availableQuantity) || 0,\n      is_available: Boolean(adaptedData.is_available),\n      image: adaptedData.image || null,\n      // Incluir la imagen\n      minimal_sync: true\n    };\n\n    // Usar el m√©todo m√°s confiable para sincronizaci√≥n\n    return await syncPlato(adaptedData);\n  } catch (error) {\n    console.error('‚ùå Error en sincronizaci√≥n:', error);\n    if (retryCount >= maxRetries) {\n      try {\n        await markPlatoAsSyncProblematic(plato.id);\n      } catch (markError) {\n        console.error('Error al marcar plato como problem√°tico:', markError);\n      }\n    }\n    return false;\n  }\n};\n\n// Verificar estado de sincronizaci√≥n con el backend\nconst checkSyncStatus = async () => {\n  try {\n    console.log('üîÑ Verificando estado de sincronizaci√≥n...');\n    const response = await fetch(`${API_URL}/sync/status`, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json'\n      },\n      credentials: 'omit' // Importante: no enviar cookies\n    });\n    if (response.ok) {\n      const data = await response.json();\n      console.log('üìä Estado de sincronizaci√≥n:', data);\n\n      // Si no existe la tabla, intentar crearla\n      if (!data.data.mysql.tablaPlatos) {\n        console.log('‚ö†Ô∏è La tabla platos no existe, intentando configurar...');\n        await setupSync();\n      }\n      return data.data;\n    } else {\n      console.error('‚ùå Error al verificar estado de sincronizaci√≥n:', await response.text());\n      return null;\n    }\n  } catch (error) {\n    console.error('‚ùå Error al verificar estado de sincronizaci√≥n:', error);\n    return null;\n  }\n};\n\n// Configurar la sincronizaci√≥n - crear tablas necesarias\nconst setupSync = async () => {\n  try {\n    console.log('üîÑ Configurando sincronizaci√≥n...');\n    const response = await fetch(`${API_URL}/sync/setup`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      credentials: 'omit',\n      body: JSON.stringify({\n        force: false\n      })\n    });\n    if (response.ok) {\n      const data = await response.json();\n      console.log('‚úÖ Configuraci√≥n de sincronizaci√≥n completada:', data);\n      return true;\n    } else {\n      console.error('‚ùå Error al configurar sincronizaci√≥n:', await response.text());\n      return false;\n    }\n  } catch (error) {\n    console.error('‚ùå Error al configurar sincronizaci√≥n:', error);\n    return false;\n  }\n};\n\n// Inicializar el servicio de sincronizaci√≥n\nconst initSyncService = () => {\n  console.log('üîÑ Inicializando servicio de sincronizaci√≥n...');\n\n  // Probar conexiones y configurar sincronizaci√≥n\n  Promise.all([testServerConnection(), checkSyncStatus()]).then(([isApiConnected, syncStatus]) => {\n    console.log(`‚úÖ Estado de conexi√≥n directa - API: ${isApiConnected}`);\n    if (isApiConnected) {\n      // Configurar escuchas para eventos de conexi√≥n\n      setupConnectionListeners();\n\n      // Si hay estado de sincronizaci√≥n, proceder con la sincronizaci√≥n\n      if (syncStatus && syncStatus.mysql && syncStatus.mysql.connected) {\n        console.log('üìä MySQL conectado, procediendo con sincronizaci√≥n');\n        syncData();\n\n        // Reactivar la sincronizaci√≥n peri√≥dica (cada 1 minuto)\n        const syncInterval = setInterval(syncData, 60000);\n      } else {\n        console.log('‚ö†Ô∏è MySQL no est√° configurado correctamente, intentando configurar...');\n        setupSync().then(success => {\n          if (success) {\n            console.log('‚úÖ Configuraci√≥n exitosa, iniciando sincronizaci√≥n');\n            syncData();\n\n            // Reactivar la sincronizaci√≥n peri√≥dica (cada 1 minuto)\n            const syncInterval = setInterval(syncData, 60000);\n          }\n        });\n      }\n    } else {\n      console.error('‚ùå No se pudo establecer conexi√≥n con el servidor.');\n    }\n  });\n  console.log('‚öôÔ∏è Servicio de sincronizaci√≥n inicializado');\n};\n\n// Exportar las funciones necesarias\nexport { initSyncService, syncData, isOnline, _isOnline, testServerConnection, testMySQLConnection, checkSyncStatus, setupSync, syncPlato, adaptPlatoDataWithImageOptimization };\n\n// Aseg√∫rate de que la funci√≥n que maneja la sincronizaci√≥n tenga un mejor manejo de errores\n\n/**\n * Funci√≥n para sincronizar un plato con el servidor, asegurando que la imagen se incluya\n * @param {Object} plato - El plato a sincronizar\n * @returns {Promise<Object>} - Resultado de la sincronizaci√≥n\n */\nconst syncPlato = async plato => {\n  console.log(`üîÑ Sincronizando plato: ${plato.name} (ID: ${plato.id})`);\n  try {\n    // Preparar los datos para enviar (incluir la imagen optimizada)\n    const platoToSync = await adaptPlatoDataWithImageOptimization(plato);\n\n    // Omitir la imagen en los logs para evitar mensajes demasiado largos\n    console.log('üì§ Datos a enviar:', {\n      ...platoToSync,\n      image: platoToSync.image ? 'Imagen en base64 (omitida en log)' : null\n    });\n\n    // Imprimir la URL exacta para depuraci√≥n\n    const url = SYNC_CONFIG.platoUrl; // Usar la configuraci√≥n existente\n    console.log(`üîó URL de sincronizaci√≥n: ${url}`);\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(platoToSync),\n      // Evitar que se incluyan cookies u otros datos de autenticaci√≥n si no son necesarios\n      credentials: 'omit'\n    });\n\n    // Verificar si la respuesta es exitosa\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error(`‚ùå Error de sincronizaci√≥n (${response.status}): ${errorText}`);\n\n      // Intentar con el m√©todo de sincronizaci√≥n minimalista si hay un error\n      if (response.status >= 400) {\n        console.log('‚ö†Ô∏è Intentando sincronizaci√≥n minimalista como fallback...');\n        return await syncMinimalDataOnly(plato);\n      }\n      return {\n        success: false,\n        message: `Error de servidor: ${response.status} ${response.statusText}`,\n        error: errorText\n      };\n    }\n\n    // Procesar la respuesta exitosa\n    const responseData = await response.json();\n    console.log('‚úÖ Sincronizaci√≥n exitosa:', responseData);\n\n    // Actualizar el estado de sincronizaci√≥n en IndexedDB\n    try {\n      await updatePlatoSyncStatus(plato.id, true);\n      console.log(`‚úÖ Estado de sincronizaci√≥n actualizado para plato ID: ${plato.id}`);\n    } catch (syncStatusError) {\n      console.warn(`‚ö†Ô∏è No se pudo actualizar el estado de sincronizaci√≥n: ${syncStatusError.message}`);\n    }\n    return {\n      success: true,\n      message: 'Plato sincronizado correctamente',\n      data: responseData\n    };\n  } catch (error) {\n    console.error('‚ùå Error en sincronizaci√≥n:', error);\n\n    // Intentar con el m√©todo de sincronizaci√≥n minimalista si hay un error\n    console.log('‚ö†Ô∏è Intentando sincronizaci√≥n minimalista como fallback...');\n    return await syncMinimalDataOnly(plato);\n  }\n};\n\n// Funci√≥n para adaptar los datos del plato antes de sincronizar, con optimizaci√≥n de im√°genes\nconst adaptPlatoDataWithImageOptimization = async plato => {\n  // Crear una copia para no modificar el original\n  const adaptedData = {\n    ...plato\n  };\n\n  // Asegurarse de que todos los campos necesarios est√©n presentes\n  adaptedData.id = plato.id;\n  adaptedData.name = plato.name || 'Plato sin nombre';\n  adaptedData.price = parseFloat(plato.price) || 0;\n  adaptedData.description = plato.description || '';\n  adaptedData.category = plato.category || 'principal';\n\n  // Optimizar la imagen si existe\n  if (plato.image && typeof plato.image === 'string' && plato.image.length > 0) {\n    try {\n      adaptedData.image = await optimizeImageForSync(plato.image);\n      console.log(`Imagen optimizada para ${plato.name}`);\n    } catch (error) {\n      console.warn(`Error al optimizar imagen para ${plato.name}:`, error);\n      adaptedData.image = plato.image; // Usar la original en caso de error\n    }\n  } else {\n    adaptedData.image = plato.image || null;\n  }\n  adaptedData.image_url = plato.image_url || '';\n  adaptedData.is_available = plato.is_available !== false;\n  adaptedData.includesDrink = plato.includesDrink || false;\n  adaptedData.availableQuantity = plato.availableQuantity || 0;\n  return adaptedData;\n};\n\n/**\n * Actualiza el estado de sincronizaci√≥n de un elemento\n * @param {string} id - ID del elemento\n * @param {string|boolean} status - Estado de sincronizaci√≥n ('pending', 'synced', 'pending_deletion' o un booleano)\n * @returns {Promise<boolean>} - true si se actualiz√≥ correctamente\n */\nexport async function updateSyncStatus(id, status) {\n  try {\n    // Validar que el status sea uno de los valores permitidos o convertir booleano a string\n    let validStatus = status;\n\n    // Si es booleano, convertirlo al estado correspondiente\n    if (typeof status === 'boolean') {\n      validStatus = status === true ? 'synced' : 'pending';\n    }\n\n    // Ahora validar que sea uno de los estados permitidos\n    if (!['pending', 'synced', 'pending_deletion'].includes(validStatus)) {\n      console.warn(`‚ö†Ô∏è No se pudo actualizar el estado de sincronizaci√≥n: Estado inv√°lido: ${status}. Debe ser uno de: pending, synced, pending_deletion`);\n      return false;\n    }\n\n    // Continuar con la l√≥gica existente para actualizar el estado\n    // ...existing code...\n\n    return true;\n  } catch (error) {\n    console.error('Error al actualizar estado de sincronizaci√≥n:', error);\n    return false;\n  }\n}","map":{"version":3,"names":["getPendingPlatos","updatePlatoSyncStatus","getSyncQueue","removeFromSyncQueue","getPlato","adaptPlatoData","optimizeImageForSync","apiConfig","testApiConnection","isOfflineMode","getApiUrls","storedApiUrl","localStorage","getItem","API_URL","RAW_URL","refreshApiUrls","urls","console","log","window","addEventListener","event","detail","connected","SYNC_CONFIG","skipServerAvailabilityCheck","maxPlatoSize","retryIntervals","maxRetries","platoUrl","emergencyPlatoUrl","useEmergencyEndpoint","isSyncing","_isOnline","navigator","onLine","isOnline","response","fetch","method","mode","cache","credentials","error","setupConnectionListeners","syncData","then","online","testServerConnection","xhr","XMLHttpRequest","responsePromise","Promise","resolve","timeoutId","setTimeout","warn","abort","onreadystatechange","readyState","clearTimeout","status","onerror","checkAlternativePort","open","withCredentials","send","ports","port","ok","SERVER_PORT","testMySQLConnection","headers","data","json","database","tables","join","text","syncQueue","length","item","entityType","plato","entityId","name","id","success","syncPlato","syncError","pendingPlatos","tryUltraMinimalSync","platoId","dbError","setRequestHeader","adaptedData","adaptPlatoDataWithImageOptimization","minimalData","substring","price","Number","JSON","stringify","processSyncQueue","syncItems","syncSuccess","type","syncPlatoToServer","syncMinimalDataOnly","retryCount","description","category","image","is_available","Boolean","minimal_sync","operationTimeoutId","timeout","handleRetry","ontimeout","delay","sync_problematic","serverAvailable","checkServerAvailability","availableQuantity","markPlatoAsSyncProblematic","markError","checkSyncStatus","mysql","tablaPlatos","setupSync","body","force","initSyncService","all","isApiConnected","syncStatus","syncInterval","setInterval","platoToSync","url","errorText","message","statusText","responseData","syncStatusError","parseFloat","image_url","includesDrink","updateSyncStatus","validStatus","includes"],"sources":["F:/Driver google/VUE.JS-2/VUE-JS/websap/src/services/syncService.js"],"sourcesContent":["// src/services/syncService.js\n\n// Servicio para gestionar la sincronizaci√≥n y el estado de la conexi√≥n\nimport { \n  getPendingPlatos, \n  updatePlatoSyncStatus, \n  getSyncQueue, \n  removeFromSyncQueue,\n  getPlato\n} from './indexedDBService';\nimport { adaptPlatoData } from '../utils/dataAdapters';\nimport { optimizeImageForSync } from './imageService';\nimport apiConfig from '../config/apiConfig';\nimport { testApiConnection, isOfflineMode } from '../utils/connectionHandler';\n\n// Funci√≥n para obtener las URLs actualizadas del API\nconst getApiUrls = () => {\n  // Si el API URL fue actualizado por el connectionHandler, actualizar la configuraci√≥n\n  const storedApiUrl = localStorage.getItem('apiUrl');\n  if (storedApiUrl) {\n    // Construir URLs con el dominio correcto\n    return {\n      API_URL: `${storedApiUrl}/api`,\n      RAW_URL: `${storedApiUrl}/raw`\n    };\n  }\n  \n  // Usar configuraci√≥n por defecto\n  return {\n    API_URL: apiConfig.API_URL,\n    RAW_URL: apiConfig.RAW_URL\n  };\n};\n\n// URLs din√°micas que pueden actualizarse en tiempo de ejecuci√≥n\nlet { API_URL, RAW_URL } = getApiUrls();\n\n// Funci√≥n para actualizar las URLs de la API en tiempo de ejecuci√≥n\nconst refreshApiUrls = () => {\n  const urls = getApiUrls();\n  API_URL = urls.API_URL;\n  RAW_URL = urls.RAW_URL;\n  console.log('üîÑ URLs de API actualizadas:', { API_URL, RAW_URL });\n};\n\n// Escuchar los cambios de conexi√≥n para actualizar las URLs\nwindow.addEventListener('api-connection-change', (event) => {\n  console.log('üåê Estado de conexi√≥n API cambiado:', event.detail.connected);\n  refreshApiUrls();\n});\n\n// Configuraci√≥n espec√≠fica para mejorar la sincronizaci√≥n\nconst SYNC_CONFIG = {\n  skipServerAvailabilityCheck: true,\n  maxPlatoSize: 30000, // 30KB m√°ximo\n  retryIntervals: [5000, 15000, 30000],\n  maxRetries: 2,\n  platoUrl: `${API_URL}/sync/platos`,\n  emergencyPlatoUrl: `${API_URL}/platos/minimal`,\n  useEmergencyEndpoint: true\n};\n\n// Estado de la sincronizaci√≥n\nlet isSyncing = false;\nlet _isOnline = navigator.onLine;\n\n// Alternativa m√°s simple para verificar la conexi√≥n\nconst isOnline = async () => {\n  // Primero comprobamos el estado de navigator.onLine\n  if (!navigator.onLine) {\n    return false;\n  }\n  \n  // Intentamos hacer un fetch a un recurso peque√±o (como un favicon)\n  try {\n    const response = await fetch(`${API_URL}/favicon.ico`, {\n      method: 'HEAD',\n      mode: 'no-cors',\n      cache: 'no-store',\n      credentials: 'omit'\n    });\n    \n    return true; // Si no hay excepci√≥n, asumimos que estamos en l√≠nea\n  } catch (error) {\n    console.error('Error al verificar estado de conexi√≥n:', error);\n    return false;\n  }\n};\n\n// Configurar escuchas para eventos de conexi√≥n\nconst setupConnectionListeners = () => {\n  window.addEventListener('online', async () => {\n    console.log('Evento online detectado');\n    _isOnline = await isOnline();\n    if (_isOnline) {\n      console.log('Conexi√≥n a Internet restablecida');\n      // Sincronizar cuando se recupera la conexi√≥n\n      syncData();\n    }\n  });\n  \n  window.addEventListener('offline', () => {\n    console.log('Evento offline detectado');\n    _isOnline = false;\n    console.log('Conexi√≥n a Internet perdida');\n  });\n  \n  // Verificar estado inicial\n  isOnline().then(online => {\n    console.log(`Estado inicial de conexi√≥n: ${online ? 'En l√≠nea' : 'Fuera de l√≠nea'}`);\n  });\n};\n\n// Funci√≥n para probar la conexi√≥n con el servidor (modo ultra-ligero)\nconst testServerConnection = async () => {\n  console.log('üîÑ Probando conexi√≥n con el servidor (modo emergencia)...');\n  \n  try {\n    // Usar XMLHttpRequest sin cookies ni headers personalizados\n    const xhr = new XMLHttpRequest();\n    \n    const responsePromise = new Promise((resolve) => {\n      const timeoutId = setTimeout(() => {\n        console.warn('‚è±Ô∏è Timeout en la prueba de conexi√≥n');\n        xhr.abort();\n        resolve(false);\n      }, 5000);\n      \n      xhr.onreadystatechange = function() {\n        if (xhr.readyState === 4) {\n          clearTimeout(timeoutId);\n          if (xhr.status >= 200 && xhr.status < 300) {\n            console.log('‚úÖ Conexi√≥n b√°sica establecida');\n            resolve(true);\n          } else if (xhr.status === 431) {\n            console.error('‚ùå Error 431: Request Header Fields Too Large');\n            console.log('üëâ Necesitas reducir el tama√±o de las cookies o headers');\n            resolve(false);\n          } else {\n            console.error(`‚ùå Error en prueba de conexi√≥n: ${xhr.status}`);\n            resolve(false);\n          }\n        }\n      };\n      \n      xhr.onerror = function() {\n        clearTimeout(timeoutId);\n        console.error('‚ùå Error de red en prueba de conexi√≥n');\n        // Intentar con endpoint de emergencia sin headers\n        checkAlternativePort().then(resolve);\n      };\n      \n      // Realizar una solicitud GET simple sin headers\n      xhr.open('GET', `${API_URL}/test/ping`, true);\n      // No a√±adir ning√∫n header\n      xhr.withCredentials = false; // Importante: evitar enviar cookies\n      xhr.send();\n    });\n    \n    return await responsePromise;\n  } catch (error) {\n    console.error('‚ùå Error en prueba de conexi√≥n:', error);\n    return false;\n  }\n};\n\n// Comprobar puerto alternativo\nconst checkAlternativePort = async () => {\n  console.log('üîÑ Probando puertos alternativos...');\n  \n  // Lista de puertos comunes para probar\n  const ports = [8080, 3000, 5000, 8000];\n  \n  for (const port of ports) {\n    try {\n      console.log(`Probando en puerto: ${port}`);\n      const response = await fetch(`http://localhost:${port}/raw/ping`, {\n        method: 'GET',\n        mode: 'no-cors',\n        cache: 'no-store',\n        credentials: 'omit'\n      });\n      \n      if (response.ok || response.status === 0) {\n        console.log(`‚úÖ Servidor encontrado en puerto ${port}`);\n        // Actualizar URL global para usar este puerto\n        window.SERVER_PORT = port;\n        return true;\n      }\n    } catch (error) {\n      console.log(`Puerto ${port} no disponible`);\n    }\n  }\n  \n  console.error('‚ùå No se encontr√≥ el servidor en ning√∫n puerto com√∫n');\n  return false;\n};\n\n// Funci√≥n para probar la conexi√≥n a MySQL\nconst testMySQLConnection = async () => {\n  console.log('üîÑ Probando conexi√≥n a MySQL...');\n  \n  try {\n    const response = await fetch(`${API_URL}/test/db`, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json'\n      }\n    });\n    \n    if (response.ok) {\n      const data = await response.json();\n      console.log('‚úÖ Conexi√≥n a MySQL establecida:', data);\n      \n      // Mostrar informaci√≥n clara sobre la base de datos\n      if (data.data && data.data.database) {\n        console.log(`üìä Base de datos MySQL: ${data.data.database}`);\n        console.log(`üìä Tablas disponibles: ${data.data.tables.join(', ')}`);\n      }\n      \n      return true;\n    } else {\n      console.error('‚ùå Error al conectar con MySQL:', await response.text());\n      return false;\n    }\n  } catch (error) {\n    console.error('‚ùå Error de red al probar la conexi√≥n MySQL:', error);\n    return false;\n  }\n};\n\n// Funci√≥n para sincronizar datos entre IndexedDB y el servidor\nconst syncData = async () => {\n  if (!await isOnline()) {\n    console.log('Sin conexi√≥n a Internet, la sincronizaci√≥n no es posible');\n    return false;\n  }\n  \n  if (isSyncing) {\n    console.log('Ya hay una sincronizaci√≥n en progreso');\n    return false;\n  }\n  \n  isSyncing = true;\n  \n  console.log('üîÑ Iniciando sincronizaci√≥n de datos...');\n  \n  try {\n    // Procesar la cola de sincronizaci√≥n\n    const syncQueue = await getSyncQueue();\n    console.log(`üìã Cola de sincronizaci√≥n: ${syncQueue.length} elementos`);\n    \n    for (const item of syncQueue) {\n      if (item.entityType === 'plato') {\n        // Obtener el plato completo de IndexedDB\n        const plato = await getPlato(item.entityId);\n        \n        if (plato) {\n          console.log(`üçΩÔ∏è Sincronizando plato: ${plato.name} (${plato.id})`);\n          \n          try {\n            // Intentar sincronizaci√≥n minimalista\n            const success = await syncPlato(plato);\n            \n            if (success.success) {\n              console.log(`‚úÖ Plato ${plato.id} sincronizado correctamente`);\n              await removeFromSyncQueue(item.id);\n            } else {\n              console.error(`‚ùå Error al sincronizar plato ${plato.id}`);\n            }\n          } catch (syncError) {\n            console.error(`‚ùå Excepci√≥n al sincronizar plato ${plato.id}:`, syncError);\n          }\n        } else {\n          console.warn(`‚ö†Ô∏è Plato ${item.entityId} no encontrado en IndexedDB`);\n          await removeFromSyncQueue(item.id);\n        }\n      }\n    }\n    \n    // Buscar platos pendientes que no est√©n en la cola\n    console.log('üîç Buscando platos pendientes de sincronizaci√≥n...');\n    const pendingPlatos = await getPendingPlatos();\n    console.log(`üìã Platos pendientes: ${pendingPlatos.length}`);\n    \n    for (const plato of pendingPlatos) {\n      try {\n        console.log(`üçΩÔ∏è Sincronizando plato pendiente: ${plato.name} (${plato.id})`);\n        const success = await syncPlato(plato);\n        \n        if (success.success) {\n          console.log(`‚úÖ Plato pendiente ${plato.id} sincronizado correctamente`);\n        } else {\n          console.error(`‚ùå Error al sincronizar plato pendiente ${plato.id}: ${success.error}`);\n        }\n      } catch (syncError) {\n        console.error(`‚ùå Excepci√≥n al sincronizar plato pendiente ${plato.id}: ${syncError}`);\n      }\n    }\n    \n    console.log('‚úÖ Sincronizaci√≥n completada');\n    return true;\n  } catch (error) {\n    console.error('‚ùå Error durante la sincronizaci√≥n:', error);\n    return false;\n  } finally {\n    isSyncing = false;\n  }\n};\n\n// M√©todo ultra-minimal usando XMLHttpRequest sin headers\nconst tryUltraMinimalSync = async (data, platoId) => {\n  try {\n    console.log('üö® Intentando sincronizaci√≥n ultra-minimal para plato:', platoId);\n    \n    // Crear un objeto XMLHttpRequest directamente\n    const xhr = new XMLHttpRequest();\n    \n    // Configurar una promesa para manejar la respuesta\n    const responsePromise = new Promise((resolve) => {\n      // Configurar timeout\n      const timeoutId = setTimeout(() => {\n        console.warn('‚è±Ô∏è Timeout en sincronizaci√≥n ultra-minimal');\n        xhr.abort();\n        resolve(false);\n      }, 15000);\n      \n      xhr.onreadystatechange = async function() {\n        if (xhr.readyState === 4) {\n          clearTimeout(timeoutId);\n          if (xhr.status >= 200 && xhr.status < 300) {\n            console.log('‚úÖ Sincronizaci√≥n ultra-minimal exitosa');\n            try {\n              await updatePlatoSyncStatus(platoId, 'synced');\n            } catch (dbError) {\n              console.error('Error al actualizar estado en BD:', dbError);\n            }\n            resolve(true);\n          } else {\n            console.error(`‚ùå Error en sincronizaci√≥n ultra-minimal: ${xhr.status}`);\n            resolve(false);\n          }\n        }\n      };\n      \n      xhr.onerror = function() {\n        clearTimeout(timeoutId);\n        console.error('‚ùå Error de red en sincronizaci√≥n ultra-minimal');\n        resolve(false);\n      };\n    });\n    \n    // Usar m√©todo POST con datos minimalistas\n    xhr.open('POST', `${API_URL}/platos/emergency-sync`, true);\n    \n    // Solo agregar Content-Type, nada m√°s\n    xhr.setRequestHeader('Content-Type', 'application/json');\n    \n    // Preparar datos ultra-minimalistas\n    const adaptedData = await adaptPlatoDataWithImageOptimization(data);\n    const minimalData = {\n      id: adaptedData.id,\n      name: (adaptedData.name || \"\").substring(0, 30),\n      price: Number(adaptedData.price) || 0\n    };\n    \n    // Enviar los datos\n    xhr.send(JSON.stringify(minimalData));\n    \n    return await responsePromise;\n  } catch (error) {\n    console.error('‚ùå Error en sincronizaci√≥n ultra-minimal:', error);\n    return false;\n  }\n};\n\n// Procesar la cola de sincronizaci√≥n\nconst processSyncQueue = async () => {\n  if (!await isOnline() || isSyncing) {\n    console.log(`No se puede procesar la cola. En l√≠nea: ${_isOnline}, Sincronizando: ${isSyncing}`);\n    return false;\n  }\n  \n  isSyncing = true;\n  console.log('Iniciando procesamiento de cola de sincronizaci√≥n...');\n  \n  try {\n    const syncItems = await getSyncQueue();\n    \n    if (syncItems.length === 0) {\n      console.log('No hay elementos en la cola de sincronizaci√≥n');\n      isSyncing = false;\n      return true;\n    }\n    \n    console.log(`Procesando ${syncItems.length} elementos en la cola de sincronizaci√≥n`);\n    \n    // Procesar cada elemento de la cola\n    for (const item of syncItems) {\n      let syncSuccess = false;\n      \n      if (item.type === 'create' && item.entityType === 'plato') {\n        syncSuccess = await syncPlatoToServer(item.data);\n      }\n      // Aqu√≠ pueden agregarse m√°s tipos de sincronizaci√≥n seg√∫n sea necesario\n      \n      if (syncSuccess) {\n        // Eliminar de la cola si la sincronizaci√≥n fue exitosa\n        await removeFromSyncQueue(item.id);\n        console.log(`Elemento ${item.id} eliminado de la cola de sincronizaci√≥n`);\n      } else {\n        console.log(`No se pudo sincronizar el elemento ${item.id}, se reintentar√° m√°s tarde`);\n      }\n    }\n    \n    console.log('Procesamiento de cola de sincronizaci√≥n completado');\n    return true;\n  } catch (error) {\n    console.error('Error al procesar cola de sincronizaci√≥n:', error);\n    return false;\n  } finally {\n    isSyncing = false;\n  }\n};\n\n// M√©todo de sincronizaci√≥n extremadamente simplificado para problemas persistentes\nexport const syncMinimalDataOnly = async (data, platoId, retryCount = 0) => {\n  const maxRetries = SYNC_CONFIG.maxRetries;\n  \n  // Usar datos minimalistas pero incluir la imagen optimizada\n  const adaptedData = await adaptPlatoDataWithImageOptimization(data);\n  const minimalData = {\n    id: adaptedData.id,\n    name: adaptedData.name?.substring(0, 50) || 'Plato sin nombre',\n    price: Number(adaptedData.price) || 0,\n    description: adaptedData.description?.substring(0, 100) || '',\n    category: adaptedData.category || 'principal',\n    image: adaptedData.image, // Incluir la imagen optimizada\n    is_available: Boolean(adaptedData.is_available),\n    minimal_sync: true\n  };\n  \n  return new Promise((resolve) => {\n    // Establecer timeout para toda la operaci√≥n\n    const operationTimeoutId = setTimeout(() => {\n      console.warn('‚è±Ô∏è Timeout global de la operaci√≥n de sincronizaci√≥n');\n      resolve(false);\n    }, 30000);\n    \n    const xhr = new XMLHttpRequest();\n    \n    // Configurar timeouts m√°s estrictos\n    xhr.timeout = 15000;\n    \n    xhr.onreadystatechange = async function() {\n      if (xhr.readyState === 4) {\n        if (xhr.status >= 200 && xhr.status < 300) {\n          clearTimeout(operationTimeoutId);\n          try {\n            await updatePlatoSyncStatus(platoId, 'synced');\n            console.log(`‚úÖ Sincronizaci√≥n exitosa para plato ${platoId}`);\n          } catch (error) {\n            console.error('Error al actualizar estado:', error);\n          }\n          resolve(true);\n        } else if (xhr.status === 0) {\n          // Conexi√≥n abortada o no establecida\n          console.warn('‚ö†Ô∏è Conexi√≥n interrumpida');\n          handleRetry();\n        } else if (xhr.status === 431) {\n          console.error(`‚ùå Error 431 (Headers demasiado grandes) - Intentando m√©todo ultraminimal`);\n          tryUltraMinimalSync(adaptedData, platoId).then(success => {\n            clearTimeout(operationTimeoutId);\n            resolve(success);\n          });\n        } else {\n          console.error(`‚ùå Error HTTP ${xhr.status} en sincronizaci√≥n`);\n          handleRetry();\n        }\n      }\n    };\n    \n    xhr.ontimeout = function() {\n      console.warn('‚è±Ô∏è Timeout de la petici√≥n HTTP');\n      handleRetry();\n    };\n    \n    xhr.onerror = function() {\n      console.error('‚ùå Error de red en sincronizaci√≥n');\n      handleRetry();\n    };\n    \n    // Funci√≥n para manejar reintentos\n    const handleRetry = () => {\n      if (retryCount < maxRetries) {\n        const delay = SYNC_CONFIG.retryIntervals[retryCount] || 5000;\n        console.log(`üîÑ Reintentando en ${delay}ms... (${retryCount + 1}/${maxRetries})`);\n        \n        setTimeout(() => {\n          clearTimeout(operationTimeoutId);\n          syncMinimalDataOnly(data, platoId, retryCount + 1)\n            .then(success => resolve(success));\n        }, delay);\n      } else {\n        clearTimeout(operationTimeoutId);\n        console.warn('‚ùå Agotados todos los reintentos de sincronizaci√≥n');\n        resolve(false);\n      }\n    };\n    \n    try {\n      // Usar m√©todo POST con headers m√≠nimos\n      xhr.open('POST', `${API_URL}/platos`, true);\n      xhr.setRequestHeader('Content-Type', 'application/json');\n      \n      // Enviar los datos minimalistas\n      xhr.send(JSON.stringify(minimalData));\n    } catch (error) {\n      console.error('‚ùå Error al iniciar la petici√≥n:', error);\n      handleRetry();\n    }\n  });\n};\n\n// Sincronizar un plato con el servidor\nconst syncPlatoToServer = async (plato, retryCount = 0) => {\n  const maxRetries = SYNC_CONFIG.maxRetries;\n  \n  // Si el plato est√° marcado como problem√°tico, omitirlo\n  if (plato.sync_problematic) {\n    console.warn(`‚ö†Ô∏è Omitiendo plato ${plato.id} marcado como problem√°tico para sincronizaci√≥n`);\n    return false;\n  }\n  \n  console.log(`Sincronizando plato ${plato.id} con el servidor (intento ${retryCount + 1}/${maxRetries + 1})...`);\n  \n  try {\n    // Omitir verificaci√≥n si est√° desactivada\n    if (!SYNC_CONFIG.skipServerAvailabilityCheck) {\n      // Verificar si el servidor est√° disponible\n      const serverAvailable = await checkServerAvailability();\n      if (!serverAvailable) {\n        console.error('‚ùå El servidor no est√° disponible. Posponiendo sincronizaci√≥n.');\n        return false;\n      }\n    }\n    \n    // Preparar datos para sincronizaci√≥n incluyendo la imagen\n    let adaptedData = await adaptPlatoDataWithImageOptimization(plato);\n    let syncData = {\n      id: adaptedData.id,\n      name: adaptedData.name?.substring(0, 50) || 'Plato sin nombre',\n      price: Number(adaptedData.price) || 0,\n      description: adaptedData.description?.substring(0, 100) || '',\n      availableQuantity: Number(adaptedData.availableQuantity) || 0,\n      is_available: Boolean(adaptedData.is_available),\n      image: adaptedData.image || null, // Incluir la imagen\n      minimal_sync: true\n    };\n    \n    // Usar el m√©todo m√°s confiable para sincronizaci√≥n\n    return await syncPlato(adaptedData);\n  } catch (error) {\n    console.error('‚ùå Error en sincronizaci√≥n:', error);\n    \n    if (retryCount >= maxRetries) {\n      try {\n        await markPlatoAsSyncProblematic(plato.id);\n      } catch (markError) {\n        console.error('Error al marcar plato como problem√°tico:', markError);\n      }\n    }\n    \n    return false;\n  }\n};\n\n// Verificar estado de sincronizaci√≥n con el backend\nconst checkSyncStatus = async () => {\n  try {\n    console.log('üîÑ Verificando estado de sincronizaci√≥n...');\n    \n    const response = await fetch(`${API_URL}/sync/status`, {\n      method: 'GET',\n      headers: { 'Accept': 'application/json' },\n      credentials: 'omit' // Importante: no enviar cookies\n    });\n    \n    if (response.ok) {\n      const data = await response.json();\n      console.log('üìä Estado de sincronizaci√≥n:', data);\n      \n      // Si no existe la tabla, intentar crearla\n      if (!data.data.mysql.tablaPlatos) {\n        console.log('‚ö†Ô∏è La tabla platos no existe, intentando configurar...');\n        await setupSync();\n      }\n      \n      return data.data;\n    } else {\n      console.error('‚ùå Error al verificar estado de sincronizaci√≥n:', await response.text());\n      return null;\n    }\n  } catch (error) {\n    console.error('‚ùå Error al verificar estado de sincronizaci√≥n:', error);\n    return null;\n  }\n};\n\n// Configurar la sincronizaci√≥n - crear tablas necesarias\nconst setupSync = async () => {\n  try {\n    console.log('üîÑ Configurando sincronizaci√≥n...');\n    \n    const response = await fetch(`${API_URL}/sync/setup`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      credentials: 'omit',\n      body: JSON.stringify({ force: false })\n    });\n    \n    if (response.ok) {\n      const data = await response.json();\n      console.log('‚úÖ Configuraci√≥n de sincronizaci√≥n completada:', data);\n      return true;\n    } else {\n      console.error('‚ùå Error al configurar sincronizaci√≥n:', await response.text());\n      return false;\n    }\n  } catch (error) {\n    console.error('‚ùå Error al configurar sincronizaci√≥n:', error);\n    return false;\n  }\n};\n\n// Inicializar el servicio de sincronizaci√≥n\nconst initSyncService = () => {\n  console.log('üîÑ Inicializando servicio de sincronizaci√≥n...');\n  \n  // Probar conexiones y configurar sincronizaci√≥n\n  Promise.all([\n    testServerConnection(),\n    checkSyncStatus()\n  ]).then(([isApiConnected, syncStatus]) => {\n    console.log(`‚úÖ Estado de conexi√≥n directa - API: ${isApiConnected}`);\n    \n    if (isApiConnected) {\n      // Configurar escuchas para eventos de conexi√≥n\n      setupConnectionListeners();\n      \n      // Si hay estado de sincronizaci√≥n, proceder con la sincronizaci√≥n\n      if (syncStatus && syncStatus.mysql && syncStatus.mysql.connected) {\n        console.log('üìä MySQL conectado, procediendo con sincronizaci√≥n');\n        syncData();\n        \n        // Reactivar la sincronizaci√≥n peri√≥dica (cada 1 minuto)\n        const syncInterval = setInterval(syncData, 60000);\n      } else {\n        console.log('‚ö†Ô∏è MySQL no est√° configurado correctamente, intentando configurar...');\n        setupSync().then(success => {\n          if (success) {\n            console.log('‚úÖ Configuraci√≥n exitosa, iniciando sincronizaci√≥n');\n            syncData();\n            \n            // Reactivar la sincronizaci√≥n peri√≥dica (cada 1 minuto)\n            const syncInterval = setInterval(syncData, 60000);\n          }\n        });\n      }\n    } else {\n      console.error('‚ùå No se pudo establecer conexi√≥n con el servidor.');\n    }\n  });\n  \n  console.log('‚öôÔ∏è Servicio de sincronizaci√≥n inicializado');\n};\n\n// Exportar las funciones necesarias\nexport {\n  initSyncService,\n  syncData,\n  isOnline,\n  _isOnline,\n  testServerConnection,\n  testMySQLConnection,\n  checkSyncStatus,\n  setupSync,\n  syncPlato,\n  adaptPlatoDataWithImageOptimization\n};\n\n// Aseg√∫rate de que la funci√≥n que maneja la sincronizaci√≥n tenga un mejor manejo de errores\n\n/**\n * Funci√≥n para sincronizar un plato con el servidor, asegurando que la imagen se incluya\n * @param {Object} plato - El plato a sincronizar\n * @returns {Promise<Object>} - Resultado de la sincronizaci√≥n\n */\nconst syncPlato = async (plato) => {\n  console.log(`üîÑ Sincronizando plato: ${plato.name} (ID: ${plato.id})`);\n  \n  try {\n    // Preparar los datos para enviar (incluir la imagen optimizada)\n    const platoToSync = await adaptPlatoDataWithImageOptimization(plato);\n    \n    // Omitir la imagen en los logs para evitar mensajes demasiado largos\n    console.log('üì§ Datos a enviar:', { \n      ...platoToSync, \n      image: platoToSync.image ? 'Imagen en base64 (omitida en log)' : null \n    });\n    \n    // Imprimir la URL exacta para depuraci√≥n\n    const url = SYNC_CONFIG.platoUrl; // Usar la configuraci√≥n existente\n    console.log(`üîó URL de sincronizaci√≥n: ${url}`);\n    \n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(platoToSync),\n      // Evitar que se incluyan cookies u otros datos de autenticaci√≥n si no son necesarios\n      credentials: 'omit'\n    });\n    \n    // Verificar si la respuesta es exitosa\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error(`‚ùå Error de sincronizaci√≥n (${response.status}): ${errorText}`);\n      \n      // Intentar con el m√©todo de sincronizaci√≥n minimalista si hay un error\n      if (response.status >= 400) {\n        console.log('‚ö†Ô∏è Intentando sincronizaci√≥n minimalista como fallback...');\n        return await syncMinimalDataOnly(plato);\n      }\n      \n      return {\n        success: false,\n        message: `Error de servidor: ${response.status} ${response.statusText}`,\n        error: errorText\n      };\n    }\n    \n    // Procesar la respuesta exitosa\n    const responseData = await response.json();\n    console.log('‚úÖ Sincronizaci√≥n exitosa:', responseData);\n    \n    // Actualizar el estado de sincronizaci√≥n en IndexedDB\n    try {\n      await updatePlatoSyncStatus(plato.id, true);\n      console.log(`‚úÖ Estado de sincronizaci√≥n actualizado para plato ID: ${plato.id}`);\n    } catch (syncStatusError) {\n      console.warn(`‚ö†Ô∏è No se pudo actualizar el estado de sincronizaci√≥n: ${syncStatusError.message}`);\n    }\n    \n    return {\n      success: true,\n      message: 'Plato sincronizado correctamente',\n      data: responseData\n    };\n  } catch (error) {\n    console.error('‚ùå Error en sincronizaci√≥n:', error);\n    \n    // Intentar con el m√©todo de sincronizaci√≥n minimalista si hay un error\n    console.log('‚ö†Ô∏è Intentando sincronizaci√≥n minimalista como fallback...');\n    return await syncMinimalDataOnly(plato);\n  }\n};\n\n// Funci√≥n para adaptar los datos del plato antes de sincronizar, con optimizaci√≥n de im√°genes\nconst adaptPlatoDataWithImageOptimization = async (plato) => {\n  // Crear una copia para no modificar el original\n  const adaptedData = { ...plato };\n  \n  // Asegurarse de que todos los campos necesarios est√©n presentes\n  adaptedData.id = plato.id;\n  adaptedData.name = plato.name || 'Plato sin nombre';\n  adaptedData.price = parseFloat(plato.price) || 0;\n  adaptedData.description = plato.description || '';\n  adaptedData.category = plato.category || 'principal';\n  \n  // Optimizar la imagen si existe\n  if (plato.image && typeof plato.image === 'string' && plato.image.length > 0) {\n    try {\n      adaptedData.image = await optimizeImageForSync(plato.image);\n      console.log(`Imagen optimizada para ${plato.name}`);\n    } catch (error) {\n      console.warn(`Error al optimizar imagen para ${plato.name}:`, error);\n      adaptedData.image = plato.image; // Usar la original en caso de error\n    }\n  } else {\n    adaptedData.image = plato.image || null;\n  }\n  \n  adaptedData.image_url = plato.image_url || '';\n  adaptedData.is_available = plato.is_available !== false;\n  adaptedData.includesDrink = plato.includesDrink || false;\n  adaptedData.availableQuantity = plato.availableQuantity || 0;\n  \n  return adaptedData;\n};\n\n/**\n * Actualiza el estado de sincronizaci√≥n de un elemento\n * @param {string} id - ID del elemento\n * @param {string|boolean} status - Estado de sincronizaci√≥n ('pending', 'synced', 'pending_deletion' o un booleano)\n * @returns {Promise<boolean>} - true si se actualiz√≥ correctamente\n */\nexport async function updateSyncStatus(id, status) {\n  try {\n    // Validar que el status sea uno de los valores permitidos o convertir booleano a string\n    let validStatus = status;\n    \n    // Si es booleano, convertirlo al estado correspondiente\n    if (typeof status === 'boolean') {\n      validStatus = status === true ? 'synced' : 'pending';\n    }\n    \n    // Ahora validar que sea uno de los estados permitidos\n    if (!['pending', 'synced', 'pending_deletion'].includes(validStatus)) {\n      console.warn(`‚ö†Ô∏è No se pudo actualizar el estado de sincronizaci√≥n: Estado inv√°lido: ${status}. Debe ser uno de: pending, synced, pending_deletion`);\n      return false;\n    }\n    \n    // Continuar con la l√≥gica existente para actualizar el estado\n    // ...existing code...\n    \n    return true;\n  } catch (error) {\n    console.error('Error al actualizar estado de sincronizaci√≥n:', error);\n    return false;\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}