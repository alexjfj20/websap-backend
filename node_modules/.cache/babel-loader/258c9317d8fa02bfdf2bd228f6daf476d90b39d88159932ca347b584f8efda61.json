{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport { ref, computed, onMounted } from 'vue';\nimport { useRoute } from 'vue-router';\nexport default {\n  name: 'SharedMenuView',\n  setup() {\n    const route = useRoute();\n    const isLoading = ref(true);\n    const error = ref(null);\n    const menuData = ref(null);\n    const cartItems = ref([]);\n    const customerInfo = ref({\n      name: '',\n      phone: '',\n      email: '',\n      address: ''\n    });\n    const selectedPaymentMethod = ref('cash'); // Por defecto contra entrega\n    const additionalMessage = ref('');\n\n    // Obtener el ID del restaurante de la URL\n    const restauranteId = computed(() => {\n      // Usar el ID de la URL o un valor predeterminado\n      return route.params.id || '1';\n    });\n\n    // Elementos del menú regulares y especiales\n    const regularItems = computed(() => {\n      if (!menuData.value || !menuData.value.items) return [];\n      return menuData.value.items.filter(item => !item.isSpecial);\n    });\n    const specialItems = computed(() => {\n      if (!menuData.value || !menuData.value.items) return [];\n      return menuData.value.items.filter(item => item.isSpecial);\n    });\n\n    // Total del carrito\n    const cartTotal = computed(() => {\n      return cartItems.value.reduce((total, item) => {\n        return total + item.price * item.quantity;\n      }, 0);\n    });\n\n    // Cargar el menú desde la API pública\n    const loadMenu = async () => {\n      try {\n        isLoading.value = true;\n        error.value = null;\n\n        // Importar la configuración de la API\n        const apiConfig = await import('../config/apiConfig');\n        const API_URL = apiConfig.default.API_URL;\n        console.log('Usando API URL:', API_URL);\n\n        // Obtener el ID del restaurante de la URL\n        const id = route.params.id;\n        console.log('ID del restaurante desde URL:', id);\n        if (!id) {\n          error.value = 'ID de restaurante no válido';\n          isLoading.value = false;\n          return;\n        }\n        try {\n          // Intentar cargar el menú con el ID proporcionado\n          const apiUrl = `${API_URL}/menu-publico/${id}`;\n          console.log('Intentando cargar menú desde:', apiUrl);\n          const response = await fetch(apiUrl);\n          if (!response.ok) {\n            console.error('Error en la respuesta:', response.status, response.statusText);\n\n            // Si el ID específico no existe, intentar con ID 1 como fallback\n            console.log('Intentando cargar menú con ID de fallback: 1');\n            const fallbackResponse = await fetch(`${API_URL}/menu-publico/1`);\n            if (!fallbackResponse.ok) {\n              // Si aún falla, crear datos de demostración localmente\n              console.log('Creando datos de demostración localmente');\n              menuData.value = {\n                restaurante: {\n                  id: 'demo',\n                  nombre: 'Restaurante de Demostración',\n                  descripcion: 'Este es un restaurante de demostración para probar la aplicación',\n                  direccion: 'Calle Principal #123',\n                  telefono: '123-456-7890',\n                  logo: 'https://via.placeholder.com/150',\n                  horarios: 'Lunes a Domingo: 8:00 AM - 10:00 PM'\n                },\n                items: [{\n                  id: 'demo-1',\n                  name: 'Hamburguesa Clásica',\n                  description: 'Deliciosa hamburguesa con carne, queso, lechuga y tomate',\n                  price: 15000,\n                  image: 'https://via.placeholder.com/300',\n                  category: 'Hamburguesas',\n                  available: true,\n                  isSpecial: true\n                }, {\n                  id: 'demo-2',\n                  name: 'Pizza Margarita',\n                  description: 'Pizza tradicional con salsa de tomate, queso mozzarella y albahaca',\n                  price: 25000,\n                  image: 'https://via.placeholder.com/300',\n                  category: 'Pizzas',\n                  available: true,\n                  isSpecial: false\n                }, {\n                  id: 'demo-3',\n                  name: 'Ensalada César',\n                  description: 'Ensalada fresca con lechuga, pollo, crutones y aderezo césar',\n                  price: 12000,\n                  image: 'https://via.placeholder.com/300',\n                  category: 'Ensaladas',\n                  available: true,\n                  isSpecial: false\n                }],\n                businessInfo: {\n                  name: 'Restaurante de Demostración',\n                  description: 'Este es un restaurante de demostración para probar la aplicación',\n                  contact: '123-456-7890',\n                  address: 'Calle Principal #123',\n                  logo: 'https://via.placeholder.com/150'\n                }\n              };\n              isLoading.value = false;\n              return;\n            }\n            const fallbackData = await fallbackResponse.json();\n            if (fallbackData.success) {\n              menuData.value = fallbackData.menu;\n              console.log('Menú cargado con ID de fallback:', menuData.value);\n              isLoading.value = false;\n              return;\n            } else {\n              throw new Error('Error al cargar el menú con ID de fallback');\n            }\n          }\n          const data = await response.json();\n          if (!data.success) {\n            throw new Error(data.message || 'Error al cargar el menú');\n          }\n          menuData.value = data.menu;\n          console.log('Menú cargado correctamente:', menuData.value);\n        } catch (fetchError) {\n          console.error('Error al cargar el menú:', fetchError);\n\n          // Como último recurso, crear datos de demostración localmente\n          console.log('Creando datos de demostración como último recurso');\n          menuData.value = {\n            restaurante: {\n              id: 'demo',\n              nombre: 'Restaurante de Demostración',\n              descripcion: 'Este es un restaurante de demostración para probar la aplicación',\n              direccion: 'Calle Principal #123',\n              telefono: '123-456-7890',\n              logo: 'https://via.placeholder.com/150',\n              horarios: 'Lunes a Domingo: 8:00 AM - 10:00 PM'\n            },\n            items: [{\n              id: 'demo-1',\n              name: 'Hamburguesa Clásica',\n              description: 'Deliciosa hamburguesa con carne, queso, lechuga y tomate',\n              price: 15000,\n              image: 'https://via.placeholder.com/300',\n              category: 'Hamburguesas',\n              available: true,\n              isSpecial: true\n            }, {\n              id: 'demo-2',\n              name: 'Pizza Margarita',\n              description: 'Pizza tradicional con salsa de tomate, queso mozzarella y albahaca',\n              price: 25000,\n              image: 'https://via.placeholder.com/300',\n              category: 'Pizzas',\n              available: true,\n              isSpecial: false\n            }, {\n              id: 'demo-3',\n              name: 'Ensalada César',\n              description: 'Ensalada fresca con lechuga, pollo, crutones y aderezo césar',\n              price: 12000,\n              image: 'https://via.placeholder.com/300',\n              category: 'Ensaladas',\n              available: true,\n              isSpecial: false\n            }],\n            businessInfo: {\n              name: 'Restaurante de Demostración',\n              description: 'Este es un restaurante de demostración para probar la aplicación',\n              contact: '123-456-7890',\n              address: 'Calle Principal #123',\n              logo: 'https://via.placeholder.com/150'\n            }\n          };\n        }\n        isLoading.value = false;\n      } catch (err) {\n        console.error('Error general al cargar el menú:', err);\n        error.value = 'Error al cargar el menú. Por favor, intenta de nuevo.';\n        isLoading.value = false;\n      }\n    };\n\n    // Verificar si hay información de pago\n    const hasPaymentInfo = computed(() => {\n      const paymentInfo = menuData.value?.businessInfo?.paymentInfo;\n      if (!paymentInfo) return false;\n\n      // Verificar si hay al menos un campo de información de pago con datos\n      return !!(paymentInfo.qrImage && isValidImage(paymentInfo.qrImage) || paymentInfo.qrTitle || paymentInfo.nequiNumber || paymentInfo.nequiImage && isValidImage(paymentInfo.nequiImage) || paymentInfo.bankInfo || paymentInfo.otherPaymentMethods);\n    });\n\n    // Contador total de items\n    const totalItems = computed(() => {\n      return cartItems.value.reduce((total, item) => total + item.quantity, 0);\n    });\n\n    // Formatear precio\n    function formatPrice(price) {\n      if (isNaN(Number(price))) return '0,00';\n\n      // Convertir a número y formatear con 2 decimales fijos\n      const numero = Number(price).toFixed(2);\n\n      // Separar parte entera y decimal\n      const [parteEntera, parteDecimal] = numero.split('.');\n\n      // Formatear parte entera con puntos como separadores de miles\n      const parteEnteraFormateada = parteEntera.replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.');\n\n      // Unir con coma como separador decimal\n      return `${parteEnteraFormateada},${parteDecimal}`;\n    }\n\n    // Agregar al carrito con verificación de disponibilidad\n    async function addToCart(item) {\n      // Verificación directa antes de hacer la comprobación completa\n      if (Number(item.availableQuantity) <= 0) {\n        showToast(`Lo sentimos, \"${item.name}\" no está disponible actualmente. Intente más tarde por favor.`, 'error');\n        return;\n      }\n      const isAvailable = await checkAvailability(item);\n      if (!isAvailable) return;\n      const existingItem = cartItems.value.find(i => {\n        // Asegurar que ambos items tienen ID y compararlos, o comparar por nombre si no hay ID\n        if (item.id && i.id) {\n          return i.id === item.id;\n        }\n        return i.name === item.name;\n      });\n      if (existingItem) {\n        existingItem.quantity++;\n      } else {\n        cartItems.value.push({\n          id: item.id || Date.now().toString(),\n          name: item.name,\n          price: item.price,\n          quantity: 1,\n          availableQuantity: item.availableQuantity || 0 // Usar 0 como valor por defecto\n        });\n      }\n\n      // Guardar carrito en localStorage\n      saveCartToLocalStorage();\n\n      // Actualizar la disponibilidad en tiempo real\n      updateAvailabilityInMenu();\n\n      // Mostrar notificación de éxito\n      showToast(`${item.name} añadido al carrito`, 'success');\n    }\n\n    // Mostrar notificaciones toast\n    function showToast(message, type = 'success', duration = 5000) {\n      // Aumentar a 5 segundos\n      console.log(`[Toast] Mostrando notificación: ${message} (${type})`);\n\n      // Si ya hay un toast visible, limpiamos su timeout\n      if (toast.value.timeoutId) {\n        clearTimeout(toast.value.timeoutId);\n      }\n\n      // Configurar el nuevo toast\n      toast.value.message = message;\n      toast.value.type = type;\n      toast.value.visible = true;\n\n      // Debug: verificar que el estado del toast cambió\n      console.log(`[Toast] Estado: visible=${toast.value.visible}, message=${toast.value.message}`);\n\n      // Configurar timeout para ocultar después de la duración\n      toast.value.timeoutId = setTimeout(() => {\n        console.log(`[Toast] Ocultando notificación después de ${duration}ms`);\n        toast.value.visible = false;\n      }, duration);\n    }\n\n    // Guardar carrito en localStorage\n    function saveCartToLocalStorage() {\n      try {\n        localStorage.setItem(`cart_${restauranteId.value}`, JSON.stringify(cartItems.value));\n      } catch (e) {\n        console.error(\"Error al guardar carrito en localStorage:\", e);\n      }\n    }\n\n    // Incrementar cantidad\n    function increaseQuantity(index) {\n      const item = cartItems.value[index];\n\n      // Buscar el ítem en el menú\n      const menuItem = menuData.value.items?.find(i => i.id === item.id);\n      if (menuItem) {\n        // Verificar disponibilidad\n        const availableQuantity = menuItem.availableQuantity || 0;\n        if (item.quantity >= availableQuantity) {\n          showToast(`No hay más unidades disponibles de \"${item.name}\"`, 'warning');\n          return;\n        }\n      }\n\n      // Incrementar cantidad\n      item.quantity++;\n\n      // Guardar carrito y actualizar disponibilidad\n      saveCartToLocalStorage();\n      updateAvailabilityInMenu();\n    }\n\n    // Reemplazar la función decreaseQuantity (líneas 409-416)\n    function decreaseQuantity(index) {\n      if (cartItems.value[index].quantity > 1) {\n        cartItems.value[index].quantity--;\n        saveCartToLocalStorage();\n        updateAvailabilityInMenu(); // Actualizar disponibilidad\n      } else {\n        removeFromCart(index);\n      }\n    }\n\n    // Reemplazar la función removeFromCart (líneas 419-422)\n    function removeFromCart(index) {\n      cartItems.value.splice(index, 1);\n      saveCartToLocalStorage();\n      updateAvailabilityInMenu(); // Actualizar disponibilidad\n    }\n\n    // Completar pedido con actualización de inventario\n    async function completeOrder() {\n      try {\n        // Validaciones básicas\n        if (cartItems.value.length === 0) {\n          showToast('No hay ítems en el pedido', 'error');\n          return;\n        }\n        if (!customerInfo.value.name || !customerInfo.value.phone) {\n          showToast('Por favor complete su nombre y teléfono', 'error');\n          return;\n        }\n\n        // Indicar que está procesando\n        isProcessingOrder.value = true;\n\n        // Actualizar inventario - Usar el carrito correcto\n        await updateInventory();\n\n        // Compartir en WhatsApp\n        openWhatsAppShare();\n        showToast('¡Pedido completado! Gracias por tu compra.', 'success');\n\n        // Limpiar carrito y datos del cliente después de completar\n        setTimeout(() => {\n          // Limpiar carrito\n          cartItems.value = [];\n\n          // Limpiar localStorage\n          localStorage.removeItem(`cart_${restauranteId.value}`);\n\n          // Limpiar datos del cliente\n          customerInfo.value = {\n            name: '',\n            phone: '',\n            email: '',\n            address: ''\n          };\n          additionalMessage.value = '';\n          isProcessingOrder.value = false;\n        }, 2000);\n      } catch (error) {\n        console.error('Error al completar el pedido:', error);\n        showToast('Error al procesar el pedido', 'error');\n        isProcessingOrder.value = false;\n      }\n    }\n\n    // Compartir pedido por WhatsApp sin actualizar inventario\n    function shareOrderByWhatsApp() {\n      // Validaciones básicas\n      if (cartItems.value.length === 0) {\n        showToast('No hay ítems en el pedido', 'error');\n        return;\n      }\n      if (!customerInfo.value.name || !customerInfo.value.phone) {\n        showToast('Por favor complete su nombre y teléfono', 'error');\n        return;\n      }\n\n      // Compartir directamente en WhatsApp sin actualizar inventario\n      openWhatsAppShare();\n      showToast('Pedido compartido por WhatsApp', 'success');\n    }\n    function openWhatsAppShare() {\n      // Construir mensaje de pedido para WhatsApp\n      let whatsappMessage = `🛒 *Pedido de ${customerInfo.value.name}*\\n\\n`;\n      whatsappMessage += `📦 *Productos:*\\n`;\n      cartItems.value.forEach(item => {\n        const subtotal = (item.price * item.quantity).toFixed(2);\n        whatsappMessage += `🍽️ ${item.quantity}x ${item.name} = $${formatPrice(subtotal)}\\n`;\n      });\n      whatsappMessage += `\\n💵 *Total:* $${formatPrice(cartTotal.value)}\\n`;\n      if (customerInfo.value.phone) {\n        whatsappMessage += `📞 *Teléfono:* ${customerInfo.value.phone}\\n`;\n      }\n      if (customerInfo.value.email) {\n        whatsappMessage += `✉️ *Email:* ${customerInfo.value.email}\\n`;\n      }\n      if (customerInfo.value.address) {\n        whatsappMessage += `📍 *Dirección:* ${customerInfo.value.address}\\n`;\n      }\n      if (additionalMessage.value) {\n        whatsappMessage += `📝 *Notas adicionales:*\\n${additionalMessage.value}\\n`;\n      }\n\n      // Añadir método de pago seleccionado\n      const formaPago = selectedPaymentMethod.value === 'qr' ? 'Código QR' : selectedPaymentMethod.value === 'nequi' ? 'Nequi' : 'Contra entrega';\n      whatsappMessage += `\\n💳 *Forma de pago:* ${formaPago}`;\n\n      // Codificar y generar la URL de WhatsApp\n      const encodedMessage = encodeURIComponent(whatsappMessage);\n      const whatsappUrl = `https://api.whatsapp.com/send?text=${encodedMessage}`;\n\n      // Abrir WhatsApp en una nueva ventana\n      window.open(whatsappUrl, '_blank');\n    }\n\n    // Desplazarse a la sección del pedido\n    function scrollToOrder() {\n      const orderSection = document.querySelector('.order-section');\n      if (orderSection) {\n        orderSection.scrollIntoView({\n          behavior: 'smooth'\n        });\n      }\n    }\n\n    // Verificar disponibilidad de inventario\n    async function checkAvailability(item) {\n      // Obtener la disponibilidad base (valor original del inventario)\n      // Importante: asegurarse que sea un número\n      const baseAvailability = Number(item.availableQuantity) || 0;\n\n      // Verificación directa: si no hay stock, mostrar mensaje de error\n      if (baseAvailability <= 0) {\n        showToast(`Lo sentimos, \"${item.name}\" no está disponible actualmente. Intente más tarde por favor.`, 'error');\n        return false;\n      }\n\n      // Obtener la cantidad actual en el carrito\n      const cartItem = cartItems.value.find(i => i.id === item.id);\n      const cartQuantity = cartItem ? cartItem.quantity : 0;\n\n      // Calcular disponibilidad real\n      const realAvailability = baseAvailability - cartQuantity;\n\n      // Verificar la disponibilidad considerando lo que ya está en el carrito\n      if (realAvailability <= 0) {\n        showToast(`No hay más unidades disponibles de \"${item.name}\"`, 'warning');\n        return false;\n      } else if (realAvailability <= 5) {\n        showToast(`¡Solo quedan ${realAvailability} unidades de \"${item.name}\"!`, 'warning');\n      }\n      return true;\n    }\n\n    // Actualizar inventario al completar pedido\n    async function updateInventory() {\n      try {\n        // Validaciones iniciales\n        if (!cartItems.value || cartItems.value.length === 0) {\n          console.warn('Intentando actualizar inventario con carrito vacío');\n          return;\n        }\n        console.log(`Iniciando actualización de inventario para ${cartItems.value.length} productos...`);\n\n        // Obtener los elementos actuales del menú para actualizar cantidades\n        const currentMenu = await getMenuItems();\n        if (!currentMenu || !Array.isArray(currentMenu)) {\n          console.error('No se pudo obtener el menú actual');\n          return false;\n        }\n\n        // Crear una copia profunda del carrito para procesar (evitar modificaciones durante el procesamiento)\n        const itemsToProcess = JSON.parse(JSON.stringify(cartItems.value));\n        const updateResults = [];\n        let hasErrors = false;\n\n        // Importar función para guardar elementos vendidos\n        const {\n          getSoldItems,\n          saveSoldItems\n        } = await import('../services/storageService');\n\n        // Obtener la lista actual de elementos vendidos\n        let soldItemsList = [];\n        try {\n          soldItemsList = (await getSoldItems()) || [];\n          if (!Array.isArray(soldItemsList)) {\n            soldItemsList = [];\n          }\n          console.log('Lista de elementos vendidos obtenida:', soldItemsList.length);\n        } catch (soldItemsError) {\n          console.warn('Error al obtener elementos vendidos:', soldItemsError);\n          soldItemsList = [];\n        }\n\n        // Procesar cada elemento del carrito de forma secuencial para evitar condiciones de carrera\n        for (let i = 0; i < itemsToProcess.length; i++) {\n          const cartItem = itemsToProcess[i];\n          console.log(`Procesando item ${i + 1}/${itemsToProcess.length}: ${cartItem.name} (ID: ${cartItem.id})`);\n          try {\n            // Buscar el ítem correspondiente en el menú actual\n            const menuItem = currentMenu.find(item => item.id === cartItem.id);\n            if (!menuItem) {\n              console.warn(`Elemento no encontrado en el menú: ${cartItem.name} (ID: ${cartItem.id})`);\n              updateResults.push({\n                name: cartItem.name,\n                success: false,\n                error: 'Elemento no encontrado en el menú'\n              });\n              continue;\n            }\n\n            // Garantizar que estamos trabajando con números enteros válidos\n            const currentQuantity = parseInt(Number(menuItem.availableQuantity || 0), 10);\n            const soldQuantity = parseInt(Number(cartItem.quantity || 0), 10);\n            if (isNaN(currentQuantity) || isNaN(soldQuantity)) {\n              const error = `Cantidades inválidas para ${cartItem.name}: disponible=${menuItem.availableQuantity}, vendido=${cartItem.quantity}`;\n              console.error(error);\n              updateResults.push({\n                name: cartItem.name,\n                success: false,\n                error: error\n              });\n              hasErrors = true;\n              continue;\n            }\n\n            // Calcular nueva cantidad exacta como entero\n            const newQuantity = Math.max(0, currentQuantity - soldQuantity);\n            console.log(`Actualizando ${cartItem.name}: ${currentQuantity} - ${soldQuantity} = ${newQuantity} (currentQuantity tipo: ${typeof currentQuantity}, soldQuantity tipo: ${typeof soldQuantity})`);\n\n            // Actualizar disponibilidad usando la función mejorada - forzar como número entero\n            const updateSuccess = await updateItemAvailability(menuItem.id, newQuantity);\n\n            // Registrar resultado detallado\n            updateResults.push({\n              name: cartItem.name,\n              oldQuantity: currentQuantity,\n              soldQuantity: soldQuantity,\n              newQuantity: newQuantity,\n              success: updateSuccess,\n              error: updateSuccess ? null : 'Error al actualizar disponibilidad'\n            });\n            if (!updateSuccess) {\n              hasErrors = true;\n            } else {\n              // Registrar en la lista de platos vendidos si la actualización fue exitosa\n              const currentDate = new Date().toISOString();\n              const existingSoldItem = soldItemsList.find(item => item.name === cartItem.name);\n              if (existingSoldItem) {\n                existingSoldItem.quantity += soldQuantity;\n                existingSoldItem.date = currentDate;\n              } else {\n                soldItemsList.push({\n                  name: cartItem.name,\n                  quantity: soldQuantity,\n                  price: cartItem.price,\n                  includesDrink: menuItem.includesDrink || false,\n                  date: currentDate\n                });\n              }\n              console.log(`Elemento registrado en lista de vendidos: ${cartItem.name} x${soldQuantity}`);\n            }\n          } catch (itemError) {\n            console.error(`Error procesando ${cartItem.name}:`, itemError);\n            updateResults.push({\n              name: cartItem.name,\n              success: false,\n              error: itemError.message || 'Error desconocido'\n            });\n            hasErrors = true;\n          }\n        }\n\n        // Guardar la lista actualizada de elementos vendidos\n        try {\n          await saveSoldItems(soldItemsList);\n          console.log(`Lista de elementos vendidos actualizada con ${soldItemsList.length} elementos`);\n        } catch (saveError) {\n          console.error('Error al guardar elementos vendidos:', saveError);\n        }\n\n        // Mostrar resumen de la operación\n        const successCount = updateResults.filter(r => r.success).length;\n        console.log(`Actualización de inventario completada. Éxitos: ${successCount}/${itemsToProcess.length}`);\n\n        // Registrar detalles completos de la actualización\n        console.log('Detalles de actualización de inventario:', updateResults);\n        if (hasErrors) {\n          const failedItems = updateResults.filter(r => !r.success).map(r => r.name).join(', ');\n          console.warn(`Algunos productos no se pudieron actualizar: ${failedItems}`);\n        }\n        return successCount > 0;\n      } catch (error) {\n        console.error('Error general al actualizar inventario:', error);\n        return false;\n      }\n    }\n\n    // Añadir después de la función checkAvailability (línea 585)\n    // Función para actualizar la disponibilidad en tiempo real\n    function updateAvailabilityInMenu() {\n      if (!menuData.value?.items) return;\n\n      // Actualizar la disponibilidad de todos los ítems\n      menuData.value.items.forEach(menuItem => {\n        // Encontrar si este ítem está en el carrito\n        const cartItem = cartItems.value.find(i => i.id === menuItem.id);\n        const cartQuantity = cartItem ? cartItem.quantity : 0;\n\n        // Asegurarse de que availableQuantity sea un número exacto, no undefined o null\n        const baseAvailability = Number(menuItem.availableQuantity) || 0;\n\n        // Calcular disponibilidad real\n        menuItem.realAvailability = baseAvailability - cartQuantity;\n        console.log(`Disponibilidad actualizada para ${menuItem.name}: ${menuItem.realAvailability} unidades (base: ${baseAvailability}, carrito: ${cartQuantity})`);\n      });\n    }\n\n    // Verificar si una cadena de imagen es válida\n    function isValidImage(imageString) {\n      if (!imageString) return false;\n\n      // Verificar si es una URL\n      if (imageString.startsWith('http://') || imageString.startsWith('https://')) {\n        return true;\n      }\n\n      // Verificar si es una imagen en base64\n      if (imageString.startsWith('data:image/')) {\n        return true;\n      }\n      return false;\n    }\n\n    // Corregir formato de imagen si es necesario\n    function fixImageFormat(imageString) {\n      if (!imageString) return '';\n\n      // Si ya es una URL o base64 válido, devolverlo tal cual\n      if (isValidImage(imageString)) {\n        return imageString;\n      }\n\n      // Intentar convertir a base64 si no tiene el prefijo correcto\n      if (imageString.includes('/9j/') && !imageString.startsWith('data:image/')) {\n        return `data:image/jpeg;base64,${imageString}`;\n      }\n\n      // Si no se puede arreglar, devolver una imagen por defecto\n      return '';\n    }\n\n    // Estado para el formulario de reserva\n    const showReservationForm = ref(false);\n    const isProcessingReservation = ref(false);\n    const reservationSuccess = ref(false);\n    const reservationError = ref(null);\n    const reservationData = ref({\n      fullName: '',\n      mobilePhone: '',\n      landlinePhone: '',\n      address: '',\n      email: '',\n      orderDate: getCurrentDate(),\n      // Set the initial value here\n      reservationDate: '',\n      reservationTime: '',\n      peopleCount: 1,\n      additionalNotes: ''\n    });\n\n    // Función para obtener la fecha actual en formato YYYY-MM-DD\n    function getCurrentDate() {\n      const today = new Date();\n      const year = today.getFullYear();\n      const month = String(today.getMonth() + 1).padStart(2, '0');\n      const day = String(today.getDate()).padStart(2, '0');\n      return `${year}-${month}-${day}`;\n    }\n\n    // Función para enviar la reserva\n    async function submitReservation() {\n      isProcessingReservation.value = true;\n      reservationSuccess.value = false;\n      reservationError.value = null;\n      try {\n        // Utilizamos el servicio de reservas para guardar los datos\n        const result = await saveReservation(reservationData.value);\n        if (result.success) {\n          // Reserva guardada correctamente\n          reservationSuccess.value = true;\n          showToast('¡Reserva enviada con éxito! Recibirá un correo de confirmación en breve.', 'success');\n\n          // Enviar correo de confirmación (simulado)\n          console.log('Enviando correo de confirmación a:', reservationData.value.email);\n\n          // Limpiar el formulario y ocultarlo después de un tiempo\n          setTimeout(() => {\n            resetReservationForm();\n            showReservationForm.value = false;\n          }, 3000);\n        } else {\n          // Error al guardar la reserva\n          throw new Error(result.error || 'Error al procesar la reserva');\n        }\n      } catch (error) {\n        console.error('Error al enviar la reserva:', error);\n        reservationError.value = 'Ocurrió un error al procesar su reserva. Por favor, intente nuevamente.';\n        showToast('Error al procesar la reserva. Por favor, intente nuevamente.', 'error');\n      } finally {\n        isProcessingReservation.value = false;\n      }\n    }\n\n    // Función para cancelar la reserva\n    function cancelReservation() {\n      resetReservationForm();\n      showReservationForm.value = false;\n    }\n\n    // Función para reiniciar el formulario\n    function resetReservationForm() {\n      reservationData.value.fullName = '';\n      reservationData.value.mobilePhone = '';\n      reservationData.value.landlinePhone = '';\n      reservationData.value.address = '';\n      reservationData.value.email = '';\n      reservationData.value.orderDate = getCurrentDate();\n      reservationData.value.reservationDate = '';\n      reservationData.value.reservationTime = '';\n      reservationData.value.peopleCount = 1;\n      reservationData.value.additionalNotes = '';\n      reservationSuccess.value = false;\n      reservationError.value = null;\n    }\n\n    // Refrescar información del negocio manualmente\n    async function refreshBusinessInfo() {\n      try {\n        const businessInfo = await fetchBusinessInfoFromBackend(true);\n        if (businessInfo) {\n          menuData.value.businessInfo = businessInfo;\n          lastBusinessInfoUpdate.value = Date.now();\n          showToast('Información del negocio actualizada', 'success');\n        }\n      } catch (error) {\n        console.error('Error al refrescar información del negocio:', error);\n        showToast('Error al actualizar información del negocio', 'error');\n      }\n    }\n\n    // Estado para el toast\n    const toast = ref({\n      visible: false,\n      message: '',\n      type: 'success',\n      // 'success', 'warning', 'error'\n      timeoutId: null\n    });\n\n    // Estado para la última actualización de la información del negocio\n    const lastBusinessInfoUpdate = ref(null);\n    onMounted(() => {\n      loadMenu();\n    });\n    return {\n      restauranteId,\n      isLoading,\n      error,\n      menuData,\n      regularItems,\n      specialItems,\n      cartItems,\n      cartTotal,\n      totalItems,\n      customerInfo,\n      selectedPaymentMethod,\n      additionalMessage,\n      addToCart,\n      removeFromCart,\n      increaseQuantity,\n      decreaseQuantity,\n      formatPrice,\n      completeOrder,\n      shareOrderByWhatsApp,\n      scrollToOrder,\n      isValidImage,\n      fixImageFormat,\n      hasPaymentInfo,\n      // Reservas\n      showReservationForm,\n      reservationData,\n      isProcessingReservation,\n      reservationSuccess,\n      reservationError,\n      submitReservation,\n      cancelReservation,\n      getCurrentDate,\n      // Añadir el objeto toast para que esté disponible en la plantilla\n      toast,\n      // Función para refrescar información del negocio\n      refreshBusinessInfo,\n      // Última actualización de la información del negocio\n      lastBusinessInfoUpdate\n    };\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","useRoute","name","setup","route","isLoading","error","menuData","cartItems","customerInfo","phone","email","address","selectedPaymentMethod","additionalMessage","restauranteId","params","id","regularItems","value","items","filter","item","isSpecial","specialItems","cartTotal","reduce","total","price","quantity","loadMenu","apiConfig","API_URL","default","console","log","apiUrl","response","fetch","ok","status","statusText","fallbackResponse","restaurante","nombre","descripcion","direccion","telefono","logo","horarios","description","image","category","available","businessInfo","contact","fallbackData","json","success","menu","Error","data","message","fetchError","err","hasPaymentInfo","paymentInfo","qrImage","isValidImage","qrTitle","nequiNumber","nequiImage","bankInfo","otherPaymentMethods","totalItems","formatPrice","isNaN","Number","numero","toFixed","parteEntera","parteDecimal","split","parteEnteraFormateada","replace","addToCart","availableQuantity","showToast","isAvailable","checkAvailability","existingItem","find","i","push","Date","now","toString","saveCartToLocalStorage","updateAvailabilityInMenu","type","duration","toast","timeoutId","clearTimeout","visible","setTimeout","localStorage","setItem","JSON","stringify","e","increaseQuantity","index","menuItem","decreaseQuantity","removeFromCart","splice","completeOrder","length","isProcessingOrder","updateInventory","openWhatsAppShare","removeItem","shareOrderByWhatsApp","whatsappMessage","forEach","subtotal","formaPago","encodedMessage","encodeURIComponent","whatsappUrl","window","open","scrollToOrder","orderSection","document","querySelector","scrollIntoView","behavior","baseAvailability","cartItem","cartQuantity","realAvailability","warn","currentMenu","getMenuItems","Array","isArray","itemsToProcess","parse","updateResults","hasErrors","getSoldItems","saveSoldItems","soldItemsList","soldItemsError","currentQuantity","parseInt","soldQuantity","newQuantity","Math","max","updateSuccess","updateItemAvailability","oldQuantity","currentDate","toISOString","existingSoldItem","date","includesDrink","itemError","saveError","successCount","r","failedItems","map","join","imageString","startsWith","fixImageFormat","includes","showReservationForm","isProcessingReservation","reservationSuccess","reservationError","reservationData","fullName","mobilePhone","landlinePhone","orderDate","getCurrentDate","reservationDate","reservationTime","peopleCount","additionalNotes","today","year","getFullYear","month","String","getMonth","padStart","day","getDate","submitReservation","result","saveReservation","resetReservationForm","cancelReservation","refreshBusinessInfo","fetchBusinessInfoFromBackend","lastBusinessInfoUpdate"],"sources":["F:\\Driver google\\VUE.JS-2\\VUE-JS\\websap\\src\\views\\SharedMenuView.vue"],"sourcesContent":["<template>\n  <div class=\"shared-menu-container\" :id=\"restauranteId\">\n    <div v-if=\"isLoading\" class=\"loading\">\n      <div class=\"spinner\"></div>\n      <p>Cargando menú...</p>\n    </div>\n    \n    <div v-else-if=\"error\" class=\"error\">\n      <p>{{ error }}</p>\n    </div>\n    \n    <div v-else class=\"menu-content\">\n      <!-- Información del negocio -->\n      <div v-if=\"menuData?.businessInfo\" class=\"business-info\">\n        <img v-if=\"menuData.businessInfo.logo && isValidImage(menuData.businessInfo.logo)\" :src=\"fixImageFormat(menuData.businessInfo.logo)\" alt=\"Logo\" class=\"business-logo\">\n        <h1>{{ menuData.businessInfo.name }}</h1>\n        <p class=\"description\">{{ menuData.businessInfo.description }}</p>\n        <div class=\"contact-info\" v-if=\"menuData.businessInfo.contact || menuData.businessInfo.address\">\n          <p v-if=\"menuData.businessInfo.contact\"><strong>Contacto:</strong> {{ menuData.businessInfo.contact }}</p>\n          <p v-if=\"menuData.businessInfo.address\"><strong>Dirección:</strong> {{ menuData.businessInfo.address }}</p>\n        </div>\n      </div>\n      \n      <!-- Lista de productos -->\n      <div>\n        <!-- Platos regulares -->\n        <div class=\"menu-list\">\n          <h2>Nuestro Menú</h2>\n          <div class=\"menu-items\">\n            <div v-for=\"(item, index) in regularItems\" :key=\"index\" class=\"menu-item\">\n              <div class=\"item-image-container\">\n                <img v-if=\"item.image && isValidImage(item.image)\" :src=\"fixImageFormat(item.image)\" alt=\"Imagen del producto\" class=\"item-image\">\n                <img v-else src=\"https://via.placeholder.com/150?text=Sin+Imagen\" alt=\"Sin imagen disponible\" class=\"item-image\">\n              </div>\n              <div class=\"item-details\">\n                <h3>{{ item.name }}</h3>\n                <p class=\"item-description\">{{ item.description }}</p>\n                <p class=\"item-price\">${{ formatPrice(item.price) }}</p>\n                <p class=\"includes-drink\" v-if=\"item.includesDrink\">Incluye refresco</p>\n                <button \n                  @click=\"addToCart(item)\" \n                  class=\"add-to-cart-btn\"\n                  :disabled=\"!item.realAvailability || item.realAvailability <= 0\"\n                  :class=\"{ 'disabled-btn': !item.realAvailability || item.realAvailability <= 0 }\"\n                >\n                  <span v-if=\"!item.realAvailability || item.realAvailability <= 0\" class=\"btn-icon\">❌</span>\n                  <span v-else class=\"btn-icon\">🛒</span>\n                  {{ !item.realAvailability || item.realAvailability <= 0 ? 'No disponible' : 'Añadir al pedido' }}\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        <!-- Platos especiales (solo se muestra si hay platos especiales) -->\n        <div v-if=\"specialItems.length > 0\" class=\"menu-list special-menu-list\">\n          <h2>Platos Especiales</h2>\n          <div class=\"menu-items\">\n            <div v-for=\"(item, index) in specialItems\" :key=\"index\" class=\"menu-item special-item\">\n              <div class=\"item-image-container\">\n                <img v-if=\"item.image && isValidImage(item.image)\" :src=\"fixImageFormat(item.image)\" alt=\"Imagen del producto\" class=\"item-image\">\n                <img v-else src=\"https://via.placeholder.com/150?text=Sin+Imagen\" alt=\"Sin imagen disponible\" class=\"item-image\">\n              </div>\n              <div class=\"item-details\">\n                <h3>{{ item.name }}</h3>\n                <p class=\"item-description\">{{ item.description }}</p>\n                <p class=\"item-price\">${{ formatPrice(item.price) }}</p>\n                <p class=\"includes-drink\" v-if=\"item.includesDrink\">Incluye refresco</p>\n                <button \n                  @click=\"addToCart(item)\" \n                  class=\"add-to-cart-btn special-button\"\n                  :disabled=\"!item.realAvailability || item.realAvailability <= 0\"\n                  :class=\"{ 'disabled-btn': !item.realAvailability || item.realAvailability <= 0 }\"\n                >\n                  <span v-if=\"!item.realAvailability || item.realAvailability <= 0\" class=\"btn-icon\">❌</span>\n                  <span v-else class=\"btn-icon\">🛒</span>\n                  {{ !item.realAvailability || item.realAvailability <= 0 ? 'No disponible' : 'Añadir al pedido' }}\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        <!-- Sección de \"Tu Pedido\" - Siempre visible aunque vacía -->\n        <div class=\"order-section\" ref=\"orderSection\">\n          <h2>Tu Pedido</h2>\n          \n          <div v-if=\"cartItems.length === 0\" class=\"empty-cart\">\n            <p>Tu pedido está vacío</p>\n            <p class=\"empty-cart-message\">Añade productos del menú para comenzar tu pedido</p>\n          </div>\n          \n          <div v-else class=\"cart-items\">\n            <div v-for=\"(item, index) in cartItems\" :key=\"index\" class=\"cart-item\">\n              <div class=\"cart-item-details\">\n                <h3>{{ item.name }}</h3>\n                <p>${{ formatPrice(item.price) }} x {{ item.quantity }}</p>\n              </div>\n              <div class=\"cart-item-actions\">\n                <button @click=\"decreaseQuantity(index)\" class=\"quantity-btn\">-</button>\n                <span class=\"quantity-display\">{{ item.quantity }}</span>\n                <button @click=\"increaseQuantity(index)\" class=\"quantity-btn\">+</button>\n                <button @click=\"removeFromCart(index)\" class=\"remove-btn\">\n                  <span class=\"btn-icon\">🗑️</span>\n                </button>\n              </div>\n            </div>\n            \n            <div class=\"cart-total\">\n              <h3>Total: ${{ formatPrice(cartTotal) }}</h3>\n              \n              <!-- Formulario de datos del cliente -->\n              <div class=\"customer-form\">\n                <h4>Datos del Cliente</h4>\n                <div class=\"form-row\">\n                  <input type=\"text\" v-model=\"customerInfo.name\" placeholder=\"Nombres completos\" class=\"form-input\">\n                </div>\n                <div class=\"form-row\">\n                  <input type=\"tel\" v-model=\"customerInfo.phone\" placeholder=\"Teléfono\" class=\"form-input\">\n                </div>\n                <div class=\"form-row\">\n                  <input type=\"email\" v-model=\"customerInfo.email\" placeholder=\"Correo electrónico\" class=\"form-input\">\n                </div>\n                <div class=\"form-row\">\n                  <input type=\"text\" v-model=\"customerInfo.address\" placeholder=\"Dirección de entrega\" class=\"form-input\">\n                </div>\n                \n                <!-- Lista horizontal de métodos de pago -->\n                <div class=\"payment-methods-selection\">\n                  <h4>Forma de Pago</h4>\n                  <div class=\"payment-options\">\n                    <label class=\"payment-option\">\n                      <input type=\"radio\" v-model=\"selectedPaymentMethod\" value=\"qr\" name=\"paymentMethod\">\n                      <span class=\"payment-option-text\">QR</span>\n                    </label>\n                    <label class=\"payment-option\">\n                      <input type=\"radio\" v-model=\"selectedPaymentMethod\" value=\"nequi\" name=\"paymentMethod\">\n                      <span class=\"payment-option-text\">Nequi</span>\n                    </label>\n                    <label class=\"payment-option\">\n                      <input type=\"radio\" v-model=\"selectedPaymentMethod\" value=\"cash\" name=\"paymentMethod\">\n                      <span class=\"payment-option-text\">Contra entrega</span>\n                    </label>\n                  </div>\n                </div>\n                \n                <!-- Campo de mensaje adicional -->\n                <div class=\"form-row\">\n                  <textarea v-model=\"additionalMessage\" placeholder=\"Mensaje o instrucciones adicionales\" class=\"form-textarea\"></textarea>\n                </div>\n              </div>\n              \n              <div class=\"order-actions\">\n                <button @click=\"completeOrder\" class=\"complete-order-btn\">\n                  <span class=\"btn-icon\">📱</span> Enviar por WhatsApp\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        <!-- Botón flotante para ver pedido (visible cuando hay items y se hace scroll) -->\n        <div v-if=\"cartItems.length > 0\" class=\"floating-cart-button\" @click=\"scrollToOrder\">\n          <span class=\"cart-items-count\">{{ totalItems }}</span>\n          <span>Ver Pedido</span>\n        </div>\n        \n        <!-- Nueva sección: Forma de Pago -->\n        <div v-if=\"hasPaymentInfo\" class=\"payment-section\">\n          <h2>Forma de Pago</h2>\n          <div class=\"payment-methods\">\n            <div v-if=\"menuData?.businessInfo?.paymentInfo?.qrImage\" class=\"payment-method\">\n              <h3>{{ menuData?.businessInfo?.paymentInfo?.qrTitle || 'Código QR de Pago' }}</h3>\n              <img \n                v-if=\"menuData?.businessInfo?.paymentInfo?.qrImage && isValidImage(menuData?.businessInfo?.paymentInfo?.qrImage)\" \n                :src=\"fixImageFormat(menuData?.businessInfo?.paymentInfo?.qrImage)\" \n                alt=\"QR de Pago\" \n                class=\"payment-image\"\n              >\n            </div>\n            \n            <div v-if=\"menuData?.businessInfo?.paymentInfo?.nequiNumber || menuData?.businessInfo?.paymentInfo?.nequiImage\" class=\"payment-method\">\n              <h3>Pago con Nequi</h3>\n              <img \n                v-if=\"menuData?.businessInfo?.paymentInfo?.nequiImage && isValidImage(menuData?.businessInfo?.paymentInfo?.nequiImage)\" \n                :src=\"fixImageFormat(menuData?.businessInfo?.paymentInfo?.nequiImage)\" \n                alt=\"Nequi\" \n                class=\"payment-image\"\n              >\n              <p v-if=\"menuData?.businessInfo?.paymentInfo?.nequiNumber\" class=\"payment-detail\">\n                <strong>Número:</strong> {{ menuData?.businessInfo?.paymentInfo?.nequiNumber }}\n              </p>\n            </div>\n            \n            <div v-if=\"menuData?.businessInfo?.paymentInfo?.bankInfo\" class=\"payment-method\">\n              <h3>Pago Bancario</h3>\n              <p class=\"payment-detail\">\n                <strong>Información Bancaria:</strong> {{ menuData?.businessInfo?.paymentInfo?.bankInfo }}\n              </p>\n            </div>\n            \n            <div v-if=\"menuData?.businessInfo?.paymentInfo?.otherPaymentMethods\" class=\"payment-method\">\n              <h3>Otras Formas de Pago</h3>\n              <p class=\"payment-detail\">\n                <strong>Métodos Adicionales:</strong> {{ menuData?.businessInfo?.paymentInfo?.otherPaymentMethods }}\n              </p>\n            </div>\n          </div>\n        </div>\n        \n        <!-- Comentado temporalmente hasta que el componente ReservaForm esté disponible\n        <div class=\"reserva-section container mt-5\">\n          <h3 class=\"text-center mb-4\">¿Quieres hacer una reserva?</h3>\n          <ReservaForm />\n        </div>\n        -->\n        \n        <!-- Sistema de notificaciones toast -->\n        <div v-if=\"toast.visible\" \n             class=\"toast-notification\" \n             :class=\"toast.type\">\n          {{ toast.message }}\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref, computed, onMounted } from 'vue';\nimport { useRoute } from 'vue-router';\n\nexport default {\n  name: 'SharedMenuView',\n  setup() {\n    const route = useRoute();\n    const isLoading = ref(true);\n    const error = ref(null);\n    const menuData = ref(null);\n    const cartItems = ref([]);\n    const customerInfo = ref({\n      name: '',\n      phone: '',\n      email: '',\n      address: ''\n    });\n    const selectedPaymentMethod = ref('cash'); // Por defecto contra entrega\n    const additionalMessage = ref('');\n    \n    // Obtener el ID del restaurante de la URL\n    const restauranteId = computed(() => {\n      // Usar el ID de la URL o un valor predeterminado\n      return route.params.id || '1';\n    });\n    \n    // Elementos del menú regulares y especiales\n    const regularItems = computed(() => {\n      if (!menuData.value || !menuData.value.items) return [];\n      return menuData.value.items.filter(item => !item.isSpecial);\n    });\n    \n    const specialItems = computed(() => {\n      if (!menuData.value || !menuData.value.items) return [];\n      return menuData.value.items.filter(item => item.isSpecial);\n    });\n    \n    // Total del carrito\n    const cartTotal = computed(() => {\n      return cartItems.value.reduce((total, item) => {\n        return total + (item.price * item.quantity);\n      }, 0);\n    });\n    \n    // Cargar el menú desde la API pública\n    const loadMenu = async () => {\n      try {\n        isLoading.value = true;\n        error.value = null;\n        \n        // Importar la configuración de la API\n        const apiConfig = await import('../config/apiConfig');\n        const API_URL = apiConfig.default.API_URL;\n        console.log('Usando API URL:', API_URL);\n        \n        // Obtener el ID del restaurante de la URL\n        const id = route.params.id;\n        console.log('ID del restaurante desde URL:', id);\n        \n        if (!id) {\n          error.value = 'ID de restaurante no válido';\n          isLoading.value = false;\n          return;\n        }\n        \n        try {\n          // Intentar cargar el menú con el ID proporcionado\n          const apiUrl = `${API_URL}/menu-publico/${id}`;\n          console.log('Intentando cargar menú desde:', apiUrl);\n          \n          const response = await fetch(apiUrl);\n          \n          if (!response.ok) {\n            console.error('Error en la respuesta:', response.status, response.statusText);\n            \n            // Si el ID específico no existe, intentar con ID 1 como fallback\n            console.log('Intentando cargar menú con ID de fallback: 1');\n            const fallbackResponse = await fetch(`${API_URL}/menu-publico/1`);\n            \n            if (!fallbackResponse.ok) {\n              // Si aún falla, crear datos de demostración localmente\n              console.log('Creando datos de demostración localmente');\n              \n              menuData.value = {\n                restaurante: {\n                  id: 'demo',\n                  nombre: 'Restaurante de Demostración',\n                  descripcion: 'Este es un restaurante de demostración para probar la aplicación',\n                  direccion: 'Calle Principal #123',\n                  telefono: '123-456-7890',\n                  logo: 'https://via.placeholder.com/150',\n                  horarios: 'Lunes a Domingo: 8:00 AM - 10:00 PM'\n                },\n                items: [\n                  {\n                    id: 'demo-1',\n                    name: 'Hamburguesa Clásica',\n                    description: 'Deliciosa hamburguesa con carne, queso, lechuga y tomate',\n                    price: 15000,\n                    image: 'https://via.placeholder.com/300',\n                    category: 'Hamburguesas',\n                    available: true,\n                    isSpecial: true\n                  },\n                  {\n                    id: 'demo-2',\n                    name: 'Pizza Margarita',\n                    description: 'Pizza tradicional con salsa de tomate, queso mozzarella y albahaca',\n                    price: 25000,\n                    image: 'https://via.placeholder.com/300',\n                    category: 'Pizzas',\n                    available: true,\n                    isSpecial: false\n                  },\n                  {\n                    id: 'demo-3',\n                    name: 'Ensalada César',\n                    description: 'Ensalada fresca con lechuga, pollo, crutones y aderezo césar',\n                    price: 12000,\n                    image: 'https://via.placeholder.com/300',\n                    category: 'Ensaladas',\n                    available: true,\n                    isSpecial: false\n                  }\n                ],\n                businessInfo: {\n                  name: 'Restaurante de Demostración',\n                  description: 'Este es un restaurante de demostración para probar la aplicación',\n                  contact: '123-456-7890',\n                  address: 'Calle Principal #123',\n                  logo: 'https://via.placeholder.com/150'\n                }\n              };\n              \n              isLoading.value = false;\n              return;\n            }\n            \n            const fallbackData = await fallbackResponse.json();\n            if (fallbackData.success) {\n              menuData.value = fallbackData.menu;\n              console.log('Menú cargado con ID de fallback:', menuData.value);\n              isLoading.value = false;\n              return;\n            } else {\n              throw new Error('Error al cargar el menú con ID de fallback');\n            }\n          }\n          \n          const data = await response.json();\n          \n          if (!data.success) {\n            throw new Error(data.message || 'Error al cargar el menú');\n          }\n          \n          menuData.value = data.menu;\n          console.log('Menú cargado correctamente:', menuData.value);\n        } catch (fetchError) {\n          console.error('Error al cargar el menú:', fetchError);\n          \n          // Como último recurso, crear datos de demostración localmente\n          console.log('Creando datos de demostración como último recurso');\n          \n          menuData.value = {\n            restaurante: {\n              id: 'demo',\n              nombre: 'Restaurante de Demostración',\n              descripcion: 'Este es un restaurante de demostración para probar la aplicación',\n              direccion: 'Calle Principal #123',\n              telefono: '123-456-7890',\n              logo: 'https://via.placeholder.com/150',\n              horarios: 'Lunes a Domingo: 8:00 AM - 10:00 PM'\n            },\n            items: [\n              {\n                id: 'demo-1',\n                name: 'Hamburguesa Clásica',\n                description: 'Deliciosa hamburguesa con carne, queso, lechuga y tomate',\n                price: 15000,\n                image: 'https://via.placeholder.com/300',\n                category: 'Hamburguesas',\n                available: true,\n                isSpecial: true\n              },\n              {\n                id: 'demo-2',\n                name: 'Pizza Margarita',\n                description: 'Pizza tradicional con salsa de tomate, queso mozzarella y albahaca',\n                price: 25000,\n                image: 'https://via.placeholder.com/300',\n                category: 'Pizzas',\n                available: true,\n                isSpecial: false\n              },\n              {\n                id: 'demo-3',\n                name: 'Ensalada César',\n                description: 'Ensalada fresca con lechuga, pollo, crutones y aderezo césar',\n                price: 12000,\n                image: 'https://via.placeholder.com/300',\n                category: 'Ensaladas',\n                available: true,\n                isSpecial: false\n              }\n            ],\n            businessInfo: {\n              name: 'Restaurante de Demostración',\n              description: 'Este es un restaurante de demostración para probar la aplicación',\n              contact: '123-456-7890',\n              address: 'Calle Principal #123',\n              logo: 'https://via.placeholder.com/150'\n            }\n          };\n        }\n        \n        isLoading.value = false;\n      } catch (err) {\n        console.error('Error general al cargar el menú:', err);\n        error.value = 'Error al cargar el menú. Por favor, intenta de nuevo.';\n        isLoading.value = false;\n      }\n    };\n    \n    // Verificar si hay información de pago\n    const hasPaymentInfo = computed(() => {\n      const paymentInfo = menuData.value?.businessInfo?.paymentInfo;\n      \n      if (!paymentInfo) return false;\n      \n      // Verificar si hay al menos un campo de información de pago con datos\n      return !!(\n        (paymentInfo.qrImage && isValidImage(paymentInfo.qrImage)) || \n        paymentInfo.qrTitle || \n        paymentInfo.nequiNumber || \n        (paymentInfo.nequiImage && isValidImage(paymentInfo.nequiImage)) || \n        paymentInfo.bankInfo || \n        paymentInfo.otherPaymentMethods\n      );\n    });\n    \n    // Contador total de items\n    const totalItems = computed(() => {\n      return cartItems.value.reduce((total, item) => total + item.quantity, 0);\n    });\n\n    // Formatear precio\n    function formatPrice(price) {\n      if (isNaN(Number(price))) return '0,00';\n      \n      // Convertir a número y formatear con 2 decimales fijos\n      const numero = Number(price).toFixed(2);\n      \n      // Separar parte entera y decimal\n      const [parteEntera, parteDecimal] = numero.split('.');\n      \n      // Formatear parte entera con puntos como separadores de miles\n      const parteEnteraFormateada = parteEntera.replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.');\n      \n      // Unir con coma como separador decimal\n      return `${parteEnteraFormateada},${parteDecimal}`;\n    }\n\n    // Agregar al carrito con verificación de disponibilidad\n    async function addToCart(item) {\n      // Verificación directa antes de hacer la comprobación completa\n      if (Number(item.availableQuantity) <= 0) {\n        showToast(`Lo sentimos, \"${item.name}\" no está disponible actualmente. Intente más tarde por favor.`, 'error');\n        return;\n      }\n      \n      const isAvailable = await checkAvailability(item);\n      if (!isAvailable) return;\n      \n      const existingItem = cartItems.value.find(i => {\n        // Asegurar que ambos items tienen ID y compararlos, o comparar por nombre si no hay ID\n        if (item.id && i.id) {\n          return i.id === item.id;\n        }\n        return i.name === item.name;\n      });\n      \n      if (existingItem) {\n        existingItem.quantity++;\n      } else {\n        cartItems.value.push({\n          id: item.id || Date.now().toString(),\n          name: item.name,\n          price: item.price,\n          quantity: 1,\n          availableQuantity: item.availableQuantity || 0 // Usar 0 como valor por defecto\n        });\n      }\n      \n      // Guardar carrito en localStorage\n      saveCartToLocalStorage();\n      \n      // Actualizar la disponibilidad en tiempo real\n      updateAvailabilityInMenu();\n      \n      // Mostrar notificación de éxito\n      showToast(`${item.name} añadido al carrito`, 'success');\n    }\n    \n    // Mostrar notificaciones toast\n    function showToast(message, type = 'success', duration = 5000) { // Aumentar a 5 segundos\n      console.log(`[Toast] Mostrando notificación: ${message} (${type})`);\n      \n      // Si ya hay un toast visible, limpiamos su timeout\n      if (toast.value.timeoutId) {\n        clearTimeout(toast.value.timeoutId);\n      }\n      \n      // Configurar el nuevo toast\n      toast.value.message = message;\n      toast.value.type = type;\n      toast.value.visible = true;\n      \n      // Debug: verificar que el estado del toast cambió\n      console.log(`[Toast] Estado: visible=${toast.value.visible}, message=${toast.value.message}`);\n      \n      // Configurar timeout para ocultar después de la duración\n      toast.value.timeoutId = setTimeout(() => {\n        console.log(`[Toast] Ocultando notificación después de ${duration}ms`);\n        toast.value.visible = false;\n      }, duration);\n    }\n\n    // Guardar carrito en localStorage\n    function saveCartToLocalStorage() {\n      try {\n        localStorage.setItem(`cart_${restauranteId.value}`, JSON.stringify(cartItems.value));\n      } catch (e) {\n        console.error(\"Error al guardar carrito en localStorage:\", e);\n      }\n    }\n\n    // Incrementar cantidad\n    function increaseQuantity(index) {\n      const item = cartItems.value[index];\n      \n      // Buscar el ítem en el menú\n      const menuItem = menuData.value.items?.find(i => i.id === item.id);\n      if (menuItem) {\n        // Verificar disponibilidad\n        const availableQuantity = menuItem.availableQuantity || 0;\n        if (item.quantity >= availableQuantity) {\n          showToast(`No hay más unidades disponibles de \"${item.name}\"`, 'warning');\n          return;\n        }\n      }\n      \n      // Incrementar cantidad\n      item.quantity++;\n      \n      // Guardar carrito y actualizar disponibilidad\n      saveCartToLocalStorage();\n      updateAvailabilityInMenu();\n    }\n\n    // Reemplazar la función decreaseQuantity (líneas 409-416)\n    function decreaseQuantity(index) {\n      if (cartItems.value[index].quantity > 1) {\n        cartItems.value[index].quantity--;\n        saveCartToLocalStorage();\n        updateAvailabilityInMenu(); // Actualizar disponibilidad\n      } else {\n        removeFromCart(index);\n      }\n    }\n\n    // Reemplazar la función removeFromCart (líneas 419-422)\n    function removeFromCart(index) {\n      cartItems.value.splice(index, 1);\n      saveCartToLocalStorage();\n      updateAvailabilityInMenu(); // Actualizar disponibilidad\n    }\n    \n    // Completar pedido con actualización de inventario\n    async function completeOrder() {\n      try {\n        // Validaciones básicas\n        if (cartItems.value.length === 0) {\n          showToast('No hay ítems en el pedido', 'error');\n          return;\n        }\n        \n        if (!customerInfo.value.name || !customerInfo.value.phone) {\n          showToast('Por favor complete su nombre y teléfono', 'error');\n          return;\n        }\n      \n        // Indicar que está procesando\n        isProcessingOrder.value = true;\n        \n        // Actualizar inventario - Usar el carrito correcto\n        await updateInventory();\n        \n        // Compartir en WhatsApp\n        openWhatsAppShare();\n        \n        showToast('¡Pedido completado! Gracias por tu compra.', 'success');\n        \n        // Limpiar carrito y datos del cliente después de completar\n        setTimeout(() => {\n          // Limpiar carrito\n          cartItems.value = [];\n          \n          // Limpiar localStorage\n          localStorage.removeItem(`cart_${restauranteId.value}`);\n          \n          // Limpiar datos del cliente\n          customerInfo.value = {\n            name: '',\n            phone: '',\n            email: '',\n            address: ''\n          };\n          additionalMessage.value = '';\n          isProcessingOrder.value = false;\n        }, 2000);\n      } catch (error) {\n        console.error('Error al completar el pedido:', error);\n        showToast('Error al procesar el pedido', 'error');\n        isProcessingOrder.value = false;\n      }\n    }\n    \n    // Compartir pedido por WhatsApp sin actualizar inventario\nfunction shareOrderByWhatsApp() {\n  // Validaciones básicas\n  if (cartItems.value.length === 0) {\n    showToast('No hay ítems en el pedido', 'error');\n    return;\n  }\n\n  if (!customerInfo.value.name || !customerInfo.value.phone) {\n    showToast('Por favor complete su nombre y teléfono', 'error');\n    return;\n  }\n\n  // Compartir directamente en WhatsApp sin actualizar inventario\n  openWhatsAppShare();\n\n  showToast('Pedido compartido por WhatsApp', 'success');\n}\n\nfunction openWhatsAppShare() {\n  // Construir mensaje de pedido para WhatsApp\n  let whatsappMessage = `🛒 *Pedido de ${customerInfo.value.name}*\\n\\n`;\n  whatsappMessage += `📦 *Productos:*\\n`;\n\n  cartItems.value.forEach(item => {\n    const subtotal = (item.price * item.quantity).toFixed(2);\n    whatsappMessage += `🍽️ ${item.quantity}x ${item.name} = $${formatPrice(subtotal)}\\n`;\n  });\n\n  whatsappMessage += `\\n💵 *Total:* $${formatPrice(cartTotal.value)}\\n`;\n\n  if (customerInfo.value.phone) {\n    whatsappMessage += `📞 *Teléfono:* ${customerInfo.value.phone}\\n`;\n  }\n\n  if (customerInfo.value.email) {\n    whatsappMessage += `✉️ *Email:* ${customerInfo.value.email}\\n`;\n  }\n\n  if (customerInfo.value.address) {\n    whatsappMessage += `📍 *Dirección:* ${customerInfo.value.address}\\n`;\n  }\n\n  if (additionalMessage.value) {\n    whatsappMessage += `📝 *Notas adicionales:*\\n${additionalMessage.value}\\n`;\n  }\n\n  // Añadir método de pago seleccionado\n  const formaPago = selectedPaymentMethod.value === 'qr' ? 'Código QR' :\n                    selectedPaymentMethod.value === 'nequi' ? 'Nequi' :\n                    'Contra entrega';\n\n  whatsappMessage += `\\n💳 *Forma de pago:* ${formaPago}`;\n\n  // Codificar y generar la URL de WhatsApp\n  const encodedMessage = encodeURIComponent(whatsappMessage);\n  const whatsappUrl = `https://api.whatsapp.com/send?text=${encodedMessage}`;\n\n  // Abrir WhatsApp en una nueva ventana\n  window.open(whatsappUrl, '_blank');\n}\n\n    // Desplazarse a la sección del pedido\n    function scrollToOrder() {\n      const orderSection = document.querySelector('.order-section');\n      if (orderSection) {\n        orderSection.scrollIntoView({ behavior: 'smooth' });\n      }\n    }\n\n    // Verificar disponibilidad de inventario\n    async function checkAvailability(item) {\n      // Obtener la disponibilidad base (valor original del inventario)\n      // Importante: asegurarse que sea un número\n      const baseAvailability = Number(item.availableQuantity) || 0;\n      \n      // Verificación directa: si no hay stock, mostrar mensaje de error\n      if (baseAvailability <= 0) {\n        showToast(`Lo sentimos, \"${item.name}\" no está disponible actualmente. Intente más tarde por favor.`, 'error');\n        return false;\n      }\n      \n      // Obtener la cantidad actual en el carrito\n      const cartItem = cartItems.value.find(i => i.id === item.id);\n      const cartQuantity = cartItem ? cartItem.quantity : 0;\n      \n      // Calcular disponibilidad real\n      const realAvailability = baseAvailability - cartQuantity;\n      \n      // Verificar la disponibilidad considerando lo que ya está en el carrito\n      if (realAvailability <= 0) {\n        showToast(`No hay más unidades disponibles de \"${item.name}\"`, 'warning');\n        return false;\n      } else if (realAvailability <= 5) {\n        showToast(`¡Solo quedan ${realAvailability} unidades de \"${item.name}\"!`, 'warning');\n      }\n      \n      return true;\n    }\n\n    // Actualizar inventario al completar pedido\n    async function updateInventory() {\n      try {\n        // Validaciones iniciales\n        if (!cartItems.value || cartItems.value.length === 0) {\n          console.warn('Intentando actualizar inventario con carrito vacío');\n          return;\n        }\n        \n        console.log(`Iniciando actualización de inventario para ${cartItems.value.length} productos...`);\n        \n        // Obtener los elementos actuales del menú para actualizar cantidades\n        const currentMenu = await getMenuItems();\n        if (!currentMenu || !Array.isArray(currentMenu)) {\n          console.error('No se pudo obtener el menú actual');\n          return false;\n        }\n        \n        // Crear una copia profunda del carrito para procesar (evitar modificaciones durante el procesamiento)\n        const itemsToProcess = JSON.parse(JSON.stringify(cartItems.value));\n        const updateResults = [];\n        let hasErrors = false;\n        \n        // Importar función para guardar elementos vendidos\n        const { getSoldItems, saveSoldItems } = await import('../services/storageService');\n        \n        // Obtener la lista actual de elementos vendidos\n        let soldItemsList = [];\n        try {\n          soldItemsList = await getSoldItems() || [];\n          if (!Array.isArray(soldItemsList)) {\n            soldItemsList = [];\n          }\n          console.log('Lista de elementos vendidos obtenida:', soldItemsList.length);\n        } catch (soldItemsError) {\n          console.warn('Error al obtener elementos vendidos:', soldItemsError);\n          soldItemsList = [];\n        }\n        \n        // Procesar cada elemento del carrito de forma secuencial para evitar condiciones de carrera\n        for (let i = 0; i < itemsToProcess.length; i++) {\n          const cartItem = itemsToProcess[i];\n          console.log(`Procesando item ${i+1}/${itemsToProcess.length}: ${cartItem.name} (ID: ${cartItem.id})`);\n          \n          try {\n            // Buscar el ítem correspondiente en el menú actual\n            const menuItem = currentMenu.find(item => item.id === cartItem.id);\n            \n            if (!menuItem) {\n              console.warn(`Elemento no encontrado en el menú: ${cartItem.name} (ID: ${cartItem.id})`);\n              updateResults.push({\n                name: cartItem.name,\n                success: false,\n                error: 'Elemento no encontrado en el menú'\n              });\n              continue;\n            }\n            \n            // Garantizar que estamos trabajando con números enteros válidos\n            const currentQuantity = parseInt(Number(menuItem.availableQuantity || 0), 10);\n            const soldQuantity = parseInt(Number(cartItem.quantity || 0), 10);\n            \n            if (isNaN(currentQuantity) || isNaN(soldQuantity)) {\n              const error = `Cantidades inválidas para ${cartItem.name}: disponible=${menuItem.availableQuantity}, vendido=${cartItem.quantity}`;\n              console.error(error);\n              updateResults.push({\n                name: cartItem.name,\n                success: false,\n                error: error\n              });\n              hasErrors = true;\n              continue;\n            }\n            \n            // Calcular nueva cantidad exacta como entero\n            const newQuantity = Math.max(0, currentQuantity - soldQuantity);\n            \n            console.log(`Actualizando ${cartItem.name}: ${currentQuantity} - ${soldQuantity} = ${newQuantity} (currentQuantity tipo: ${typeof currentQuantity}, soldQuantity tipo: ${typeof soldQuantity})`);\n            \n            // Actualizar disponibilidad usando la función mejorada - forzar como número entero\n            const updateSuccess = await updateItemAvailability(menuItem.id, newQuantity);\n            \n            // Registrar resultado detallado\n            updateResults.push({\n              name: cartItem.name,\n              oldQuantity: currentQuantity,\n              soldQuantity: soldQuantity,\n              newQuantity: newQuantity,\n              success: updateSuccess,\n              error: updateSuccess ? null : 'Error al actualizar disponibilidad'\n            });\n            \n            if (!updateSuccess) {\n              hasErrors = true;\n            } else {\n              // Registrar en la lista de platos vendidos si la actualización fue exitosa\n              const currentDate = new Date().toISOString();\n              const existingSoldItem = soldItemsList.find(item => item.name === cartItem.name);\n              \n              if (existingSoldItem) {\n                existingSoldItem.quantity += soldQuantity;\n                existingSoldItem.date = currentDate;\n              } else {\n                soldItemsList.push({\n                  name: cartItem.name,\n                  quantity: soldQuantity,\n                  price: cartItem.price,\n                  includesDrink: menuItem.includesDrink || false,\n                  date: currentDate\n                });\n              }\n              console.log(`Elemento registrado en lista de vendidos: ${cartItem.name} x${soldQuantity}`);\n            }\n          } catch (itemError) {\n            console.error(`Error procesando ${cartItem.name}:`, itemError);\n            updateResults.push({\n              name: cartItem.name,\n              success: false,\n              error: itemError.message || 'Error desconocido'\n            });\n            hasErrors = true;\n          }\n        }\n        \n        // Guardar la lista actualizada de elementos vendidos\n        try {\n          await saveSoldItems(soldItemsList);\n          console.log(`Lista de elementos vendidos actualizada con ${soldItemsList.length} elementos`);\n        } catch (saveError) {\n          console.error('Error al guardar elementos vendidos:', saveError);\n        }\n        \n        // Mostrar resumen de la operación\n        const successCount = updateResults.filter(r => r.success).length;\n        console.log(`Actualización de inventario completada. Éxitos: ${successCount}/${itemsToProcess.length}`);\n        \n        // Registrar detalles completos de la actualización\n        console.log('Detalles de actualización de inventario:', updateResults);\n        \n        if (hasErrors) {\n          const failedItems = updateResults.filter(r => !r.success).map(r => r.name).join(', ');\n          console.warn(`Algunos productos no se pudieron actualizar: ${failedItems}`);\n        }\n        \n        return successCount > 0;\n      } catch (error) {\n        console.error('Error general al actualizar inventario:', error);\n        return false;\n      }\n    }\n\n    // Añadir después de la función checkAvailability (línea 585)\n    // Función para actualizar la disponibilidad en tiempo real\n    function updateAvailabilityInMenu() {\n      if (!menuData.value?.items) return;\n      \n      // Actualizar la disponibilidad de todos los ítems\n      menuData.value.items.forEach(menuItem => {\n        // Encontrar si este ítem está en el carrito\n        const cartItem = cartItems.value.find(i => i.id === menuItem.id);\n        const cartQuantity = cartItem ? cartItem.quantity : 0;\n        \n        // Asegurarse de que availableQuantity sea un número exacto, no undefined o null\n        const baseAvailability = Number(menuItem.availableQuantity) || 0;\n        \n        // Calcular disponibilidad real\n        menuItem.realAvailability = baseAvailability - cartQuantity;\n        \n        console.log(`Disponibilidad actualizada para ${menuItem.name}: ${menuItem.realAvailability} unidades (base: ${baseAvailability}, carrito: ${cartQuantity})`);\n      });\n    }\n\n    // Verificar si una cadena de imagen es válida\n    function isValidImage(imageString) {\n      if (!imageString) return false;\n      \n      // Verificar si es una URL\n      if (imageString.startsWith('http://') || imageString.startsWith('https://')) {\n        return true;\n      }\n      \n      // Verificar si es una imagen en base64\n      if (imageString.startsWith('data:image/')) {\n        return true;\n      }\n      \n      return false;\n    }\n    \n    // Corregir formato de imagen si es necesario\n    function fixImageFormat(imageString) {\n      if (!imageString) return '';\n      \n      // Si ya es una URL o base64 válido, devolverlo tal cual\n      if (isValidImage(imageString)) {\n        return imageString;\n      }\n      \n      // Intentar convertir a base64 si no tiene el prefijo correcto\n      if (imageString.includes('/9j/') && !imageString.startsWith('data:image/')) {\n        return `data:image/jpeg;base64,${imageString}`;\n      }\n      \n      // Si no se puede arreglar, devolver una imagen por defecto\n      return '';\n    }\n\n    // Estado para el formulario de reserva\n    const showReservationForm = ref(false);\n    const isProcessingReservation = ref(false);\n    const reservationSuccess = ref(false);\n    const reservationError = ref(null);\n    \n    const reservationData = ref({\n      fullName: '',\n      mobilePhone: '',\n      landlinePhone: '',\n      address: '',\n      email: '',\n      orderDate: getCurrentDate(), // Set the initial value here\n      reservationDate: '',\n      reservationTime: '',\n      peopleCount: 1,\n      additionalNotes: ''\n    });\n    \n    // Función para obtener la fecha actual en formato YYYY-MM-DD\n    function getCurrentDate() {\n      const today = new Date();\n      const year = today.getFullYear();\n      const month = String(today.getMonth() + 1).padStart(2, '0');\n      const day = String(today.getDate()).padStart(2, '0');\n      return `${year}-${month}-${day}`;\n    }\n    \n    // Función para enviar la reserva\n    async function submitReservation() {\n      isProcessingReservation.value = true;\n      reservationSuccess.value = false;\n      reservationError.value = null;\n      \n      try {\n        // Utilizamos el servicio de reservas para guardar los datos\n        const result = await saveReservation(reservationData.value);\n        \n        if (result.success) {\n          // Reserva guardada correctamente\n          reservationSuccess.value = true;\n          showToast('¡Reserva enviada con éxito! Recibirá un correo de confirmación en breve.', 'success');\n          \n          // Enviar correo de confirmación (simulado)\n          console.log('Enviando correo de confirmación a:', reservationData.value.email);\n          \n          // Limpiar el formulario y ocultarlo después de un tiempo\n          setTimeout(() => {\n            resetReservationForm();\n            showReservationForm.value = false;\n          }, 3000);\n        } else {\n          // Error al guardar la reserva\n          throw new Error(result.error || 'Error al procesar la reserva');\n        }\n      } catch (error) {\n        console.error('Error al enviar la reserva:', error);\n        reservationError.value = 'Ocurrió un error al procesar su reserva. Por favor, intente nuevamente.';\n        showToast('Error al procesar la reserva. Por favor, intente nuevamente.', 'error');\n      } finally {\n        isProcessingReservation.value = false;\n      }\n    }\n    \n    // Función para cancelar la reserva\n    function cancelReservation() {\n      resetReservationForm();\n      showReservationForm.value = false;\n    }\n    \n    // Función para reiniciar el formulario\n    function resetReservationForm() {\n      reservationData.value.fullName = '';\n      reservationData.value.mobilePhone = '';\n      reservationData.value.landlinePhone = '';\n      reservationData.value.address = '';\n      reservationData.value.email = '';\n      reservationData.value.orderDate = getCurrentDate();\n      reservationData.value.reservationDate = '';\n      reservationData.value.reservationTime = '';\n      reservationData.value.peopleCount = 1;\n      reservationData.value.additionalNotes = '';\n      reservationSuccess.value = false;\n      reservationError.value = null;\n    }\n\n    // Refrescar información del negocio manualmente\n    async function refreshBusinessInfo() {\n      try {\n        const businessInfo = await fetchBusinessInfoFromBackend(true);\n        if (businessInfo) {\n          menuData.value.businessInfo = businessInfo;\n          lastBusinessInfoUpdate.value = Date.now();\n          showToast('Información del negocio actualizada', 'success');\n        }\n      } catch (error) {\n        console.error('Error al refrescar información del negocio:', error);\n        showToast('Error al actualizar información del negocio', 'error');\n      }\n    }\n\n    // Estado para el toast\n    const toast = ref({\n      visible: false,\n      message: '',\n      type: 'success', // 'success', 'warning', 'error'\n      timeoutId: null\n    });\n\n    // Estado para la última actualización de la información del negocio\n    const lastBusinessInfoUpdate = ref(null);\n\n    onMounted(() => {\n      loadMenu();\n    });\n\n    return {\n      restauranteId,\n      isLoading,\n      error,\n      menuData,\n      regularItems,\n      specialItems,\n      cartItems,\n      cartTotal,\n      totalItems,\n      customerInfo,\n      selectedPaymentMethod,\n      additionalMessage,\n      addToCart,\n      removeFromCart,\n      increaseQuantity,\n      decreaseQuantity,\n      formatPrice,\n      completeOrder,\n      shareOrderByWhatsApp,\n      scrollToOrder,\n      isValidImage,\n      fixImageFormat,\n      hasPaymentInfo,\n      // Reservas\n      showReservationForm,\n      reservationData,\n      isProcessingReservation,\n      reservationSuccess,\n      reservationError,\n      submitReservation,\n      cancelReservation,\n      getCurrentDate,\n      // Añadir el objeto toast para que esté disponible en la plantilla\n      toast,\n      // Función para refrescar información del negocio\n      refreshBusinessInfo,\n      // Última actualización de la información del negocio\n      lastBusinessInfoUpdate\n    };\n  }\n};\n</script>\n\n<style scoped>\n.shared-menu-container {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 20px;\n  font-family: 'Arial', sans-serif;\n}\n\n.loading, .error {\n  text-align: center;\n  padding: 50px;\n  font-size: 18px;\n}\n\n.error {\n  color: #d9534f;\n}\n\n.business-info {\n  text-align: center;\n  margin-bottom: 40px;\n  padding: 20px;\n  background-color: #f8f9fa;\n  border-radius: 8px;\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n}\n\n.business-logo {\n  max-width: 100%;\n  max-height: 150px;\n  object-fit: contain;\n  margin-bottom: 15px;\n}\n\n.business-info h1 {\n  color: #343a40;\n  margin-bottom: 10px;\n}\n\n.description {\n  font-style: italic;\n  color: #6c757d;\n  margin-bottom: 15px;\n}\n\n.contact-info {\n  font-size: 14px;\n  color: #495057;\n}\n\n.menu-list {\n  margin-bottom: 40px;\n}\n\n.menu-list h2 {\n  color: #28a745;\n  font-size: 24px;\n  text-align: center;\n  margin-bottom: 20px;\n  padding-bottom: 10px;\n  border-bottom: 2px solid #28a745;\n}\n\n.menu-items {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n  gap: 20px;\n}\n\n.menu-item {\n  background-color: white;\n  border-radius: 8px;\n  overflow: hidden;\n  box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\n}\n\n.menu-item:hover {\n  transform: translateY(-5px);\n  box-shadow: 0 5px 15px rgba(0,0,0,0.2);\n}\n\n.item-image-container {\n  width: 100%;\n  height: 200px;\n  overflow: hidden;\n}\n\n.item-image {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n}\n\n.no-image {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: #f8f9fa;\n  color: #6c757d;\n  font-style: italic;\n}\n\n.item-details {\n  padding: 15px;\n}\n\n.item-details h3 {\n  margin-top: 0;\n  color: #343a40;\n  font-size: 18px;\n  margin-bottom: 10px;\n}\n\n.item-description {\n  color: #6c757d;\n  font-size: 14px;\n  margin-bottom: 10px;\n}\n\n.item-price {\n  font-size: 16px;\n  font-weight: bold;\n  color: #28a745;\n  margin-bottom: 10px;\n}\n\n.includes-drink {\n  font-size: 14px;\n  color: #6c757d;\n  font-style: italic;\n  margin-bottom: 10px;\n}\n\n.add-to-cart-btn {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  padding: 10px 15px;\n  background-color: #28a745;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: all 0.3s;\n  font-weight: bold;\n}\n\n.add-to-cart-btn:hover {\n  background-color: #218838;\n  transform: translateY(-2px);\n}\n\n.quantity-display {\n  min-width: 30px;\n  text-align: center;\n  font-weight: bold;\n}\n\n/* Estilos para acciones de pedido */\n.order-actions {\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  margin-top: 15px;\n  gap: 10px;\n}\n\n.complete-order-btn,\n.whatsapp-order-btn {\n  border: none;\n  padding: 12px 20px;\n  border-radius: 4px;\n  font-weight: bold;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  gap: 8px;\n  height: 48px;\n  font-size: 17px;\n  width: 100%;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.2);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  letter-spacing: 0.5px;\n  text-shadow: 0 1px 2px rgba(0,0,0,0.3);\n}\n\n.complete-order-btn {\n  background-color: #218838;\n  color: white;\n  margin: 0;\n  border: 2px solid #1e7e34;\n}\n\n.complete-order-btn:hover {\n  background-color: #1e7e34;\n  transform: translateY(-2px);\n  box-shadow: 0 4px 8px rgba(0,0,0,0.2);\n}\n\n.whatsapp-order-btn {\n  height: 48px;\n  font-size: 17px;\n  width: 100%;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.2);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  letter-spacing: 0.5px;\n  text-shadow: 0 1px 2px rgba(0,0,0,0.3);\n}\n\n.complete-order-btn {\n  background-color: #218838;\n  color: white;\n  margin: 0;\n  border: 2px solid #1e7e34;\n}\n\n.complete-order-btn:hover {\n  background-color: #1e7e34;\n  transform: translateY(-2px);\n  box-shadow: 0 4px 8px rgba(0,0,0,0.2);\n}\n\n.whatsapp-order-btn {\n  background-color: #128C7E;\n  color: white;\n  margin: 0;\n  border: 2px solid #075E54;\n}\n\n.whatsapp-order-btn:hover {\n  background-color: #075E54;\n  transform: translateY(-2px);\n  box-shadow: 0 4px 8px rgba(0,0,0,0.2);\n}\n\n.btn-icon {\n  font-size: 18px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-right: 8px;\n}\n\n/* Estilos para la sección de \"Tu Pedido\" */\n.order-section {\n  margin: 30px auto;\n  padding: 20px;\n  background-color: #f8f9fa;\n  border-radius: 8px;\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n  max-width: 800px;\n  border: 2px solid #28a745;\n  position: relative;\n}\n\n.order-section::before {\n  content: '';\n  position: absolute;\n  top: -10px;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 0;\n  height: 0;\n  border-left: 10px solid transparent;\n  border-right: 10px solid transparent;\n  border-bottom: 10px solid #28a745;\n}\n\n.order-section h2 {\n  color: #343a40;\n  font-size: 24px;\n  text-align: center;\n  margin-bottom: 20px;\n  padding-bottom: 10px;\n  border-bottom: 2px solid #28a745;\n}\n\n.cart-items {\n  margin-bottom: 20px;\n}\n\n.cart-item {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 15px;\n  border-bottom: 1px solid #dee2e6;\n  animation: fadeIn 0.3s ease;\n}\n\n@keyframes fadeIn {\n  from { opacity: 0; transform: translateY(-10px); }\n  to { opacity: 1; transform: translateY(0); }\n}\n\n.cart-item:last-child {\n  border-bottom: none;\n}\n\n.cart-item-details h3 {\n  margin: 0 0 5px 0;\n  font-size: 16px;\n}\n\n.cart-item-actions {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n\n.quantity-btn {\n  width: 30px;\n  height: 30px;\n  border-radius: 50%;\n  background-color: #f8f9fa;\n  border: 1px solid #28a745;\n  color: #28a745;\n  font-weight: bold;\n  cursor: pointer;\n  transition: all 0.2s;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.quantity-btn:hover {\n  background-color: #28a745;\n  color: white;\n}\n\n.remove-btn {\n  padding: 5px 10px;\n  background-color: #dc3545;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\n.remove-btn:hover {\n  background-color: #c82333;\n}\n\n.cart-total {\n  text-align: right;\n  padding-top: 15px;\n  border-top: 2px solid #28a745;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-end;\n  gap: 10px;\n}\n\n.cart-total h3 {\n  color: #343a40;\n  margin: 0;\n}\n\n/* Estilos para el formulario de datos del cliente */\n.customer-form {\n  width: 100%;\n  margin-top: 20px;\n  padding: 15px;\n  background-color: #f9f9f9;\n  border-radius: 8px;\n  border: 1px solid #dee2e6;\n}\n\n.customer-form h4 {\n  color: #343a40;\n  margin-top: 0;\n  margin-bottom: 15px;\n  text-align: center;\n  font-size: 16px;\n  border-bottom: 1px solid #e9ecef;\n  padding-bottom: 8px;\n}\n\n.form-row {\n  margin-bottom: 12px;\n}\n\n.form-input, .form-textarea {\n  width: 100%;\n  padding: 10px;\n  border: 1px solid #ced4da;\n  border-radius: 4px;\n  font-size: 14px;\n  transition: border-color 0.3s;\n}\n\n.form-input:focus, .form-textarea:focus {\n  border-color: #28a745;\n  outline: none;\n}\n\n.form-textarea {\n  min-height: 80px;\n  resize: vertical;\n}\n\n/* Estilos para las opciones de pago */\n.payment-methods-selection {\n  width: 100%;\n  margin: 15px 0;\n}\n\n.payment-methods-selection h4 {\n  color: #343a40;\n  margin-top: 10px;\n  margin-bottom: 15px;\n  text-align: center;\n  font-size: 16px;\n  border-bottom: 1px solid #e9ecef;\n  padding-bottom: 8px;\n}\n\n.payment-options {\n  display: flex;\n  justify-content: space-between;\n  flex-wrap: wrap;\n  gap: 10px;\n}\n\n.payment-option {\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n  padding: 8px 15px;\n  background-color: #f0f0f0;\n  border-radius: 4px;\n  transition: all 0.2s;\n  flex: 1;\n  min-width: 100px;\n  justify-content: center;\n  border: 2px solid transparent;\n}\n\n.payment-option:hover {\n  background-color: #e9ecef;\n  transform: translateY(-2px);\n  box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n}\n\n.payment-option input[type=\"radio\"] {\n  margin-right: 8px;\n  accent-color: #28a745;\n}\n\n.payment-option input[type=\"radio\"]:checked + .payment-option-text {\n  font-weight: bold;\n  color: #28a745;\n}\n\n.payment-option-text {\n  font-size: 14px;\n  font-weight: 500;\n}\n\n/* Estilo para opción seleccionada */\n.payment-option input[type=\"radio\"]:checked ~ .payment-option {\n  border-color: #28a745;\n  background-color: rgba(40, 167, 69, 0.1);\n}\n\n/* Botón flotante para ver pedido */\n.floating-cart-button {\n  position: fixed;\n  bottom: 20px;\n  right: 20px;\n  background-color: #28a745;\n  color: white;\n  border-radius: 50px;\n  padding: 10px 20px;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  box-shadow: 0 4px 12px rgba(0,0,0,0.2);\n  cursor: pointer;\n  transition: all 0.3s;\n  z-index: 98; /* Mantener por debajo del toast (9999) */\n  font-weight: bold;\n}\n\n/* Sistema de notificaciones toast */\n.toast-notification {\n  position: fixed;\n  bottom: 20px;\n  right: 20px;\n  padding: 15px 25px;\n  border-radius: 4px;\n  color: white;\n  z-index: 1000;\n  box-shadow: 0 4px 12px rgba(0,0,0,0.15);\n  animation: slideIn 0.3s ease-out forwards;\n}\n\n@keyframes slideIn {\n  from {\n    transform: translateY(100%);\n    opacity: 0;\n  }\n  to {\n    transform: translateY(0);\n    opacity: 1;\n  }\n}\n\n.toast-notification.success {\n  background-color: #28a745;\n}\n\n.toast-notification.error {\n  background-color: #dc3545;\n}\n\n.toast-notification.info {\n  background-color: #17a2b8;\n}\n\n.toast-notification.warning {\n  background-color: #ffc107;\n  color: #212529;\n}\n\n/* Estilos para la sección de formas de pago */\n.payment-section {\n  margin: 30px 0;\n  padding: 20px;\n  background-color: #f8f9fa;\n  border-radius: 8px;\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n}\n\n.payment-section h2 {\n  color: #343a40;\n  font-size: 24px;\n  text-align: center;\n  margin-bottom: 20px;\n  padding-bottom: 10px;\n  border-bottom: 2px solid #28a745;\n}\n\n.payment-methods {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n  justify-content: center;\n}\n\n.payment-method {\n  flex: 1;\n  min-width: 200px;\n  max-width: 300px;\n  padding: 15px;\n  background-color: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n  text-align: center;\n}\n\n.payment-method h3 {\n  margin-top: 0;\n  color: #343a40;\n  font-size: 18px;\n  margin-bottom: 10px;\n}\n\n.payment-image {\n  max-width: 100%;\n  max-height: 200px;\n  object-fit: contain;\n  margin: 0 auto;\n  display: block;\n}\n\n/* Específicamente reducir el tamaño de la imagen de Nequi */\n.payment-method img[alt=\"Nequi\"] {\n  max-height: 150px;\n  width: auto;\n}\n\n.payment-detail {\n  margin-top: 10px;\n  font-size: 14px;\n  color: #6c757d;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}