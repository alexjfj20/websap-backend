{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\n// adminDashboardService.js - Servicio para gestionar datos del dashboard de administración\nimport axios from 'axios';\n\n// URL base para las llamadas a la API\nconst API_URL = process.env.VUE_APP_API_URL || 'http://localhost:3000/api/admin';\n\n// Función para abrir la base de datos IndexedDB\nconst openDatabase = () => {\n  return new Promise((resolve, reject) => {\n    const request = window.indexedDB.open(\"adminDashboardDB\", 1);\n    request.onerror = event => {\n      console.error(\"Error al abrir IndexedDB:\", event);\n      reject(new Error(\"No se pudo abrir la base de datos IndexedDB\"));\n    };\n    request.onsuccess = event => {\n      const db = event.target.result;\n      resolve(db);\n    };\n    request.onupgradeneeded = event => {\n      const db = event.target.result;\n\n      // Crear almacenes de objetos si no existen\n      if (!db.objectStoreNames.contains(\"dashboard\")) {\n        db.createObjectStore(\"dashboard\", {\n          keyPath: \"id\"\n        });\n      }\n      if (!db.objectStoreNames.contains(\"roles\")) {\n        db.createObjectStore(\"roles\", {\n          keyPath: \"id\"\n        });\n      }\n      if (!db.objectStoreNames.contains(\"usuarios\")) {\n        db.createObjectStore(\"usuarios\", {\n          keyPath: \"id\"\n        });\n      }\n    };\n  });\n};\n\n// Función para guardar datos en IndexedDB\nconst saveToIndexedDB = async (storeName, data, id = \"last\") => {\n  try {\n    const db = await openDatabase();\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([storeName], \"readwrite\");\n      const store = transaction.objectStore(storeName);\n      const request = store.put({\n        id,\n        data,\n        timestamp: new Date().getTime()\n      });\n      request.onsuccess = () => {\n        resolve(true);\n      };\n      request.onerror = event => {\n        console.error(`Error al guardar en ${storeName}:`, event);\n        reject(new Error(`Error al guardar en IndexedDB: ${event.target.error}`));\n      };\n    });\n  } catch (error) {\n    console.error(\"Error al guardar en IndexedDB:\", error);\n    return false;\n  }\n};\n\n// Función para obtener datos de IndexedDB\nconst getFromIndexedDB = async (storeName, id = \"last\") => {\n  try {\n    const db = await openDatabase();\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([storeName], \"readonly\");\n      const store = transaction.objectStore(storeName);\n      const request = store.get(id);\n      request.onsuccess = event => {\n        const result = event.target.result;\n        if (result) {\n          // Verificar si los datos tienen menos de 24 horas\n          const now = new Date().getTime();\n          const dataAge = now - result.timestamp;\n          const oneDay = 24 * 60 * 60 * 1000;\n          if (dataAge < oneDay) {\n            resolve(result.data);\n          } else {\n            // Datos demasiado antiguos\n            resolve(null);\n          }\n        } else {\n          resolve(null);\n        }\n      };\n      request.onerror = event => {\n        console.error(`Error al leer de ${storeName}:`, event);\n        reject(new Error(`Error al leer de IndexedDB: ${event.target.error}`));\n      };\n    });\n  } catch (error) {\n    console.error(\"Error al leer de IndexedDB:\", error);\n    return null;\n  }\n};\n\n/**\r\n * Obtiene los datos del dashboard de administración\r\n */\nexport const obtenerDatosDashboard = async () => {\n  try {\n    // 1. Intentar obtener datos de la API externa\n    const response = await axios.get(`${API_URL}/dashboard`);\n\n    // Si tenemos éxito, guardar en IndexedDB para uso futuro\n    if (response.data && response.data.success) {\n      await saveToIndexedDB(\"dashboard\", response.data);\n    }\n    return response.data;\n  } catch (error) {\n    console.error('Error al obtener datos del dashboard de API:', error);\n    try {\n      // 2. Si la API falla, buscar datos en IndexedDB\n      console.log('Buscando datos en IndexedDB...');\n      const indexedDBData = await getFromIndexedDB(\"dashboard\");\n      if (indexedDBData) {\n        console.log('Usando datos de dashboard desde IndexedDB');\n        return indexedDBData;\n      }\n    } catch (dbError) {\n      console.error('Error al obtener datos de IndexedDB:', dbError);\n    }\n\n    // 3. Si no hay datos en IndexedDB, usar datos dummy\n    console.log('Usando datos dummy para el dashboard');\n    const datosDummyDashboard = {\n      success: true,\n      data: {\n        estadisticas: {\n          totalUsuarios: 15,\n          totalRestaurantes: 4,\n          totalPedidos: 120,\n          totalVentas: 3850\n        },\n        graficoVentas: [{\n          mes: 'Ene',\n          ventas: 300\n        }, {\n          mes: 'Feb',\n          ventas: 320\n        }, {\n          mes: 'Mar',\n          ventas: 350\n        }, {\n          mes: 'Abr',\n          ventas: 370\n        }, {\n          mes: 'May',\n          ventas: 400\n        }, {\n          mes: 'Jun',\n          ventas: 450\n        }, {\n          mes: 'Jul',\n          ventas: 480\n        }, {\n          mes: 'Ago',\n          ventas: 520\n        }, {\n          mes: 'Sep',\n          ventas: 550\n        }, {\n          mes: 'Oct',\n          ventas: 600\n        }],\n        restaurantesPopulares: [{\n          nombre: 'Restaurante A',\n          pedidos: 42\n        }, {\n          nombre: 'Restaurante B',\n          pedidos: 30\n        }, {\n          nombre: 'Restaurante C',\n          pedidos: 25\n        }, {\n          nombre: 'Restaurante D',\n          pedidos: 18\n        }, {\n          nombre: 'Restaurante E',\n          pedidos: 12\n        }],\n        usuariosActivos: [{\n          nombre: 'Admin Sistema',\n          rol: 'Superadministrador',\n          ultimoAcceso: '2023-10-15'\n        }, {\n          nombre: 'Juan Pérez',\n          rol: 'Administrador',\n          ultimoAcceso: '2023-10-16'\n        }, {\n          nombre: 'María García',\n          rol: 'Empleado',\n          ultimoAcceso: '2023-10-14'\n        }, {\n          nombre: 'Carlos López',\n          rol: 'Administrador',\n          ultimoAcceso: '2023-10-15'\n        }, {\n          nombre: 'Ana Rodríguez',\n          rol: 'Empleado',\n          ultimoAcceso: '2023-10-13'\n        }]\n      }\n    };\n    console.log('Error en la respuesta del servicio, usando datos de respaldo');\n    return datosDummyDashboard;\n  }\n};\n\n/**\r\n * Obtiene la lista de roles disponibles en el sistema\r\n */\nexport const obtenerRoles = async () => {\n  try {\n    // 1. Intentar obtener datos de la API externa\n    const response = await axios.get(`${API_URL}/roles`);\n\n    // Si tenemos éxito, guardar en IndexedDB para uso futuro\n    if (response.data && response.data.success) {\n      await saveToIndexedDB(\"roles\", response.data);\n    }\n    return response.data;\n  } catch (error) {\n    console.error('Error al obtener roles de API:', error);\n    try {\n      // 2. Si la API falla, buscar datos en IndexedDB\n      console.log('Buscando roles en IndexedDB...');\n      const indexedDBData = await getFromIndexedDB(\"roles\");\n      if (indexedDBData) {\n        console.log('Usando datos de roles desde IndexedDB');\n        return indexedDBData;\n      }\n    } catch (dbError) {\n      console.error('Error al obtener roles de IndexedDB:', dbError);\n    }\n\n    // 3. Si no hay datos en IndexedDB, usar datos dummy\n    console.log('Usando datos dummy para roles');\n    const rolesDummy = {\n      success: true,\n      message: 'Roles obtenidos de datos locales',\n      data: [{\n        id: 1,\n        nombre: 'Administrador',\n        descripcion: 'Gestiona el restaurante'\n      }, {\n        id: 2,\n        nombre: 'Empleado',\n        descripcion: 'Atiende pedidos y clientes'\n      }, {\n        id: 3,\n        nombre: 'Superadministrador',\n        descripcion: 'Control total del sistema'\n      }]\n    };\n    return rolesDummy;\n  }\n};\n\n/**\r\n * Obtiene la lista de usuarios\r\n */\nexport const obtenerUsuarios = async (filtros = {}) => {\n  try {\n    // Construir parámetros de búsqueda\n    let params = {};\n    if (filtros.searchTerm) {\n      params.q = filtros.searchTerm;\n    }\n    if (filtros.role) {\n      params.role = filtros.role;\n    }\n    if (filtros.status) {\n      params.status = filtros.status;\n    }\n\n    // 1. Intentar obtener datos de la API externa\n    const response = await axios.get(`${API_URL}/usuarios`, {\n      params\n    });\n\n    // Si tenemos éxito, guardar en IndexedDB para uso futuro\n    if (response.data && response.data.success) {\n      // Guardamos con un ID especial que incluye los filtros para poder recuperar búsquedas específicas\n      const filtroKey = `usuarios_${JSON.stringify(filtros)}`;\n      await saveToIndexedDB(\"usuarios\", response.data, filtroKey);\n\n      // También guardamos la lista completa si no hay filtros\n      if (Object.keys(filtros).length === 0) {\n        await saveToIndexedDB(\"usuarios\", response.data);\n      }\n    }\n    return response.data;\n  } catch (error) {\n    console.error('Error al obtener usuarios de API:', error);\n    try {\n      // 2. Si la API falla, buscar datos en IndexedDB\n      console.log('Buscando usuarios en IndexedDB...');\n\n      // Intentamos obtener una versión filtrada si hay filtros\n      let indexedDBData = null;\n      if (Object.keys(filtros).length > 0) {\n        const filtroKey = `usuarios_${JSON.stringify(filtros)}`;\n        indexedDBData = await getFromIndexedDB(\"usuarios\", filtroKey);\n      }\n\n      // Si no hay datos filtrados o no había filtros, obtenemos la lista completa\n      if (!indexedDBData) {\n        indexedDBData = await getFromIndexedDB(\"usuarios\");\n      }\n      if (indexedDBData) {\n        console.log('Usando datos de usuarios desde IndexedDB');\n        return indexedDBData;\n      }\n    } catch (dbError) {\n      console.error('Error al obtener usuarios de IndexedDB:', dbError);\n    }\n\n    // 3. Si no hay datos en IndexedDB, usar datos dummy\n    console.log('Usando datos dummy para usuarios');\n    const usuariosDummy = {\n      success: true,\n      message: 'Usuarios obtenidos de datos locales',\n      data: [{\n        id: 1,\n        nombre: 'Admin',\n        email: 'admin@example.com',\n        roles: ['Superadministrador'],\n        estado: 'activo',\n        fecha_creacion: '2023-01-15T00:00:00.000Z'\n      }, {\n        id: 2,\n        nombre: 'María García',\n        email: 'maria@example.com',\n        roles: ['Administrador'],\n        estado: 'activo',\n        telefono: '3001234567',\n        fecha_creacion: '2023-03-20T00:00:00.000Z'\n      }, {\n        id: 3,\n        nombre: 'Juan Pérez',\n        email: 'juan@example.com',\n        roles: ['Empleado'],\n        estado: 'activo',\n        telefono: '3109876543',\n        fecha_creacion: '2023-05-10T00:00:00.000Z'\n      }, {\n        id: 4,\n        nombre: 'Carlos López',\n        email: 'carlos@example.com',\n        roles: ['Empleado'],\n        estado: 'inactivo',\n        fecha_creacion: '2023-06-05T00:00:00.000Z'\n      }]\n    };\n\n    // Aplicar filtros a los datos dummy si es necesario\n    if (Object.keys(filtros).length > 0) {\n      usuariosDummy.data = usuariosDummy.data.filter(user => {\n        let matches = true;\n\n        // Filtrar por término de búsqueda\n        if (filtros.searchTerm) {\n          const term = filtros.searchTerm.toLowerCase();\n          const matchesName = user.nombre.toLowerCase().includes(term);\n          const matchesEmail = user.email.toLowerCase().includes(term);\n          if (!matchesName && !matchesEmail) {\n            matches = false;\n          }\n        }\n\n        // Filtrar por rol\n        if (filtros.role && !user.roles.includes(filtros.role)) {\n          matches = false;\n        }\n\n        // Filtrar por estado\n        if (filtros.status && user.estado !== filtros.status) {\n          matches = false;\n        }\n        return matches;\n      });\n    }\n    return usuariosDummy;\n  }\n};\n\n/**\r\n * Crea un nuevo usuario\r\n * @param {Object} userData - Datos del usuario a crear\r\n */\nexport const crearUsuario = async userData => {\n  try {\n    const response = await axios.post(`${API_URL}/usuarios`, userData);\n    return response.data;\n  } catch (error) {\n    console.error('Error al crear usuario:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Actualiza un usuario existente\r\n * @param {number|string} userId - ID del usuario a actualizar\r\n * @param {Object} userData - Datos actualizados del usuario\r\n */\nexport const actualizarUsuario = async (userId, userData) => {\n  try {\n    const response = await axios.put(`${API_URL}/usuarios/${userId}`, userData);\n    return response.data;\n  } catch (error) {\n    console.error(`Error al actualizar usuario ${userId}:`, error);\n    throw error;\n  }\n};\n\n/**\r\n * Elimina un usuario\r\n * @param {number|string} userId - ID del usuario a eliminar\r\n */\nexport const eliminarUsuario = async userId => {\n  try {\n    const response = await axios.delete(`${API_URL}/usuarios/${userId}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Error al eliminar usuario ${userId}:`, error);\n    throw error;\n  }\n};\n\n/**\r\n * Cambia el estado de un usuario (activo/inactivo)\r\n * @param {number|string} userId - ID del usuario\r\n * @param {string} estado - Nuevo estado ('activo' o 'inactivo')\r\n */\nexport const cambiarEstadoUsuario = async (userId, estado) => {\n  try {\n    const response = await axios.patch(`${API_URL}/usuarios/${userId}/estado`, {\n      estado\n    });\n    return response.data;\n  } catch (error) {\n    console.error(`Error al cambiar estado del usuario ${userId}:`, error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_URL","process","env","VUE_APP_API_URL","openDatabase","Promise","resolve","reject","request","window","indexedDB","open","onerror","event","console","error","Error","onsuccess","db","target","result","onupgradeneeded","objectStoreNames","contains","createObjectStore","keyPath","saveToIndexedDB","storeName","data","id","transaction","store","objectStore","put","timestamp","Date","getTime","getFromIndexedDB","get","now","dataAge","oneDay","obtenerDatosDashboard","response","success","log","indexedDBData","dbError","datosDummyDashboard","estadisticas","totalUsuarios","totalRestaurantes","totalPedidos","totalVentas","graficoVentas","mes","ventas","restaurantesPopulares","nombre","pedidos","usuariosActivos","rol","ultimoAcceso","obtenerRoles","rolesDummy","message","descripcion","obtenerUsuarios","filtros","params","searchTerm","q","role","status","filtroKey","JSON","stringify","Object","keys","length","usuariosDummy","email","roles","estado","fecha_creacion","telefono","filter","user","matches","term","toLowerCase","matchesName","includes","matchesEmail","crearUsuario","userData","post","actualizarUsuario","userId","eliminarUsuario","delete","cambiarEstadoUsuario","patch"],"sources":["F:/Driver google/VUE.JS-2/VUE-JS/websap/src/services/adminDashboardService.js"],"sourcesContent":["// adminDashboardService.js - Servicio para gestionar datos del dashboard de administración\r\nimport axios from 'axios';\r\n\r\n// URL base para las llamadas a la API\r\nconst API_URL = process.env.VUE_APP_API_URL || 'http://localhost:3000/api/admin';\r\n\r\n// Función para abrir la base de datos IndexedDB\r\nconst openDatabase = () => {\r\n  return new Promise((resolve, reject) => {\r\n    const request = window.indexedDB.open(\"adminDashboardDB\", 1);\r\n    \r\n    request.onerror = (event) => {\r\n      console.error(\"Error al abrir IndexedDB:\", event);\r\n      reject(new Error(\"No se pudo abrir la base de datos IndexedDB\"));\r\n    };\r\n    \r\n    request.onsuccess = (event) => {\r\n      const db = event.target.result;\r\n      resolve(db);\r\n    };\r\n    \r\n    request.onupgradeneeded = (event) => {\r\n      const db = event.target.result;\r\n      \r\n      // Crear almacenes de objetos si no existen\r\n      if (!db.objectStoreNames.contains(\"dashboard\")) {\r\n        db.createObjectStore(\"dashboard\", { keyPath: \"id\" });\r\n      }\r\n      \r\n      if (!db.objectStoreNames.contains(\"roles\")) {\r\n        db.createObjectStore(\"roles\", { keyPath: \"id\" });\r\n      }\r\n      \r\n      if (!db.objectStoreNames.contains(\"usuarios\")) {\r\n        db.createObjectStore(\"usuarios\", { keyPath: \"id\" });\r\n      }\r\n    };\r\n  });\r\n};\r\n\r\n// Función para guardar datos en IndexedDB\r\nconst saveToIndexedDB = async (storeName, data, id = \"last\") => {\r\n  try {\r\n    const db = await openDatabase();\r\n    return new Promise((resolve, reject) => {\r\n      const transaction = db.transaction([storeName], \"readwrite\");\r\n      const store = transaction.objectStore(storeName);\r\n      \r\n      const request = store.put({ id, data, timestamp: new Date().getTime() });\r\n      \r\n      request.onsuccess = () => {\r\n        resolve(true);\r\n      };\r\n      \r\n      request.onerror = (event) => {\r\n        console.error(`Error al guardar en ${storeName}:`, event);\r\n        reject(new Error(`Error al guardar en IndexedDB: ${event.target.error}`));\r\n      };\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error al guardar en IndexedDB:\", error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Función para obtener datos de IndexedDB\r\nconst getFromIndexedDB = async (storeName, id = \"last\") => {\r\n  try {\r\n    const db = await openDatabase();\r\n    return new Promise((resolve, reject) => {\r\n      const transaction = db.transaction([storeName], \"readonly\");\r\n      const store = transaction.objectStore(storeName);\r\n      \r\n      const request = store.get(id);\r\n      \r\n      request.onsuccess = (event) => {\r\n        const result = event.target.result;\r\n        if (result) {\r\n          // Verificar si los datos tienen menos de 24 horas\r\n          const now = new Date().getTime();\r\n          const dataAge = now - result.timestamp;\r\n          const oneDay = 24 * 60 * 60 * 1000;\r\n          \r\n          if (dataAge < oneDay) {\r\n            resolve(result.data);\r\n          } else {\r\n            // Datos demasiado antiguos\r\n            resolve(null);\r\n          }\r\n        } else {\r\n          resolve(null);\r\n        }\r\n      };\r\n      \r\n      request.onerror = (event) => {\r\n        console.error(`Error al leer de ${storeName}:`, event);\r\n        reject(new Error(`Error al leer de IndexedDB: ${event.target.error}`));\r\n      };\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error al leer de IndexedDB:\", error);\r\n    return null;\r\n  }\r\n};\r\n\r\n/**\r\n * Obtiene los datos del dashboard de administración\r\n */\r\nexport const obtenerDatosDashboard = async () => {\r\n  try {\r\n    // 1. Intentar obtener datos de la API externa\r\n    const response = await axios.get(`${API_URL}/dashboard`);\r\n    \r\n    // Si tenemos éxito, guardar en IndexedDB para uso futuro\r\n    if (response.data && response.data.success) {\r\n      await saveToIndexedDB(\"dashboard\", response.data);\r\n    }\r\n    \r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error al obtener datos del dashboard de API:', error);\r\n    \r\n    try {\r\n      // 2. Si la API falla, buscar datos en IndexedDB\r\n      console.log('Buscando datos en IndexedDB...');\r\n      const indexedDBData = await getFromIndexedDB(\"dashboard\");\r\n      \r\n      if (indexedDBData) {\r\n        console.log('Usando datos de dashboard desde IndexedDB');\r\n        return indexedDBData;\r\n      }\r\n    } catch (dbError) {\r\n      console.error('Error al obtener datos de IndexedDB:', dbError);\r\n    }\r\n    \r\n    // 3. Si no hay datos en IndexedDB, usar datos dummy\r\n    console.log('Usando datos dummy para el dashboard');\r\n    const datosDummyDashboard = {\r\n      success: true,\r\n      data: {\r\n        estadisticas: {\r\n          totalUsuarios: 15,\r\n          totalRestaurantes: 4,\r\n          totalPedidos: 120,\r\n          totalVentas: 3850\r\n        },\r\n        graficoVentas: [\r\n          { mes: 'Ene', ventas: 300 },\r\n          { mes: 'Feb', ventas: 320 },\r\n          { mes: 'Mar', ventas: 350 },\r\n          { mes: 'Abr', ventas: 370 },\r\n          { mes: 'May', ventas: 400 },\r\n          { mes: 'Jun', ventas: 450 },\r\n          { mes: 'Jul', ventas: 480 },\r\n          { mes: 'Ago', ventas: 520 },\r\n          { mes: 'Sep', ventas: 550 },\r\n          { mes: 'Oct', ventas: 600 }\r\n        ],\r\n        restaurantesPopulares: [\r\n          { nombre: 'Restaurante A', pedidos: 42 },\r\n          { nombre: 'Restaurante B', pedidos: 30 },\r\n          { nombre: 'Restaurante C', pedidos: 25 },\r\n          { nombre: 'Restaurante D', pedidos: 18 },\r\n          { nombre: 'Restaurante E', pedidos: 12 }\r\n        ],\r\n        usuariosActivos: [\r\n          { nombre: 'Admin Sistema', rol: 'Superadministrador', ultimoAcceso: '2023-10-15' },\r\n          { nombre: 'Juan Pérez', rol: 'Administrador', ultimoAcceso: '2023-10-16' },\r\n          { nombre: 'María García', rol: 'Empleado', ultimoAcceso: '2023-10-14' },\r\n          { nombre: 'Carlos López', rol: 'Administrador', ultimoAcceso: '2023-10-15' },\r\n          { nombre: 'Ana Rodríguez', rol: 'Empleado', ultimoAcceso: '2023-10-13' }\r\n        ]\r\n      }\r\n    };\r\n    \r\n    console.log('Error en la respuesta del servicio, usando datos de respaldo');\r\n    return datosDummyDashboard;\r\n  }\r\n};\r\n\r\n/**\r\n * Obtiene la lista de roles disponibles en el sistema\r\n */\r\nexport const obtenerRoles = async () => {\r\n  try {\r\n    // 1. Intentar obtener datos de la API externa\r\n    const response = await axios.get(`${API_URL}/roles`);\r\n    \r\n    // Si tenemos éxito, guardar en IndexedDB para uso futuro\r\n    if (response.data && response.data.success) {\r\n      await saveToIndexedDB(\"roles\", response.data);\r\n    }\r\n    \r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error al obtener roles de API:', error);\r\n    \r\n    try {\r\n      // 2. Si la API falla, buscar datos en IndexedDB\r\n      console.log('Buscando roles en IndexedDB...');\r\n      const indexedDBData = await getFromIndexedDB(\"roles\");\r\n      \r\n      if (indexedDBData) {\r\n        console.log('Usando datos de roles desde IndexedDB');\r\n        return indexedDBData;\r\n      }\r\n    } catch (dbError) {\r\n      console.error('Error al obtener roles de IndexedDB:', dbError);\r\n    }\r\n    \r\n    // 3. Si no hay datos en IndexedDB, usar datos dummy\r\n    console.log('Usando datos dummy para roles');\r\n    const rolesDummy = {\r\n      success: true,\r\n      message: 'Roles obtenidos de datos locales',\r\n      data: [\r\n        { id: 1, nombre: 'Administrador', descripcion: 'Gestiona el restaurante' },\r\n        { id: 2, nombre: 'Empleado', descripcion: 'Atiende pedidos y clientes' },\r\n        { id: 3, nombre: 'Superadministrador', descripcion: 'Control total del sistema' }\r\n      ]\r\n    };\r\n    \r\n    return rolesDummy;\r\n  }\r\n};\r\n\r\n/**\r\n * Obtiene la lista de usuarios\r\n */\r\nexport const obtenerUsuarios = async (filtros = {}) => {\r\n  try {\r\n    // Construir parámetros de búsqueda\r\n    let params = {};\r\n    \r\n    if (filtros.searchTerm) {\r\n      params.q = filtros.searchTerm;\r\n    }\r\n    \r\n    if (filtros.role) {\r\n      params.role = filtros.role;\r\n    }\r\n    \r\n    if (filtros.status) {\r\n      params.status = filtros.status;\r\n    }\r\n    \r\n    // 1. Intentar obtener datos de la API externa\r\n    const response = await axios.get(`${API_URL}/usuarios`, { params });\r\n    \r\n    // Si tenemos éxito, guardar en IndexedDB para uso futuro\r\n    if (response.data && response.data.success) {\r\n      // Guardamos con un ID especial que incluye los filtros para poder recuperar búsquedas específicas\r\n      const filtroKey = `usuarios_${JSON.stringify(filtros)}`;\r\n      await saveToIndexedDB(\"usuarios\", response.data, filtroKey);\r\n      \r\n      // También guardamos la lista completa si no hay filtros\r\n      if (Object.keys(filtros).length === 0) {\r\n        await saveToIndexedDB(\"usuarios\", response.data);\r\n      }\r\n    }\r\n    \r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error al obtener usuarios de API:', error);\r\n    \r\n    try {\r\n      // 2. Si la API falla, buscar datos en IndexedDB\r\n      console.log('Buscando usuarios en IndexedDB...');\r\n      \r\n      // Intentamos obtener una versión filtrada si hay filtros\r\n      let indexedDBData = null;\r\n      if (Object.keys(filtros).length > 0) {\r\n        const filtroKey = `usuarios_${JSON.stringify(filtros)}`;\r\n        indexedDBData = await getFromIndexedDB(\"usuarios\", filtroKey);\r\n      }\r\n      \r\n      // Si no hay datos filtrados o no había filtros, obtenemos la lista completa\r\n      if (!indexedDBData) {\r\n        indexedDBData = await getFromIndexedDB(\"usuarios\");\r\n      }\r\n      \r\n      if (indexedDBData) {\r\n        console.log('Usando datos de usuarios desde IndexedDB');\r\n        return indexedDBData;\r\n      }\r\n    } catch (dbError) {\r\n      console.error('Error al obtener usuarios de IndexedDB:', dbError);\r\n    }\r\n    \r\n    // 3. Si no hay datos en IndexedDB, usar datos dummy\r\n    console.log('Usando datos dummy para usuarios');\r\n    const usuariosDummy = {\r\n      success: true,\r\n      message: 'Usuarios obtenidos de datos locales',\r\n      data: [\r\n        { \r\n          id: 1, \r\n          nombre: 'Admin', \r\n          email: 'admin@example.com', \r\n          roles: ['Superadministrador'], \r\n          estado: 'activo',\r\n          fecha_creacion: '2023-01-15T00:00:00.000Z'\r\n        },\r\n        { \r\n          id: 2, \r\n          nombre: 'María García', \r\n          email: 'maria@example.com', \r\n          roles: ['Administrador'], \r\n          estado: 'activo',\r\n          telefono: '3001234567',\r\n          fecha_creacion: '2023-03-20T00:00:00.000Z'\r\n        },\r\n        { \r\n          id: 3, \r\n          nombre: 'Juan Pérez', \r\n          email: 'juan@example.com', \r\n          roles: ['Empleado'], \r\n          estado: 'activo',\r\n          telefono: '3109876543',\r\n          fecha_creacion: '2023-05-10T00:00:00.000Z'\r\n        },\r\n        { \r\n          id: 4, \r\n          nombre: 'Carlos López', \r\n          email: 'carlos@example.com', \r\n          roles: ['Empleado'], \r\n          estado: 'inactivo',\r\n          fecha_creacion: '2023-06-05T00:00:00.000Z'\r\n        }\r\n      ]\r\n    };\r\n    \r\n    // Aplicar filtros a los datos dummy si es necesario\r\n    if (Object.keys(filtros).length > 0) {\r\n      usuariosDummy.data = usuariosDummy.data.filter(user => {\r\n        let matches = true;\r\n        \r\n        // Filtrar por término de búsqueda\r\n        if (filtros.searchTerm) {\r\n          const term = filtros.searchTerm.toLowerCase();\r\n          const matchesName = user.nombre.toLowerCase().includes(term);\r\n          const matchesEmail = user.email.toLowerCase().includes(term);\r\n          if (!matchesName && !matchesEmail) {\r\n            matches = false;\r\n          }\r\n        }\r\n        \r\n        // Filtrar por rol\r\n        if (filtros.role && !user.roles.includes(filtros.role)) {\r\n          matches = false;\r\n        }\r\n        \r\n        // Filtrar por estado\r\n        if (filtros.status && user.estado !== filtros.status) {\r\n          matches = false;\r\n        }\r\n        \r\n        return matches;\r\n      });\r\n    }\r\n    \r\n    return usuariosDummy;\r\n  }\r\n};\r\n\r\n/**\r\n * Crea un nuevo usuario\r\n * @param {Object} userData - Datos del usuario a crear\r\n */\r\nexport const crearUsuario = async (userData) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}/usuarios`, userData);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error al crear usuario:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Actualiza un usuario existente\r\n * @param {number|string} userId - ID del usuario a actualizar\r\n * @param {Object} userData - Datos actualizados del usuario\r\n */\r\nexport const actualizarUsuario = async (userId, userData) => {\r\n  try {\r\n    const response = await axios.put(`${API_URL}/usuarios/${userId}`, userData);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Error al actualizar usuario ${userId}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Elimina un usuario\r\n * @param {number|string} userId - ID del usuario a eliminar\r\n */\r\nexport const eliminarUsuario = async (userId) => {\r\n  try {\r\n    const response = await axios.delete(`${API_URL}/usuarios/${userId}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Error al eliminar usuario ${userId}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Cambia el estado de un usuario (activo/inactivo)\r\n * @param {number|string} userId - ID del usuario\r\n * @param {string} estado - Nuevo estado ('activo' o 'inactivo')\r\n */\r\nexport const cambiarEstadoUsuario = async (userId, estado) => {\r\n  try {\r\n    const response = await axios.patch(`${API_URL}/usuarios/${userId}/estado`, { estado });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Error al cambiar estado del usuario ${userId}:`, error);\r\n    throw error;\r\n  }\r\n};"],"mappings":";;AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,eAAe,IAAI,iCAAiC;;AAEhF;AACA,MAAMC,YAAY,GAAGA,CAAA,KAAM;EACzB,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,MAAMC,OAAO,GAAGC,MAAM,CAACC,SAAS,CAACC,IAAI,CAAC,kBAAkB,EAAE,CAAC,CAAC;IAE5DH,OAAO,CAACI,OAAO,GAAIC,KAAK,IAAK;MAC3BC,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAEF,KAAK,CAAC;MACjDN,MAAM,CAAC,IAAIS,KAAK,CAAC,6CAA6C,CAAC,CAAC;IAClE,CAAC;IAEDR,OAAO,CAACS,SAAS,GAAIJ,KAAK,IAAK;MAC7B,MAAMK,EAAE,GAAGL,KAAK,CAACM,MAAM,CAACC,MAAM;MAC9Bd,OAAO,CAACY,EAAE,CAAC;IACb,CAAC;IAEDV,OAAO,CAACa,eAAe,GAAIR,KAAK,IAAK;MACnC,MAAMK,EAAE,GAAGL,KAAK,CAACM,MAAM,CAACC,MAAM;;MAE9B;MACA,IAAI,CAACF,EAAE,CAACI,gBAAgB,CAACC,QAAQ,CAAC,WAAW,CAAC,EAAE;QAC9CL,EAAE,CAACM,iBAAiB,CAAC,WAAW,EAAE;UAAEC,OAAO,EAAE;QAAK,CAAC,CAAC;MACtD;MAEA,IAAI,CAACP,EAAE,CAACI,gBAAgB,CAACC,QAAQ,CAAC,OAAO,CAAC,EAAE;QAC1CL,EAAE,CAACM,iBAAiB,CAAC,OAAO,EAAE;UAAEC,OAAO,EAAE;QAAK,CAAC,CAAC;MAClD;MAEA,IAAI,CAACP,EAAE,CAACI,gBAAgB,CAACC,QAAQ,CAAC,UAAU,CAAC,EAAE;QAC7CL,EAAE,CAACM,iBAAiB,CAAC,UAAU,EAAE;UAAEC,OAAO,EAAE;QAAK,CAAC,CAAC;MACrD;IACF,CAAC;EACH,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,MAAMC,eAAe,GAAG,MAAAA,CAAOC,SAAS,EAAEC,IAAI,EAAEC,EAAE,GAAG,MAAM,KAAK;EAC9D,IAAI;IACF,MAAMX,EAAE,GAAG,MAAMd,YAAY,CAAC,CAAC;IAC/B,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,MAAMuB,WAAW,GAAGZ,EAAE,CAACY,WAAW,CAAC,CAACH,SAAS,CAAC,EAAE,WAAW,CAAC;MAC5D,MAAMI,KAAK,GAAGD,WAAW,CAACE,WAAW,CAACL,SAAS,CAAC;MAEhD,MAAMnB,OAAO,GAAGuB,KAAK,CAACE,GAAG,CAAC;QAAEJ,EAAE;QAAED,IAAI;QAAEM,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC;MAAE,CAAC,CAAC;MAExE5B,OAAO,CAACS,SAAS,GAAG,MAAM;QACxBX,OAAO,CAAC,IAAI,CAAC;MACf,CAAC;MAEDE,OAAO,CAACI,OAAO,GAAIC,KAAK,IAAK;QAC3BC,OAAO,CAACC,KAAK,CAAC,uBAAuBY,SAAS,GAAG,EAAEd,KAAK,CAAC;QACzDN,MAAM,CAAC,IAAIS,KAAK,CAAC,kCAAkCH,KAAK,CAACM,MAAM,CAACJ,KAAK,EAAE,CAAC,CAAC;MAC3E,CAAC;IACH,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOA,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACtD,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACA,MAAMsB,gBAAgB,GAAG,MAAAA,CAAOV,SAAS,EAAEE,EAAE,GAAG,MAAM,KAAK;EACzD,IAAI;IACF,MAAMX,EAAE,GAAG,MAAMd,YAAY,CAAC,CAAC;IAC/B,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,MAAMuB,WAAW,GAAGZ,EAAE,CAACY,WAAW,CAAC,CAACH,SAAS,CAAC,EAAE,UAAU,CAAC;MAC3D,MAAMI,KAAK,GAAGD,WAAW,CAACE,WAAW,CAACL,SAAS,CAAC;MAEhD,MAAMnB,OAAO,GAAGuB,KAAK,CAACO,GAAG,CAACT,EAAE,CAAC;MAE7BrB,OAAO,CAACS,SAAS,GAAIJ,KAAK,IAAK;QAC7B,MAAMO,MAAM,GAAGP,KAAK,CAACM,MAAM,CAACC,MAAM;QAClC,IAAIA,MAAM,EAAE;UACV;UACA,MAAMmB,GAAG,GAAG,IAAIJ,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;UAChC,MAAMI,OAAO,GAAGD,GAAG,GAAGnB,MAAM,CAACc,SAAS;UACtC,MAAMO,MAAM,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;UAElC,IAAID,OAAO,GAAGC,MAAM,EAAE;YACpBnC,OAAO,CAACc,MAAM,CAACQ,IAAI,CAAC;UACtB,CAAC,MAAM;YACL;YACAtB,OAAO,CAAC,IAAI,CAAC;UACf;QACF,CAAC,MAAM;UACLA,OAAO,CAAC,IAAI,CAAC;QACf;MACF,CAAC;MAEDE,OAAO,CAACI,OAAO,GAAIC,KAAK,IAAK;QAC3BC,OAAO,CAACC,KAAK,CAAC,oBAAoBY,SAAS,GAAG,EAAEd,KAAK,CAAC;QACtDN,MAAM,CAAC,IAAIS,KAAK,CAAC,+BAA+BH,KAAK,CAACM,MAAM,CAACJ,KAAK,EAAE,CAAC,CAAC;MACxE,CAAC;IACH,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOA,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,OAAO,IAAI;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAM2B,qBAAqB,GAAG,MAAAA,CAAA,KAAY;EAC/C,IAAI;IACF;IACA,MAAMC,QAAQ,GAAG,MAAM5C,KAAK,CAACuC,GAAG,CAAC,GAAGtC,OAAO,YAAY,CAAC;;IAExD;IACA,IAAI2C,QAAQ,CAACf,IAAI,IAAIe,QAAQ,CAACf,IAAI,CAACgB,OAAO,EAAE;MAC1C,MAAMlB,eAAe,CAAC,WAAW,EAAEiB,QAAQ,CAACf,IAAI,CAAC;IACnD;IAEA,OAAOe,QAAQ,CAACf,IAAI;EACtB,CAAC,CAAC,OAAOb,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,8CAA8C,EAAEA,KAAK,CAAC;IAEpE,IAAI;MACF;MACAD,OAAO,CAAC+B,GAAG,CAAC,gCAAgC,CAAC;MAC7C,MAAMC,aAAa,GAAG,MAAMT,gBAAgB,CAAC,WAAW,CAAC;MAEzD,IAAIS,aAAa,EAAE;QACjBhC,OAAO,CAAC+B,GAAG,CAAC,2CAA2C,CAAC;QACxD,OAAOC,aAAa;MACtB;IACF,CAAC,CAAC,OAAOC,OAAO,EAAE;MAChBjC,OAAO,CAACC,KAAK,CAAC,sCAAsC,EAAEgC,OAAO,CAAC;IAChE;;IAEA;IACAjC,OAAO,CAAC+B,GAAG,CAAC,sCAAsC,CAAC;IACnD,MAAMG,mBAAmB,GAAG;MAC1BJ,OAAO,EAAE,IAAI;MACbhB,IAAI,EAAE;QACJqB,YAAY,EAAE;UACZC,aAAa,EAAE,EAAE;UACjBC,iBAAiB,EAAE,CAAC;UACpBC,YAAY,EAAE,GAAG;UACjBC,WAAW,EAAE;QACf,CAAC;QACDC,aAAa,EAAE,CACb;UAAEC,GAAG,EAAE,KAAK;UAAEC,MAAM,EAAE;QAAI,CAAC,EAC3B;UAAED,GAAG,EAAE,KAAK;UAAEC,MAAM,EAAE;QAAI,CAAC,EAC3B;UAAED,GAAG,EAAE,KAAK;UAAEC,MAAM,EAAE;QAAI,CAAC,EAC3B;UAAED,GAAG,EAAE,KAAK;UAAEC,MAAM,EAAE;QAAI,CAAC,EAC3B;UAAED,GAAG,EAAE,KAAK;UAAEC,MAAM,EAAE;QAAI,CAAC,EAC3B;UAAED,GAAG,EAAE,KAAK;UAAEC,MAAM,EAAE;QAAI,CAAC,EAC3B;UAAED,GAAG,EAAE,KAAK;UAAEC,MAAM,EAAE;QAAI,CAAC,EAC3B;UAAED,GAAG,EAAE,KAAK;UAAEC,MAAM,EAAE;QAAI,CAAC,EAC3B;UAAED,GAAG,EAAE,KAAK;UAAEC,MAAM,EAAE;QAAI,CAAC,EAC3B;UAAED,GAAG,EAAE,KAAK;UAAEC,MAAM,EAAE;QAAI,CAAC,CAC5B;QACDC,qBAAqB,EAAE,CACrB;UAAEC,MAAM,EAAE,eAAe;UAAEC,OAAO,EAAE;QAAG,CAAC,EACxC;UAAED,MAAM,EAAE,eAAe;UAAEC,OAAO,EAAE;QAAG,CAAC,EACxC;UAAED,MAAM,EAAE,eAAe;UAAEC,OAAO,EAAE;QAAG,CAAC,EACxC;UAAED,MAAM,EAAE,eAAe;UAAEC,OAAO,EAAE;QAAG,CAAC,EACxC;UAAED,MAAM,EAAE,eAAe;UAAEC,OAAO,EAAE;QAAG,CAAC,CACzC;QACDC,eAAe,EAAE,CACf;UAAEF,MAAM,EAAE,eAAe;UAAEG,GAAG,EAAE,oBAAoB;UAAEC,YAAY,EAAE;QAAa,CAAC,EAClF;UAAEJ,MAAM,EAAE,YAAY;UAAEG,GAAG,EAAE,eAAe;UAAEC,YAAY,EAAE;QAAa,CAAC,EAC1E;UAAEJ,MAAM,EAAE,cAAc;UAAEG,GAAG,EAAE,UAAU;UAAEC,YAAY,EAAE;QAAa,CAAC,EACvE;UAAEJ,MAAM,EAAE,cAAc;UAAEG,GAAG,EAAE,eAAe;UAAEC,YAAY,EAAE;QAAa,CAAC,EAC5E;UAAEJ,MAAM,EAAE,eAAe;UAAEG,GAAG,EAAE,UAAU;UAAEC,YAAY,EAAE;QAAa,CAAC;MAE5E;IACF,CAAC;IAEDhD,OAAO,CAAC+B,GAAG,CAAC,8DAA8D,CAAC;IAC3E,OAAOG,mBAAmB;EAC5B;AACF,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMe,YAAY,GAAG,MAAAA,CAAA,KAAY;EACtC,IAAI;IACF;IACA,MAAMpB,QAAQ,GAAG,MAAM5C,KAAK,CAACuC,GAAG,CAAC,GAAGtC,OAAO,QAAQ,CAAC;;IAEpD;IACA,IAAI2C,QAAQ,CAACf,IAAI,IAAIe,QAAQ,CAACf,IAAI,CAACgB,OAAO,EAAE;MAC1C,MAAMlB,eAAe,CAAC,OAAO,EAAEiB,QAAQ,CAACf,IAAI,CAAC;IAC/C;IAEA,OAAOe,QAAQ,CAACf,IAAI;EACtB,CAAC,CAAC,OAAOb,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IAEtD,IAAI;MACF;MACAD,OAAO,CAAC+B,GAAG,CAAC,gCAAgC,CAAC;MAC7C,MAAMC,aAAa,GAAG,MAAMT,gBAAgB,CAAC,OAAO,CAAC;MAErD,IAAIS,aAAa,EAAE;QACjBhC,OAAO,CAAC+B,GAAG,CAAC,uCAAuC,CAAC;QACpD,OAAOC,aAAa;MACtB;IACF,CAAC,CAAC,OAAOC,OAAO,EAAE;MAChBjC,OAAO,CAACC,KAAK,CAAC,sCAAsC,EAAEgC,OAAO,CAAC;IAChE;;IAEA;IACAjC,OAAO,CAAC+B,GAAG,CAAC,+BAA+B,CAAC;IAC5C,MAAMmB,UAAU,GAAG;MACjBpB,OAAO,EAAE,IAAI;MACbqB,OAAO,EAAE,kCAAkC;MAC3CrC,IAAI,EAAE,CACJ;QAAEC,EAAE,EAAE,CAAC;QAAE6B,MAAM,EAAE,eAAe;QAAEQ,WAAW,EAAE;MAA0B,CAAC,EAC1E;QAAErC,EAAE,EAAE,CAAC;QAAE6B,MAAM,EAAE,UAAU;QAAEQ,WAAW,EAAE;MAA6B,CAAC,EACxE;QAAErC,EAAE,EAAE,CAAC;QAAE6B,MAAM,EAAE,oBAAoB;QAAEQ,WAAW,EAAE;MAA4B,CAAC;IAErF,CAAC;IAED,OAAOF,UAAU;EACnB;AACF,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMG,eAAe,GAAG,MAAAA,CAAOC,OAAO,GAAG,CAAC,CAAC,KAAK;EACrD,IAAI;IACF;IACA,IAAIC,MAAM,GAAG,CAAC,CAAC;IAEf,IAAID,OAAO,CAACE,UAAU,EAAE;MACtBD,MAAM,CAACE,CAAC,GAAGH,OAAO,CAACE,UAAU;IAC/B;IAEA,IAAIF,OAAO,CAACI,IAAI,EAAE;MAChBH,MAAM,CAACG,IAAI,GAAGJ,OAAO,CAACI,IAAI;IAC5B;IAEA,IAAIJ,OAAO,CAACK,MAAM,EAAE;MAClBJ,MAAM,CAACI,MAAM,GAAGL,OAAO,CAACK,MAAM;IAChC;;IAEA;IACA,MAAM9B,QAAQ,GAAG,MAAM5C,KAAK,CAACuC,GAAG,CAAC,GAAGtC,OAAO,WAAW,EAAE;MAAEqE;IAAO,CAAC,CAAC;;IAEnE;IACA,IAAI1B,QAAQ,CAACf,IAAI,IAAIe,QAAQ,CAACf,IAAI,CAACgB,OAAO,EAAE;MAC1C;MACA,MAAM8B,SAAS,GAAG,YAAYC,IAAI,CAACC,SAAS,CAACR,OAAO,CAAC,EAAE;MACvD,MAAM1C,eAAe,CAAC,UAAU,EAAEiB,QAAQ,CAACf,IAAI,EAAE8C,SAAS,CAAC;;MAE3D;MACA,IAAIG,MAAM,CAACC,IAAI,CAACV,OAAO,CAAC,CAACW,MAAM,KAAK,CAAC,EAAE;QACrC,MAAMrD,eAAe,CAAC,UAAU,EAAEiB,QAAQ,CAACf,IAAI,CAAC;MAClD;IACF;IAEA,OAAOe,QAAQ,CAACf,IAAI;EACtB,CAAC,CAAC,OAAOb,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IAEzD,IAAI;MACF;MACAD,OAAO,CAAC+B,GAAG,CAAC,mCAAmC,CAAC;;MAEhD;MACA,IAAIC,aAAa,GAAG,IAAI;MACxB,IAAI+B,MAAM,CAACC,IAAI,CAACV,OAAO,CAAC,CAACW,MAAM,GAAG,CAAC,EAAE;QACnC,MAAML,SAAS,GAAG,YAAYC,IAAI,CAACC,SAAS,CAACR,OAAO,CAAC,EAAE;QACvDtB,aAAa,GAAG,MAAMT,gBAAgB,CAAC,UAAU,EAAEqC,SAAS,CAAC;MAC/D;;MAEA;MACA,IAAI,CAAC5B,aAAa,EAAE;QAClBA,aAAa,GAAG,MAAMT,gBAAgB,CAAC,UAAU,CAAC;MACpD;MAEA,IAAIS,aAAa,EAAE;QACjBhC,OAAO,CAAC+B,GAAG,CAAC,0CAA0C,CAAC;QACvD,OAAOC,aAAa;MACtB;IACF,CAAC,CAAC,OAAOC,OAAO,EAAE;MAChBjC,OAAO,CAACC,KAAK,CAAC,yCAAyC,EAAEgC,OAAO,CAAC;IACnE;;IAEA;IACAjC,OAAO,CAAC+B,GAAG,CAAC,kCAAkC,CAAC;IAC/C,MAAMmC,aAAa,GAAG;MACpBpC,OAAO,EAAE,IAAI;MACbqB,OAAO,EAAE,qCAAqC;MAC9CrC,IAAI,EAAE,CACJ;QACEC,EAAE,EAAE,CAAC;QACL6B,MAAM,EAAE,OAAO;QACfuB,KAAK,EAAE,mBAAmB;QAC1BC,KAAK,EAAE,CAAC,oBAAoB,CAAC;QAC7BC,MAAM,EAAE,QAAQ;QAChBC,cAAc,EAAE;MAClB,CAAC,EACD;QACEvD,EAAE,EAAE,CAAC;QACL6B,MAAM,EAAE,cAAc;QACtBuB,KAAK,EAAE,mBAAmB;QAC1BC,KAAK,EAAE,CAAC,eAAe,CAAC;QACxBC,MAAM,EAAE,QAAQ;QAChBE,QAAQ,EAAE,YAAY;QACtBD,cAAc,EAAE;MAClB,CAAC,EACD;QACEvD,EAAE,EAAE,CAAC;QACL6B,MAAM,EAAE,YAAY;QACpBuB,KAAK,EAAE,kBAAkB;QACzBC,KAAK,EAAE,CAAC,UAAU,CAAC;QACnBC,MAAM,EAAE,QAAQ;QAChBE,QAAQ,EAAE,YAAY;QACtBD,cAAc,EAAE;MAClB,CAAC,EACD;QACEvD,EAAE,EAAE,CAAC;QACL6B,MAAM,EAAE,cAAc;QACtBuB,KAAK,EAAE,oBAAoB;QAC3BC,KAAK,EAAE,CAAC,UAAU,CAAC;QACnBC,MAAM,EAAE,UAAU;QAClBC,cAAc,EAAE;MAClB,CAAC;IAEL,CAAC;;IAED;IACA,IAAIP,MAAM,CAACC,IAAI,CAACV,OAAO,CAAC,CAACW,MAAM,GAAG,CAAC,EAAE;MACnCC,aAAa,CAACpD,IAAI,GAAGoD,aAAa,CAACpD,IAAI,CAAC0D,MAAM,CAACC,IAAI,IAAI;QACrD,IAAIC,OAAO,GAAG,IAAI;;QAElB;QACA,IAAIpB,OAAO,CAACE,UAAU,EAAE;UACtB,MAAMmB,IAAI,GAAGrB,OAAO,CAACE,UAAU,CAACoB,WAAW,CAAC,CAAC;UAC7C,MAAMC,WAAW,GAAGJ,IAAI,CAAC7B,MAAM,CAACgC,WAAW,CAAC,CAAC,CAACE,QAAQ,CAACH,IAAI,CAAC;UAC5D,MAAMI,YAAY,GAAGN,IAAI,CAACN,KAAK,CAACS,WAAW,CAAC,CAAC,CAACE,QAAQ,CAACH,IAAI,CAAC;UAC5D,IAAI,CAACE,WAAW,IAAI,CAACE,YAAY,EAAE;YACjCL,OAAO,GAAG,KAAK;UACjB;QACF;;QAEA;QACA,IAAIpB,OAAO,CAACI,IAAI,IAAI,CAACe,IAAI,CAACL,KAAK,CAACU,QAAQ,CAACxB,OAAO,CAACI,IAAI,CAAC,EAAE;UACtDgB,OAAO,GAAG,KAAK;QACjB;;QAEA;QACA,IAAIpB,OAAO,CAACK,MAAM,IAAIc,IAAI,CAACJ,MAAM,KAAKf,OAAO,CAACK,MAAM,EAAE;UACpDe,OAAO,GAAG,KAAK;QACjB;QAEA,OAAOA,OAAO;MAChB,CAAC,CAAC;IACJ;IAEA,OAAOR,aAAa;EACtB;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMc,YAAY,GAAG,MAAOC,QAAQ,IAAK;EAC9C,IAAI;IACF,MAAMpD,QAAQ,GAAG,MAAM5C,KAAK,CAACiG,IAAI,CAAC,GAAGhG,OAAO,WAAW,EAAE+F,QAAQ,CAAC;IAClE,OAAOpD,QAAQ,CAACf,IAAI;EACtB,CAAC,CAAC,OAAOb,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMkF,iBAAiB,GAAG,MAAAA,CAAOC,MAAM,EAAEH,QAAQ,KAAK;EAC3D,IAAI;IACF,MAAMpD,QAAQ,GAAG,MAAM5C,KAAK,CAACkC,GAAG,CAAC,GAAGjC,OAAO,aAAakG,MAAM,EAAE,EAAEH,QAAQ,CAAC;IAC3E,OAAOpD,QAAQ,CAACf,IAAI;EACtB,CAAC,CAAC,OAAOb,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,+BAA+BmF,MAAM,GAAG,EAAEnF,KAAK,CAAC;IAC9D,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMoF,eAAe,GAAG,MAAOD,MAAM,IAAK;EAC/C,IAAI;IACF,MAAMvD,QAAQ,GAAG,MAAM5C,KAAK,CAACqG,MAAM,CAAC,GAAGpG,OAAO,aAAakG,MAAM,EAAE,CAAC;IACpE,OAAOvD,QAAQ,CAACf,IAAI;EACtB,CAAC,CAAC,OAAOb,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,6BAA6BmF,MAAM,GAAG,EAAEnF,KAAK,CAAC;IAC5D,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMsF,oBAAoB,GAAG,MAAAA,CAAOH,MAAM,EAAEf,MAAM,KAAK;EAC5D,IAAI;IACF,MAAMxC,QAAQ,GAAG,MAAM5C,KAAK,CAACuG,KAAK,CAAC,GAAGtG,OAAO,aAAakG,MAAM,SAAS,EAAE;MAAEf;IAAO,CAAC,CAAC;IACtF,OAAOxC,QAAQ,CAACf,IAAI;EACtB,CAAC,CAAC,OAAOb,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,uCAAuCmF,MAAM,GAAG,EAAEnF,KAAK,CAAC;IACtE,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}