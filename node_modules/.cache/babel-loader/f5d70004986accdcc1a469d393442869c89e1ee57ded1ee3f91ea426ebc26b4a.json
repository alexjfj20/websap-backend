{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\n// adminDashboardService.js - Servicio para gestionar datos del dashboard de administración\nimport axios from 'axios';\n\n// URL base para las llamadas a la API\nconst API_URL = process.env.VUE_APP_API_URL || 'http://localhost:3000/api/admin';\n\n/**\r\n * Obtiene los datos del dashboard de administración\r\n */\nexport const obtenerDatosDashboard = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/dashboard`);\n    return response.data;\n  } catch (error) {\n    console.error('Error al obtener datos del dashboard:', error);\n\n    // Datos de respaldo para mantener la funcionalidad si la API falla\n    const datosDummyDashboard = {\n      success: true,\n      data: {\n        estadisticas: {\n          totalUsuarios: 15,\n          totalRestaurantes: 4,\n          totalPedidos: 120,\n          totalVentas: 3850\n        },\n        graficoVentas: [{\n          mes: 'Ene',\n          ventas: 300\n        }, {\n          mes: 'Feb',\n          ventas: 320\n        }, {\n          mes: 'Mar',\n          ventas: 350\n        }, {\n          mes: 'Abr',\n          ventas: 370\n        }, {\n          mes: 'May',\n          ventas: 400\n        }, {\n          mes: 'Jun',\n          ventas: 450\n        }, {\n          mes: 'Jul',\n          ventas: 480\n        }, {\n          mes: 'Ago',\n          ventas: 520\n        }, {\n          mes: 'Sep',\n          ventas: 550\n        }, {\n          mes: 'Oct',\n          ventas: 600\n        }],\n        restaurantesPopulares: [{\n          nombre: 'Restaurante A',\n          pedidos: 42\n        }, {\n          nombre: 'Restaurante B',\n          pedidos: 30\n        }, {\n          nombre: 'Restaurante C',\n          pedidos: 25\n        }, {\n          nombre: 'Restaurante D',\n          pedidos: 18\n        }, {\n          nombre: 'Restaurante E',\n          pedidos: 12\n        }],\n        usuariosActivos: [{\n          nombre: 'Admin Sistema',\n          rol: 'Superadministrador',\n          ultimoAcceso: '2023-10-15'\n        }, {\n          nombre: 'Juan Pérez',\n          rol: 'Administrador',\n          ultimoAcceso: '2023-10-16'\n        }, {\n          nombre: 'María García',\n          rol: 'Empleado',\n          ultimoAcceso: '2023-10-14'\n        }, {\n          nombre: 'Carlos López',\n          rol: 'Administrador',\n          ultimoAcceso: '2023-10-15'\n        }, {\n          nombre: 'Ana Rodríguez',\n          rol: 'Empleado',\n          ultimoAcceso: '2023-10-13'\n        }]\n      }\n    };\n    console.log('Error en la respuesta del servicio, usando datos de respaldo');\n    return datosDummyDashboard;\n  }\n};\n\n/**\r\n * Obtiene la lista de roles disponibles en el sistema\r\n */\nexport const obtenerRoles = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/roles`);\n    return response.data;\n  } catch (error) {\n    console.error('Error al obtener roles:', error);\n\n    // Datos de respaldo para mantener la funcionalidad\n    const rolesDummy = {\n      success: true,\n      message: 'Roles obtenidos de datos locales',\n      data: [{\n        id: 1,\n        nombre: 'Administrador',\n        descripcion: 'Gestiona el restaurante'\n      }, {\n        id: 2,\n        nombre: 'Empleado',\n        descripcion: 'Atiende pedidos y clientes'\n      }, {\n        id: 3,\n        nombre: 'Superadministrador',\n        descripcion: 'Control total del sistema'\n      }]\n    };\n    return rolesDummy;\n  }\n};\n\n/**\r\n * Obtiene la lista de usuarios\r\n */\nexport const obtenerUsuarios = async (filtros = {}) => {\n  try {\n    // Construir parámetros de búsqueda\n    let params = {};\n    if (filtros.searchTerm) {\n      params.q = filtros.searchTerm;\n    }\n    if (filtros.role) {\n      params.role = filtros.role;\n    }\n    if (filtros.status) {\n      params.status = filtros.status;\n    }\n    const response = await axios.get(`${API_URL}/usuarios`, {\n      params\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error al obtener usuarios:', error);\n\n    // Datos de respaldo para mantener la funcionalidad\n    const usuariosDummy = {\n      success: true,\n      message: 'Usuarios obtenidos de datos locales',\n      data: [{\n        id: 1,\n        nombre: 'Admin',\n        email: 'admin@example.com',\n        roles: ['Superadministrador'],\n        estado: 'activo',\n        fecha_creacion: '2023-01-15T00:00:00.000Z'\n      }, {\n        id: 2,\n        nombre: 'María García',\n        email: 'maria@example.com',\n        roles: ['Administrador'],\n        estado: 'activo',\n        telefono: '3001234567',\n        fecha_creacion: '2023-03-20T00:00:00.000Z'\n      }, {\n        id: 3,\n        nombre: 'Juan Pérez',\n        email: 'juan@example.com',\n        roles: ['Empleado'],\n        estado: 'activo',\n        telefono: '3109876543',\n        fecha_creacion: '2023-05-10T00:00:00.000Z'\n      }, {\n        id: 4,\n        nombre: 'Carlos López',\n        email: 'carlos@example.com',\n        roles: ['Empleado'],\n        estado: 'inactivo',\n        fecha_creacion: '2023-06-05T00:00:00.000Z'\n      }]\n    };\n\n    // Aplicar filtros a los datos dummy si es necesario\n    if (Object.keys(filtros).length > 0) {\n      usuariosDummy.data = usuariosDummy.data.filter(user => {\n        let matches = true;\n\n        // Filtrar por término de búsqueda\n        if (filtros.searchTerm) {\n          const term = filtros.searchTerm.toLowerCase();\n          const matchesName = user.nombre.toLowerCase().includes(term);\n          const matchesEmail = user.email.toLowerCase().includes(term);\n          if (!matchesName && !matchesEmail) {\n            matches = false;\n          }\n        }\n\n        // Filtrar por rol\n        if (filtros.role && !user.roles.includes(filtros.role)) {\n          matches = false;\n        }\n\n        // Filtrar por estado\n        if (filtros.status && user.estado !== filtros.status) {\n          matches = false;\n        }\n        return matches;\n      });\n    }\n    return usuariosDummy;\n  }\n};\n\n/**\r\n * Crea un nuevo usuario\r\n * @param {Object} userData - Datos del usuario a crear\r\n */\nexport const crearUsuario = async userData => {\n  try {\n    const response = await axios.post(`${API_URL}/usuarios`, userData);\n    return response.data;\n  } catch (error) {\n    console.error('Error al crear usuario:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Actualiza un usuario existente\r\n * @param {number|string} userId - ID del usuario a actualizar\r\n * @param {Object} userData - Datos actualizados del usuario\r\n */\nexport const actualizarUsuario = async (userId, userData) => {\n  try {\n    const response = await axios.put(`${API_URL}/usuarios/${userId}`, userData);\n    return response.data;\n  } catch (error) {\n    console.error(`Error al actualizar usuario ${userId}:`, error);\n    throw error;\n  }\n};\n\n/**\r\n * Elimina un usuario\r\n * @param {number|string} userId - ID del usuario a eliminar\r\n */\nexport const eliminarUsuario = async userId => {\n  try {\n    const response = await axios.delete(`${API_URL}/usuarios/${userId}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Error al eliminar usuario ${userId}:`, error);\n    throw error;\n  }\n};\n\n/**\r\n * Cambia el estado de un usuario (activo/inactivo)\r\n * @param {number|string} userId - ID del usuario\r\n * @param {string} estado - Nuevo estado ('activo' o 'inactivo')\r\n */\nexport const cambiarEstadoUsuario = async (userId, estado) => {\n  try {\n    const response = await axios.patch(`${API_URL}/usuarios/${userId}/estado`, {\n      estado\n    });\n    return response.data;\n  } catch (error) {\n    console.error(`Error al cambiar estado del usuario ${userId}:`, error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_URL","process","env","VUE_APP_API_URL","obtenerDatosDashboard","response","get","data","error","console","datosDummyDashboard","success","estadisticas","totalUsuarios","totalRestaurantes","totalPedidos","totalVentas","graficoVentas","mes","ventas","restaurantesPopulares","nombre","pedidos","usuariosActivos","rol","ultimoAcceso","log","obtenerRoles","rolesDummy","message","id","descripcion","obtenerUsuarios","filtros","params","searchTerm","q","role","status","usuariosDummy","email","roles","estado","fecha_creacion","telefono","Object","keys","length","filter","user","matches","term","toLowerCase","matchesName","includes","matchesEmail","crearUsuario","userData","post","actualizarUsuario","userId","put","eliminarUsuario","delete","cambiarEstadoUsuario","patch"],"sources":["F:/Driver google/VUE.JS-2/VUE-JS/websap/src/services/adminDashboardService.js"],"sourcesContent":["// adminDashboardService.js - Servicio para gestionar datos del dashboard de administración\r\nimport axios from 'axios';\r\n\r\n// URL base para las llamadas a la API\r\nconst API_URL = process.env.VUE_APP_API_URL || 'http://localhost:3000/api/admin';\r\n\r\n/**\r\n * Obtiene los datos del dashboard de administración\r\n */\r\nexport const obtenerDatosDashboard = async () => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/dashboard`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error al obtener datos del dashboard:', error);\r\n    \r\n    // Datos de respaldo para mantener la funcionalidad si la API falla\r\n    const datosDummyDashboard = {\r\n      success: true,\r\n      data: {\r\n        estadisticas: {\r\n          totalUsuarios: 15,\r\n          totalRestaurantes: 4,\r\n          totalPedidos: 120,\r\n          totalVentas: 3850\r\n        },\r\n        graficoVentas: [\r\n          { mes: 'Ene', ventas: 300 },\r\n          { mes: 'Feb', ventas: 320 },\r\n          { mes: 'Mar', ventas: 350 },\r\n          { mes: 'Abr', ventas: 370 },\r\n          { mes: 'May', ventas: 400 },\r\n          { mes: 'Jun', ventas: 450 },\r\n          { mes: 'Jul', ventas: 480 },\r\n          { mes: 'Ago', ventas: 520 },\r\n          { mes: 'Sep', ventas: 550 },\r\n          { mes: 'Oct', ventas: 600 }\r\n        ],\r\n        restaurantesPopulares: [\r\n          { nombre: 'Restaurante A', pedidos: 42 },\r\n          { nombre: 'Restaurante B', pedidos: 30 },\r\n          { nombre: 'Restaurante C', pedidos: 25 },\r\n          { nombre: 'Restaurante D', pedidos: 18 },\r\n          { nombre: 'Restaurante E', pedidos: 12 }\r\n        ],\r\n        usuariosActivos: [\r\n          { nombre: 'Admin Sistema', rol: 'Superadministrador', ultimoAcceso: '2023-10-15' },\r\n          { nombre: 'Juan Pérez', rol: 'Administrador', ultimoAcceso: '2023-10-16' },\r\n          { nombre: 'María García', rol: 'Empleado', ultimoAcceso: '2023-10-14' },\r\n          { nombre: 'Carlos López', rol: 'Administrador', ultimoAcceso: '2023-10-15' },\r\n          { nombre: 'Ana Rodríguez', rol: 'Empleado', ultimoAcceso: '2023-10-13' }\r\n        ]\r\n      }\r\n    };\r\n    \r\n    console.log('Error en la respuesta del servicio, usando datos de respaldo');\r\n    return datosDummyDashboard;\r\n  }\r\n};\r\n\r\n/**\r\n * Obtiene la lista de roles disponibles en el sistema\r\n */\r\nexport const obtenerRoles = async () => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/roles`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error al obtener roles:', error);\r\n    \r\n    // Datos de respaldo para mantener la funcionalidad\r\n    const rolesDummy = {\r\n      success: true,\r\n      message: 'Roles obtenidos de datos locales',\r\n      data: [\r\n        { id: 1, nombre: 'Administrador', descripcion: 'Gestiona el restaurante' },\r\n        { id: 2, nombre: 'Empleado', descripcion: 'Atiende pedidos y clientes' },\r\n        { id: 3, nombre: 'Superadministrador', descripcion: 'Control total del sistema' }\r\n      ]\r\n    };\r\n    \r\n    return rolesDummy;\r\n  }\r\n};\r\n\r\n/**\r\n * Obtiene la lista de usuarios\r\n */\r\nexport const obtenerUsuarios = async (filtros = {}) => {\r\n  try {\r\n    // Construir parámetros de búsqueda\r\n    let params = {};\r\n    \r\n    if (filtros.searchTerm) {\r\n      params.q = filtros.searchTerm;\r\n    }\r\n    \r\n    if (filtros.role) {\r\n      params.role = filtros.role;\r\n    }\r\n    \r\n    if (filtros.status) {\r\n      params.status = filtros.status;\r\n    }\r\n    \r\n    const response = await axios.get(`${API_URL}/usuarios`, { params });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error al obtener usuarios:', error);\r\n    \r\n    // Datos de respaldo para mantener la funcionalidad\r\n    const usuariosDummy = {\r\n      success: true,\r\n      message: 'Usuarios obtenidos de datos locales',\r\n      data: [\r\n        { \r\n          id: 1, \r\n          nombre: 'Admin', \r\n          email: 'admin@example.com', \r\n          roles: ['Superadministrador'], \r\n          estado: 'activo',\r\n          fecha_creacion: '2023-01-15T00:00:00.000Z'\r\n        },\r\n        { \r\n          id: 2, \r\n          nombre: 'María García', \r\n          email: 'maria@example.com', \r\n          roles: ['Administrador'], \r\n          estado: 'activo',\r\n          telefono: '3001234567',\r\n          fecha_creacion: '2023-03-20T00:00:00.000Z'\r\n        },\r\n        { \r\n          id: 3, \r\n          nombre: 'Juan Pérez', \r\n          email: 'juan@example.com', \r\n          roles: ['Empleado'], \r\n          estado: 'activo',\r\n          telefono: '3109876543',\r\n          fecha_creacion: '2023-05-10T00:00:00.000Z'\r\n        },\r\n        { \r\n          id: 4, \r\n          nombre: 'Carlos López', \r\n          email: 'carlos@example.com', \r\n          roles: ['Empleado'], \r\n          estado: 'inactivo',\r\n          fecha_creacion: '2023-06-05T00:00:00.000Z'\r\n        }\r\n      ]\r\n    };\r\n    \r\n    // Aplicar filtros a los datos dummy si es necesario\r\n    if (Object.keys(filtros).length > 0) {\r\n      usuariosDummy.data = usuariosDummy.data.filter(user => {\r\n        let matches = true;\r\n        \r\n        // Filtrar por término de búsqueda\r\n        if (filtros.searchTerm) {\r\n          const term = filtros.searchTerm.toLowerCase();\r\n          const matchesName = user.nombre.toLowerCase().includes(term);\r\n          const matchesEmail = user.email.toLowerCase().includes(term);\r\n          if (!matchesName && !matchesEmail) {\r\n            matches = false;\r\n          }\r\n        }\r\n        \r\n        // Filtrar por rol\r\n        if (filtros.role && !user.roles.includes(filtros.role)) {\r\n          matches = false;\r\n        }\r\n        \r\n        // Filtrar por estado\r\n        if (filtros.status && user.estado !== filtros.status) {\r\n          matches = false;\r\n        }\r\n        \r\n        return matches;\r\n      });\r\n    }\r\n    \r\n    return usuariosDummy;\r\n  }\r\n};\r\n\r\n/**\r\n * Crea un nuevo usuario\r\n * @param {Object} userData - Datos del usuario a crear\r\n */\r\nexport const crearUsuario = async (userData) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}/usuarios`, userData);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error al crear usuario:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Actualiza un usuario existente\r\n * @param {number|string} userId - ID del usuario a actualizar\r\n * @param {Object} userData - Datos actualizados del usuario\r\n */\r\nexport const actualizarUsuario = async (userId, userData) => {\r\n  try {\r\n    const response = await axios.put(`${API_URL}/usuarios/${userId}`, userData);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Error al actualizar usuario ${userId}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Elimina un usuario\r\n * @param {number|string} userId - ID del usuario a eliminar\r\n */\r\nexport const eliminarUsuario = async (userId) => {\r\n  try {\r\n    const response = await axios.delete(`${API_URL}/usuarios/${userId}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Error al eliminar usuario ${userId}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Cambia el estado de un usuario (activo/inactivo)\r\n * @param {number|string} userId - ID del usuario\r\n * @param {string} estado - Nuevo estado ('activo' o 'inactivo')\r\n */\r\nexport const cambiarEstadoUsuario = async (userId, estado) => {\r\n  try {\r\n    const response = await axios.patch(`${API_URL}/usuarios/${userId}/estado`, { estado });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Error al cambiar estado del usuario ${userId}:`, error);\r\n    throw error;\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}