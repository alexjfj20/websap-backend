{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport axios from 'axios';\nimport apiConfig from '../config/apiConfig';\n\n// Configuración de API con URL base\nconst API_BASE_URL = apiConfig.API_URL;\n\n// Variable global para trackear el conteo actualizado de usuarios\nlet currentUserCount = 0;\nlet lastUserCountUpdate = null;\n\n// Configuración de IndexedDB\nconst DB_NAME = 'websap-admin-db';\nconst DB_VERSION = 1;\nconst STORE_USERS = 'users';\nconst STORE_ROLES = 'roles';\n\n// Datos dummy para usuarios\nconst dummyUsers = [{\n  id: 1,\n  nombre: 'Administrador',\n  email: 'admin@example.com',\n  roles: ['Superadministrador'],\n  estado: 'activo',\n  fecha_creacion: new Date().toISOString()\n}, {\n  id: 2,\n  nombre: 'Juan Pérez',\n  email: 'juan@example.com',\n  telefono: '3001234567',\n  roles: ['Administrador'],\n  estado: 'activo',\n  fecha_creacion: new Date().toISOString()\n}, {\n  id: 3,\n  nombre: 'María López',\n  email: 'maria@example.com',\n  telefono: '3112345678',\n  roles: ['Empleado'],\n  estado: 'activo',\n  fecha_creacion: new Date().toISOString()\n}, {\n  id: 4,\n  nombre: 'Carlos Rodríguez',\n  email: 'carlos@example.com',\n  roles: ['Empleado'],\n  estado: 'inactivo',\n  fecha_creacion: new Date().toISOString()\n}];\n\n// Datos dummy para roles\nconst dummyRoles = [{\n  id: 1,\n  nombre: 'Superadministrador',\n  descripcion: 'Control total del sistema'\n}, {\n  id: 2,\n  nombre: 'Administrador',\n  descripcion: 'Gestión de usuarios y configuración'\n}, {\n  id: 3,\n  nombre: 'Empleado',\n  descripcion: 'Operaciones básicas'\n}];\n\n// Verificar y crear almacenes necesarios al inicializar la base de datos\nconst ensureStoresExist = db => {\n  if (!db.objectStoreNames.contains(STORE_USERS)) {\n    db.createObjectStore(STORE_USERS, {\n      keyPath: 'id'\n    });\n    console.log(`Almacén '${STORE_USERS}' creado.`);\n  }\n  if (!db.objectStoreNames.contains(STORE_ROLES)) {\n    db.createObjectStore(STORE_ROLES, {\n      keyPath: 'id'\n    });\n    console.log(`Almacén '${STORE_ROLES}' creado.`);\n  }\n};\n\n// Modificar initDB para garantizar la creación de almacenes\nconst initDB = () => {\n  return new Promise((resolve, reject) => {\n    const request = indexedDB.open(DB_NAME, DB_VERSION);\n    request.onupgradeneeded = event => {\n      const db = event.target.result;\n      ensureStoresExist(db);\n    };\n    request.onsuccess = event => {\n      const db = event.target.result;\n      ensureStoresExist(db); // Verificar almacenes en caso de que no se hayan creado\n      resolve(db);\n    };\n    request.onerror = event => {\n      console.error('Error al abrir IndexedDB:', event.target.error);\n      reject(event.target.error);\n    };\n  });\n};\n\n// Guardar datos en IndexedDB\nconst saveToIndexedDB = async (storeName, data) => {\n  try {\n    const db = await initDB();\n    const tx = db.transaction(storeName, 'readwrite');\n    const store = tx.objectStore(storeName);\n\n    // Si es un array, guardar cada elemento\n    if (Array.isArray(data)) {\n      for (const item of data) {\n        store.put(item);\n      }\n    } else {\n      store.put(data);\n    }\n    return new Promise((resolve, reject) => {\n      tx.oncomplete = () => {\n        console.log(`Datos guardados en ${storeName}`);\n        resolve(true);\n      };\n      tx.onerror = event => {\n        console.error(`Error al guardar en ${storeName}:`, event.target.error);\n        reject(event.target.error);\n      };\n    });\n  } catch (error) {\n    console.error(`Error general al guardar en ${storeName}:`, error);\n    return false;\n  }\n};\n\n// Obtener datos de IndexedDB\nconst getFromIndexedDB = async storeName => {\n  try {\n    const db = await initDB();\n    const tx = db.transaction(storeName, 'readonly');\n    const store = tx.objectStore(storeName);\n    return new Promise((resolve, reject) => {\n      const request = store.getAll();\n      request.onsuccess = () => {\n        const items = request.result;\n        console.log(`Recuperados ${items.length} elementos de ${storeName}`);\n        resolve(items);\n      };\n      request.onerror = event => {\n        console.error(`Error al leer de ${storeName}:`, event.target.error);\n        reject(event.target.error);\n      };\n    });\n  } catch (error) {\n    console.error(`Error general al leer de ${storeName}:`, error);\n    return null;\n  }\n};\n\n// Obtener usuarios con la estrategia de tres niveles\nexport const getUsers = async (params = {}) => {\n  try {\n    console.log('Intentando obtener usuarios de la API...');\n    // 1. Intentar obtener de la API usando la URL base configurada\n    const url = `${API_BASE_URL}/admin/usuarios`;\n    console.log(`Conectando a URL: ${url}`);\n    const response = await axios.get(url, {\n      params,\n      timeout: 8000\n    });\n    if (response.data && Array.isArray(response.data.data)) {\n      // Guardar datos en IndexedDB para uso offline\n      await saveToIndexedDB(STORE_USERS, response.data.data);\n\n      // Actualizar conteo global de usuarios\n      currentUserCount = response.data.data.length;\n      lastUserCountUpdate = new Date();\n      console.log(`Contador de usuarios actualizado: ${currentUserCount}`);\n      return {\n        success: true,\n        message: 'Usuarios cargados desde API',\n        data: response.data.data\n      };\n    }\n    throw new Error('Formato de respuesta inválido');\n  } catch (apiError) {\n    console.warn('Error al obtener usuarios de la API:', apiError.message);\n    try {\n      // 2. Intentar obtener de IndexedDB\n      console.log('Intentando obtener usuarios de IndexedDB...');\n      const dbData = await getFromIndexedDB(STORE_USERS);\n      if (dbData && dbData.length > 0) {\n        console.log(`Recuperados ${dbData.length} usuarios de IndexedDB`);\n\n        // Aplicar filtros si los hay\n        let filteredData = [...dbData];\n        if (params.searchTerm) {\n          const searchTerm = params.searchTerm.toLowerCase();\n          filteredData = filteredData.filter(user => user.nombre && user.nombre.toLowerCase().includes(searchTerm) || user.email && user.email.toLowerCase().includes(searchTerm));\n        }\n        if (params.role) {\n          filteredData = filteredData.filter(user => user.roles && Array.isArray(user.roles) && user.roles.includes(params.role));\n        }\n        if (params.status) {\n          filteredData = filteredData.filter(user => user.estado === params.status);\n        }\n        return {\n          success: true,\n          message: 'Usuarios cargados desde almacenamiento local',\n          data: filteredData,\n          source: 'indexeddb'\n        };\n      }\n      throw new Error('No hay datos en almacenamiento local');\n    } catch (dbError) {\n      console.warn('Error al obtener usuarios de IndexedDB:', dbError.message);\n\n      // 3. Usar datos dummy\n      console.log('Usando datos dummy para usuarios');\n\n      // Aplicar filtros a datos dummy\n      let filteredDummy = [...dummyUsers];\n      if (params.searchTerm) {\n        const searchTerm = params.searchTerm.toLowerCase();\n        filteredDummy = filteredDummy.filter(user => user.nombre && user.nombre.toLowerCase().includes(searchTerm) || user.email && user.email.toLowerCase().includes(searchTerm));\n      }\n      if (params.role) {\n        filteredDummy = filteredDummy.filter(user => user.roles && Array.isArray(user.roles) && user.roles.includes(params.role));\n      }\n      if (params.status) {\n        filteredDummy = filteredDummy.filter(user => user.estado === params.status);\n      }\n      return {\n        success: true,\n        message: 'Usando datos de ejemplo',\n        data: filteredDummy,\n        source: 'dummy'\n      };\n    }\n  }\n};\n\n// Obtener el conteo actualizado de usuarios\nexport const getUserCount = async () => {\n  try {\n    // Si tenemos un conteo reciente (menos de 5 minutos), devolverlo\n    if (currentUserCount > 0 && lastUserCountUpdate) {\n      const fiveMinutesAgo = new Date(Date.now() - 5 * 60 * 1000);\n      if (lastUserCountUpdate > fiveMinutesAgo) {\n        console.log(`Devolviendo conteo en caché: ${currentUserCount} usuarios`);\n        return {\n          success: true,\n          count: currentUserCount,\n          source: 'cached'\n        };\n      }\n    }\n\n    // Si no tenemos un conteo reciente, obtener usuarios y contar\n    const usersResponse = await getUsers();\n    if (usersResponse.success && Array.isArray(usersResponse.data)) {\n      currentUserCount = usersResponse.data.length;\n      lastUserCountUpdate = new Date();\n      console.log(`Conteo actualizado: ${currentUserCount} usuarios`);\n      return {\n        success: true,\n        count: currentUserCount,\n        source: usersResponse.source || 'api'\n      };\n    }\n    return {\n      success: false,\n      count: 0,\n      message: 'No se pudo obtener el conteo de usuarios'\n    };\n  } catch (error) {\n    console.error('Error al obtener conteo de usuarios:', error);\n    return {\n      success: false,\n      count: 0,\n      message: 'Error al obtener conteo de usuarios'\n    };\n  }\n};\n\n// Obtener roles con la estrategia de tres niveles\nexport const getRoles = async () => {\n  try {\n    console.log('Intentando obtener roles de la API...');\n    // 1. Intentar obtener de la API usando la URL base configurada\n    const url = `${API_BASE_URL}/admin/roles`;\n    console.log(`Conectando a URL: ${url}`);\n    const response = await axios.get(url, {\n      timeout: 8000\n    });\n    if (response.data && Array.isArray(response.data.data)) {\n      // Guardar datos en IndexedDB para uso offline\n      await saveToIndexedDB(STORE_ROLES, response.data.data);\n      return {\n        success: true,\n        message: 'Roles cargados desde API',\n        data: response.data.data\n      };\n    }\n    throw new Error('Formato de respuesta inválido');\n  } catch (apiError) {\n    console.warn('Error al obtener roles de la API:', apiError.message);\n    try {\n      // 2. Intentar obtener de IndexedDB\n      console.log('Intentando obtener roles de IndexedDB...');\n      const dbData = await getFromIndexedDB(STORE_ROLES);\n      if (dbData && dbData.length > 0) {\n        console.log(`Recuperados ${dbData.length} roles de IndexedDB`);\n        return {\n          success: true,\n          message: 'Roles cargados desde almacenamiento local',\n          data: dbData,\n          source: 'indexeddb'\n        };\n      }\n      throw new Error('No hay datos en almacenamiento local');\n    } catch (dbError) {\n      console.warn('Error al obtener roles de IndexedDB:', dbError.message);\n\n      // 3. Usar datos dummy\n      console.log('Usando datos dummy para roles');\n      return {\n        success: true,\n        message: 'Usando datos de ejemplo',\n        data: dummyRoles,\n        source: 'dummy'\n      };\n    }\n  }\n};\n\n// Crear usuario\nexport const createUser = async userData => {\n  try {\n    const url = `${API_BASE_URL}/admin/usuarios`;\n    console.log(`Conectando a URL: ${url}`);\n    const response = await axios.post(url, userData);\n    if (response.data && response.data.success) {\n      // Si se creó exitosamente, añadir a IndexedDB\n      if (response.data.data) {\n        await saveToIndexedDB(STORE_USERS, response.data.data);\n      }\n      return response.data;\n    }\n    throw new Error(response.data?.message || 'Error al crear usuario');\n  } catch (error) {\n    console.error('Error al crear usuario:', error);\n    throw error;\n  }\n};\n\n// Actualizar usuario\nexport const updateUser = async (userId, userData) => {\n  try {\n    const url = `${API_BASE_URL}/admin/usuarios/${userId}`;\n    console.log(`Conectando a URL: ${url}`);\n    const response = await axios.put(url, userData);\n    if (response.data && response.data.success) {\n      // Si se actualizó exitosamente, actualizar en IndexedDB\n      try {\n        const db = await initDB();\n        const tx = db.transaction(STORE_USERS, 'readwrite');\n        const store = tx.objectStore(STORE_USERS);\n\n        // Primero obtenemos el usuario existente\n        const getRequest = store.get(userId);\n        getRequest.onsuccess = () => {\n          const existingUser = getRequest.result;\n          if (existingUser) {\n            // Actualizar solo los campos que vienen en userData\n            const updatedUser = {\n              ...existingUser,\n              ...userData\n            };\n            store.put(updatedUser);\n          }\n        };\n      } catch (dbError) {\n        console.warn('Error al actualizar usuario en IndexedDB:', dbError);\n      }\n      return response.data;\n    }\n    throw new Error(response.data?.message || 'Error al actualizar usuario');\n  } catch (error) {\n    console.error('Error al actualizar usuario:', error);\n    throw error;\n  }\n};\n\n// Cambiar estado de usuario\nexport const cambiarEstadoUsuario = async (userId, estado) => {\n  try {\n    const url = `${API_BASE_URL}/admin/usuarios/${userId}/estado`;\n    console.log(`Conectando a URL: ${url}`);\n    const response = await axios.patch(url, {\n      estado\n    });\n    if (response.data && response.data.success) {\n      // Si se actualizó exitosamente, actualizar en IndexedDB\n      try {\n        const db = await initDB();\n        const tx = db.transaction(STORE_USERS, 'readwrite');\n        const store = tx.objectStore(STORE_USERS);\n\n        // Primero obtenemos el usuario existente\n        const getRequest = store.get(userId);\n        getRequest.onsuccess = () => {\n          const existingUser = getRequest.result;\n          if (existingUser) {\n            // Actualizar solo el campo estado\n            existingUser.estado = estado;\n            store.put(existingUser);\n          }\n        };\n      } catch (dbError) {\n        console.warn('Error al actualizar estado de usuario en IndexedDB:', dbError);\n      }\n      return response.data;\n    }\n    throw new Error(response.data?.message || 'Error al cambiar estado del usuario');\n  } catch (error) {\n    console.error('Error al cambiar estado de usuario:', error);\n    throw error;\n  }\n};\n\n// Eliminar usuario\nexport const deleteUser = async userId => {\n  try {\n    const url = `${API_BASE_URL}/admin/usuarios/${userId}`;\n    console.log(`Conectando a URL: ${url}`);\n    const response = await axios.delete(url);\n    if (response.data && response.data.success) {\n      // Si se eliminó exitosamente, eliminar de IndexedDB\n      try {\n        const db = await initDB();\n        const tx = db.transaction(STORE_USERS, 'readwrite');\n        const store = tx.objectStore(STORE_USERS);\n        store.delete(userId);\n      } catch (dbError) {\n        console.warn('Error al eliminar usuario de IndexedDB:', dbError);\n      }\n      return response.data;\n    }\n    throw new Error(response.data?.message || 'Error al eliminar usuario');\n  } catch (error) {\n    console.error('Error al eliminar usuario:', error);\n    throw error;\n  }\n};\n\n// Obtener datos del dashboard con conteo actualizado de usuarios\nexport const obtenerDatosDashboard = async () => {\n  try {\n    console.log('Obteniendo datos para el dashboard...');\n\n    // Obtenemos el conteo actualizado de usuarios\n    const userCountResult = await getUserCount();\n    const totalUsuarios = userCountResult.success ? userCountResult.count : 0;\n    console.log(`Dashboard utilizando conteo de usuarios: ${totalUsuarios}`);\n\n    // Datos simulados para el dashboard\n    return {\n      success: true,\n      data: {\n        estadisticas: {\n          totalUsuarios: totalUsuarios,\n          totalRestaurantes: 35,\n          totalPedidos: 128,\n          totalVentas: 4750000\n        },\n        graficoVentas: [{\n          mes: 'Ene',\n          ventas: 450000\n        }, {\n          mes: 'Feb',\n          ventas: 520000\n        }, {\n          mes: 'Mar',\n          ventas: 480000\n        }, {\n          mes: 'Abr',\n          ventas: 620000\n        }, {\n          mes: 'May',\n          ventas: 580000\n        }, {\n          mes: 'Jun',\n          ventas: 630000\n        }],\n        restaurantesPopulares: [{\n          nombre: 'Restaurante A',\n          pedidos: 42\n        }, {\n          nombre: 'Restaurante B',\n          pedidos: 38\n        }, {\n          nombre: 'Restaurante C',\n          pedidos: 27\n        }, {\n          nombre: 'Restaurante D',\n          pedidos: 21\n        }, {\n          nombre: 'Restaurante E',\n          pedidos: 18\n        }],\n        usuariosActivos: [{\n          nombre: 'Juan Pérez',\n          rol: 'Administrador',\n          ultimoAcceso: new Date().toISOString()\n        }, {\n          nombre: 'María López',\n          rol: 'Empleado',\n          ultimoAcceso: new Date().toISOString()\n        }, {\n          nombre: 'Carlos Rodríguez',\n          rol: 'Empleado',\n          ultimoAcceso: new Date().toISOString()\n        }],\n        fechaActualizacion: new Date().toISOString()\n      },\n      message: 'Datos del dashboard obtenidos correctamente'\n    };\n  } catch (error) {\n    console.error('Error al obtener datos del dashboard:', error);\n    return {\n      success: false,\n      message: 'Error al obtener datos del dashboard',\n      error: error.message\n    };\n  }\n};\n\n// Exportar servicios para Admin Dashboard con alias\nexport { getUsers as obtenerUsuarios, getRoles as obtenerRoles };\n\n// Exportación por defecto para compatibilidad\nconst adminService = {\n  getUsers,\n  getRoles,\n  createUser,\n  updateUser,\n  cambiarEstadoUsuario,\n  deleteUser\n};\nexport default adminService;","map":{"version":3,"names":["axios","apiConfig","API_BASE_URL","API_URL","currentUserCount","lastUserCountUpdate","DB_NAME","DB_VERSION","STORE_USERS","STORE_ROLES","dummyUsers","id","nombre","email","roles","estado","fecha_creacion","Date","toISOString","telefono","dummyRoles","descripcion","ensureStoresExist","db","objectStoreNames","contains","createObjectStore","keyPath","console","log","initDB","Promise","resolve","reject","request","indexedDB","open","onupgradeneeded","event","target","result","onsuccess","onerror","error","saveToIndexedDB","storeName","data","tx","transaction","store","objectStore","Array","isArray","item","put","oncomplete","getFromIndexedDB","getAll","items","length","getUsers","params","url","response","get","timeout","success","message","Error","apiError","warn","dbData","filteredData","searchTerm","toLowerCase","filter","user","includes","role","status","source","dbError","filteredDummy","getUserCount","fiveMinutesAgo","now","count","usersResponse","getRoles","createUser","userData","post","updateUser","userId","getRequest","existingUser","updatedUser","cambiarEstadoUsuario","patch","deleteUser","delete","obtenerDatosDashboard","userCountResult","totalUsuarios","estadisticas","totalRestaurantes","totalPedidos","totalVentas","graficoVentas","mes","ventas","restaurantesPopulares","pedidos","usuariosActivos","rol","ultimoAcceso","fechaActualizacion","obtenerUsuarios","obtenerRoles","adminService"],"sources":["F:/Driver google/VUE.JS-2/VUE-JS/websap/src/services/adminDashboardService.js"],"sourcesContent":["import axios from 'axios';\r\nimport apiConfig from '../config/apiConfig';\r\n\r\n// Configuración de API con URL base\r\nconst API_BASE_URL = apiConfig.API_URL;\r\n\r\n// Variable global para trackear el conteo actualizado de usuarios\r\nlet currentUserCount = 0;\r\nlet lastUserCountUpdate = null;\r\n\r\n// Configuración de IndexedDB\r\nconst DB_NAME = 'websap-admin-db';\r\nconst DB_VERSION = 1;\r\nconst STORE_USERS = 'users';\r\nconst STORE_ROLES = 'roles';\r\n\r\n// Datos dummy para usuarios\r\nconst dummyUsers = [\r\n  {\r\n    id: 1,\r\n    nombre: 'Administrador',\r\n    email: 'admin@example.com',\r\n    roles: ['Superadministrador'],\r\n    estado: 'activo',\r\n    fecha_creacion: new Date().toISOString()\r\n  },\r\n  {\r\n    id: 2,\r\n    nombre: 'Juan Pérez',\r\n    email: 'juan@example.com',\r\n    telefono: '3001234567',\r\n    roles: ['Administrador'],\r\n    estado: 'activo',\r\n    fecha_creacion: new Date().toISOString()\r\n  },\r\n  {\r\n    id: 3,\r\n    nombre: 'María López',\r\n    email: 'maria@example.com',\r\n    telefono: '3112345678',\r\n    roles: ['Empleado'],\r\n    estado: 'activo',\r\n    fecha_creacion: new Date().toISOString()\r\n  },\r\n  {\r\n    id: 4,\r\n    nombre: 'Carlos Rodríguez',\r\n    email: 'carlos@example.com',\r\n    roles: ['Empleado'],\r\n    estado: 'inactivo',\r\n    fecha_creacion: new Date().toISOString()\r\n  }\r\n];\r\n\r\n// Datos dummy para roles\r\nconst dummyRoles = [\r\n  { id: 1, nombre: 'Superadministrador', descripcion: 'Control total del sistema' },\r\n  { id: 2, nombre: 'Administrador', descripcion: 'Gestión de usuarios y configuración' },\r\n  { id: 3, nombre: 'Empleado', descripcion: 'Operaciones básicas' }\r\n];\r\n\r\n// Verificar y crear almacenes necesarios al inicializar la base de datos\r\nconst ensureStoresExist = (db) => {\r\n  if (!db.objectStoreNames.contains(STORE_USERS)) {\r\n    db.createObjectStore(STORE_USERS, { keyPath: 'id' });\r\n    console.log(`Almacén '${STORE_USERS}' creado.`);\r\n  }\r\n  if (!db.objectStoreNames.contains(STORE_ROLES)) {\r\n    db.createObjectStore(STORE_ROLES, { keyPath: 'id' });\r\n    console.log(`Almacén '${STORE_ROLES}' creado.`);\r\n  }\r\n};\r\n\r\n// Modificar initDB para garantizar la creación de almacenes\r\nconst initDB = () => {\r\n  return new Promise((resolve, reject) => {\r\n    const request = indexedDB.open(DB_NAME, DB_VERSION);\r\n\r\n    request.onupgradeneeded = (event) => {\r\n      const db = event.target.result;\r\n      ensureStoresExist(db);\r\n    };\r\n\r\n    request.onsuccess = (event) => {\r\n      const db = event.target.result;\r\n      ensureStoresExist(db); // Verificar almacenes en caso de que no se hayan creado\r\n      resolve(db);\r\n    };\r\n\r\n    request.onerror = (event) => {\r\n      console.error('Error al abrir IndexedDB:', event.target.error);\r\n      reject(event.target.error);\r\n    };\r\n  });\r\n};\r\n\r\n// Guardar datos en IndexedDB\r\nconst saveToIndexedDB = async (storeName, data) => {\r\n  try {\r\n    const db = await initDB();\r\n    const tx = db.transaction(storeName, 'readwrite');\r\n    const store = tx.objectStore(storeName);\r\n    \r\n    // Si es un array, guardar cada elemento\r\n    if (Array.isArray(data)) {\r\n      for (const item of data) {\r\n        store.put(item);\r\n      }\r\n    } else {\r\n      store.put(data);\r\n    }\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      tx.oncomplete = () => {\r\n        console.log(`Datos guardados en ${storeName}`);\r\n        resolve(true);\r\n      };\r\n      \r\n      tx.onerror = (event) => {\r\n        console.error(`Error al guardar en ${storeName}:`, event.target.error);\r\n        reject(event.target.error);\r\n      };\r\n    });\r\n  } catch (error) {\r\n    console.error(`Error general al guardar en ${storeName}:`, error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Obtener datos de IndexedDB\r\nconst getFromIndexedDB = async (storeName) => {\r\n  try {\r\n    const db = await initDB();\r\n    const tx = db.transaction(storeName, 'readonly');\r\n    const store = tx.objectStore(storeName);\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      const request = store.getAll();\r\n      \r\n      request.onsuccess = () => {\r\n        const items = request.result;\r\n        console.log(`Recuperados ${items.length} elementos de ${storeName}`);\r\n        resolve(items);\r\n      };\r\n      \r\n      request.onerror = (event) => {\r\n        console.error(`Error al leer de ${storeName}:`, event.target.error);\r\n        reject(event.target.error);\r\n      };\r\n    });\r\n  } catch (error) {\r\n    console.error(`Error general al leer de ${storeName}:`, error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// Obtener usuarios con la estrategia de tres niveles\r\nexport const getUsers = async (params = {}) => {\r\n  try {\r\n    console.log('Intentando obtener usuarios de la API...');\r\n    // 1. Intentar obtener de la API usando la URL base configurada\r\n    const url = `${API_BASE_URL}/admin/usuarios`;\r\n    console.log(`Conectando a URL: ${url}`);\r\n    const response = await axios.get(url, { params, timeout: 8000 });\r\n    \r\n    if (response.data && Array.isArray(response.data.data)) {\r\n      // Guardar datos en IndexedDB para uso offline\r\n      await saveToIndexedDB(STORE_USERS, response.data.data);\r\n      \r\n      // Actualizar conteo global de usuarios\r\n      currentUserCount = response.data.data.length;\r\n      lastUserCountUpdate = new Date();\r\n      console.log(`Contador de usuarios actualizado: ${currentUserCount}`);\r\n      \r\n      return {\r\n        success: true,\r\n        message: 'Usuarios cargados desde API',\r\n        data: response.data.data\r\n      };\r\n    }\r\n    \r\n    throw new Error('Formato de respuesta inválido');\r\n    \r\n  } catch (apiError) {\r\n    console.warn('Error al obtener usuarios de la API:', apiError.message);\r\n    \r\n    try {\r\n      // 2. Intentar obtener de IndexedDB\r\n      console.log('Intentando obtener usuarios de IndexedDB...');\r\n      const dbData = await getFromIndexedDB(STORE_USERS);\r\n      \r\n      if (dbData && dbData.length > 0) {\r\n        console.log(`Recuperados ${dbData.length} usuarios de IndexedDB`);\r\n        \r\n        // Aplicar filtros si los hay\r\n        let filteredData = [...dbData];\r\n        \r\n        if (params.searchTerm) {\r\n          const searchTerm = params.searchTerm.toLowerCase();\r\n          filteredData = filteredData.filter(user => \r\n            (user.nombre && user.nombre.toLowerCase().includes(searchTerm)) ||\r\n            (user.email && user.email.toLowerCase().includes(searchTerm))\r\n          );\r\n        }\r\n        \r\n        if (params.role) {\r\n          filteredData = filteredData.filter(user => \r\n            user.roles && Array.isArray(user.roles) && user.roles.includes(params.role)\r\n          );\r\n        }\r\n        \r\n        if (params.status) {\r\n          filteredData = filteredData.filter(user => user.estado === params.status);\r\n        }\r\n        \r\n        return {\r\n          success: true,\r\n          message: 'Usuarios cargados desde almacenamiento local',\r\n          data: filteredData,\r\n          source: 'indexeddb'\r\n        };\r\n      }\r\n      \r\n      throw new Error('No hay datos en almacenamiento local');\r\n      \r\n    } catch (dbError) {\r\n      console.warn('Error al obtener usuarios de IndexedDB:', dbError.message);\r\n      \r\n      // 3. Usar datos dummy\r\n      console.log('Usando datos dummy para usuarios');\r\n      \r\n      // Aplicar filtros a datos dummy\r\n      let filteredDummy = [...dummyUsers];\r\n      \r\n      if (params.searchTerm) {\r\n        const searchTerm = params.searchTerm.toLowerCase();\r\n        filteredDummy = filteredDummy.filter(user => \r\n          (user.nombre && user.nombre.toLowerCase().includes(searchTerm)) ||\r\n          (user.email && user.email.toLowerCase().includes(searchTerm))\r\n        );\r\n      }\r\n      \r\n      if (params.role) {\r\n        filteredDummy = filteredDummy.filter(user => \r\n          user.roles && Array.isArray(user.roles) && user.roles.includes(params.role)\r\n        );\r\n      }\r\n      \r\n      if (params.status) {\r\n        filteredDummy = filteredDummy.filter(user => user.estado === params.status);\r\n      }\r\n      \r\n      return {\r\n        success: true,\r\n        message: 'Usando datos de ejemplo',\r\n        data: filteredDummy,\r\n        source: 'dummy'\r\n      };\r\n    }\r\n  }\r\n};\r\n\r\n// Obtener el conteo actualizado de usuarios\r\nexport const getUserCount = async () => {\r\n  try {\r\n    // Si tenemos un conteo reciente (menos de 5 minutos), devolverlo\r\n    if (currentUserCount > 0 && lastUserCountUpdate) {\r\n      const fiveMinutesAgo = new Date(Date.now() - 5 * 60 * 1000);\r\n      if (lastUserCountUpdate > fiveMinutesAgo) {\r\n        console.log(`Devolviendo conteo en caché: ${currentUserCount} usuarios`);\r\n        return {\r\n          success: true,\r\n          count: currentUserCount,\r\n          source: 'cached'\r\n        };\r\n      }\r\n    }\r\n    \r\n    // Si no tenemos un conteo reciente, obtener usuarios y contar\r\n    const usersResponse = await getUsers();\r\n    \r\n    if (usersResponse.success && Array.isArray(usersResponse.data)) {\r\n      currentUserCount = usersResponse.data.length;\r\n      lastUserCountUpdate = new Date();\r\n      console.log(`Conteo actualizado: ${currentUserCount} usuarios`);\r\n      \r\n      return {\r\n        success: true,\r\n        count: currentUserCount,\r\n        source: usersResponse.source || 'api'\r\n      };\r\n    }\r\n    \r\n    return {\r\n      success: false,\r\n      count: 0,\r\n      message: 'No se pudo obtener el conteo de usuarios'\r\n    };\r\n  } catch (error) {\r\n    console.error('Error al obtener conteo de usuarios:', error);\r\n    return {\r\n      success: false,\r\n      count: 0,\r\n      message: 'Error al obtener conteo de usuarios'\r\n    };\r\n  }\r\n};\r\n\r\n// Obtener roles con la estrategia de tres niveles\r\nexport const getRoles = async () => {  try {\r\n    console.log('Intentando obtener roles de la API...');\r\n    // 1. Intentar obtener de la API usando la URL base configurada\r\n    const url = `${API_BASE_URL}/admin/roles`;\r\n    console.log(`Conectando a URL: ${url}`);\r\n    const response = await axios.get(url, { timeout: 8000 });\r\n    \r\n    if (response.data && Array.isArray(response.data.data)) {\r\n      // Guardar datos en IndexedDB para uso offline\r\n      await saveToIndexedDB(STORE_ROLES, response.data.data);\r\n      \r\n      return {\r\n        success: true,\r\n        message: 'Roles cargados desde API',\r\n        data: response.data.data\r\n      };\r\n    }\r\n    \r\n    throw new Error('Formato de respuesta inválido');\r\n    \r\n  } catch (apiError) {\r\n    console.warn('Error al obtener roles de la API:', apiError.message);\r\n    \r\n    try {\r\n      // 2. Intentar obtener de IndexedDB\r\n      console.log('Intentando obtener roles de IndexedDB...');\r\n      const dbData = await getFromIndexedDB(STORE_ROLES);\r\n      \r\n      if (dbData && dbData.length > 0) {\r\n        console.log(`Recuperados ${dbData.length} roles de IndexedDB`);\r\n        \r\n        return {\r\n          success: true,\r\n          message: 'Roles cargados desde almacenamiento local',\r\n          data: dbData,\r\n          source: 'indexeddb'\r\n        };\r\n      }\r\n      \r\n      throw new Error('No hay datos en almacenamiento local');\r\n      \r\n    } catch (dbError) {\r\n      console.warn('Error al obtener roles de IndexedDB:', dbError.message);\r\n      \r\n      // 3. Usar datos dummy\r\n      console.log('Usando datos dummy para roles');\r\n      \r\n      return {\r\n        success: true,\r\n        message: 'Usando datos de ejemplo',\r\n        data: dummyRoles,\r\n        source: 'dummy'\r\n      };\r\n    }\r\n  }\r\n};\r\n\r\n// Crear usuario\r\nexport const createUser = async (userData) => {\r\n  try {\r\n    const url = `${API_BASE_URL}/admin/usuarios`;\r\n    console.log(`Conectando a URL: ${url}`);\r\n    const response = await axios.post(url, userData);\r\n    \r\n    if (response.data && response.data.success) {\r\n      // Si se creó exitosamente, añadir a IndexedDB\r\n      if (response.data.data) {\r\n        await saveToIndexedDB(STORE_USERS, response.data.data);\r\n      }\r\n      \r\n      return response.data;\r\n    }\r\n    \r\n    throw new Error(response.data?.message || 'Error al crear usuario');\r\n  } catch (error) {\r\n    console.error('Error al crear usuario:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Actualizar usuario\r\nexport const updateUser = async (userId, userData) => {\r\n  try {\r\n    const url = `${API_BASE_URL}/admin/usuarios/${userId}`;\r\n    console.log(`Conectando a URL: ${url}`);\r\n    const response = await axios.put(url, userData);\r\n    \r\n    if (response.data && response.data.success) {\r\n      // Si se actualizó exitosamente, actualizar en IndexedDB\r\n      try {\r\n        const db = await initDB();\r\n        const tx = db.transaction(STORE_USERS, 'readwrite');\r\n        const store = tx.objectStore(STORE_USERS);\r\n        \r\n        // Primero obtenemos el usuario existente\r\n        const getRequest = store.get(userId);\r\n        \r\n        getRequest.onsuccess = () => {\r\n          const existingUser = getRequest.result;\r\n          if (existingUser) {\r\n            // Actualizar solo los campos que vienen en userData\r\n            const updatedUser = { ...existingUser, ...userData };\r\n            store.put(updatedUser);\r\n          }\r\n        };\r\n      } catch (dbError) {\r\n        console.warn('Error al actualizar usuario en IndexedDB:', dbError);\r\n      }\r\n      \r\n      return response.data;\r\n    }\r\n    \r\n    throw new Error(response.data?.message || 'Error al actualizar usuario');\r\n  } catch (error) {\r\n    console.error('Error al actualizar usuario:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Cambiar estado de usuario\r\nexport const cambiarEstadoUsuario = async (userId, estado) => {\r\n  try {\r\n    const url = `${API_BASE_URL}/admin/usuarios/${userId}/estado`;\r\n    console.log(`Conectando a URL: ${url}`);\r\n    const response = await axios.patch(url, { estado });\r\n    \r\n    if (response.data && response.data.success) {\r\n      // Si se actualizó exitosamente, actualizar en IndexedDB\r\n      try {\r\n        const db = await initDB();\r\n        const tx = db.transaction(STORE_USERS, 'readwrite');\r\n        const store = tx.objectStore(STORE_USERS);\r\n        \r\n        // Primero obtenemos el usuario existente\r\n        const getRequest = store.get(userId);\r\n        \r\n        getRequest.onsuccess = () => {\r\n          const existingUser = getRequest.result;\r\n          if (existingUser) {\r\n            // Actualizar solo el campo estado\r\n            existingUser.estado = estado;\r\n            store.put(existingUser);\r\n          }\r\n        };\r\n      } catch (dbError) {\r\n        console.warn('Error al actualizar estado de usuario en IndexedDB:', dbError);\r\n      }\r\n      \r\n      return response.data;\r\n    }\r\n    \r\n    throw new Error(response.data?.message || 'Error al cambiar estado del usuario');\r\n  } catch (error) {\r\n    console.error('Error al cambiar estado de usuario:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Eliminar usuario\r\nexport const deleteUser = async (userId) => {\r\n  try {\r\n    const url = `${API_BASE_URL}/admin/usuarios/${userId}`;\r\n    console.log(`Conectando a URL: ${url}`);\r\n    const response = await axios.delete(url);\r\n    \r\n    if (response.data && response.data.success) {\r\n      // Si se eliminó exitosamente, eliminar de IndexedDB\r\n      try {\r\n        const db = await initDB();\r\n        const tx = db.transaction(STORE_USERS, 'readwrite');\r\n        const store = tx.objectStore(STORE_USERS);\r\n        store.delete(userId);\r\n      } catch (dbError) {\r\n        console.warn('Error al eliminar usuario de IndexedDB:', dbError);\r\n      }\r\n      \r\n      return response.data;\r\n    }\r\n    \r\n    throw new Error(response.data?.message || 'Error al eliminar usuario');\r\n  } catch (error) {\r\n    console.error('Error al eliminar usuario:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Obtener datos del dashboard con conteo actualizado de usuarios\r\nexport const obtenerDatosDashboard = async () => {\r\n  try {\r\n    console.log('Obteniendo datos para el dashboard...');\r\n    \r\n    // Obtenemos el conteo actualizado de usuarios\r\n    const userCountResult = await getUserCount();\r\n    const totalUsuarios = userCountResult.success ? userCountResult.count : 0;\r\n    \r\n    console.log(`Dashboard utilizando conteo de usuarios: ${totalUsuarios}`);\r\n    \r\n    // Datos simulados para el dashboard\r\n    return {\r\n      success: true,\r\n      data: {\r\n        estadisticas: {\r\n          totalUsuarios: totalUsuarios,\r\n          totalRestaurantes: 35,\r\n          totalPedidos: 128,\r\n          totalVentas: 4750000\r\n        },\r\n        graficoVentas: [\r\n          { mes: 'Ene', ventas: 450000 },\r\n          { mes: 'Feb', ventas: 520000 },\r\n          { mes: 'Mar', ventas: 480000 },\r\n          { mes: 'Abr', ventas: 620000 },\r\n          { mes: 'May', ventas: 580000 },\r\n          { mes: 'Jun', ventas: 630000 }\r\n        ],\r\n        restaurantesPopulares: [\r\n          { nombre: 'Restaurante A', pedidos: 42 },\r\n          { nombre: 'Restaurante B', pedidos: 38 },\r\n          { nombre: 'Restaurante C', pedidos: 27 },\r\n          { nombre: 'Restaurante D', pedidos: 21 },\r\n          { nombre: 'Restaurante E', pedidos: 18 }\r\n        ],\r\n        usuariosActivos: [\r\n          { nombre: 'Juan Pérez', rol: 'Administrador', ultimoAcceso: new Date().toISOString() },\r\n          { nombre: 'María López', rol: 'Empleado', ultimoAcceso: new Date().toISOString() },\r\n          { nombre: 'Carlos Rodríguez', rol: 'Empleado', ultimoAcceso: new Date().toISOString() }\r\n        ],\r\n        fechaActualizacion: new Date().toISOString()\r\n      },\r\n      message: 'Datos del dashboard obtenidos correctamente'\r\n    };\r\n  } catch (error) {\r\n    console.error('Error al obtener datos del dashboard:', error);\r\n    return {\r\n      success: false,\r\n      message: 'Error al obtener datos del dashboard',\r\n      error: error.message\r\n    };\r\n  }\r\n};\r\n\r\n// Exportar servicios para Admin Dashboard con alias\r\nexport {\r\n  getUsers as obtenerUsuarios,\r\n  getRoles as obtenerRoles\r\n};\r\n\r\n// Exportación por defecto para compatibilidad\r\nconst adminService = {\r\n  getUsers,\r\n  getRoles,\r\n  createUser,\r\n  updateUser,\r\n  cambiarEstadoUsuario,\r\n  deleteUser\r\n};\r\n\r\nexport default adminService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}