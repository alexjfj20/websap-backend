{"version":3,"file":"js/982.e8f118a2.js","mappings":"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","sources":["webpack://websap/./node_modules/core-js/internals/iterate-simple.js","webpack://websap/./node_modules/core-js/modules/es.set.union.v2.js","webpack://websap/./node_modules/core-js/modules/es.set.is-superset-of.v2.js","webpack://websap/./node_modules/core-js/internals/set-difference.js","webpack://websap/./node_modules/core-js/internals/set-symmetric-difference.js","webpack://websap/./node_modules/core-js/internals/get-set-record.js","webpack://websap/./node_modules/core-js/internals/set-is-subset-of.js","webpack://websap/./node_modules/core-js/modules/es.set.is-disjoint-from.v2.js","webpack://websap/./node_modules/core-js/internals/set-union.js","webpack://websap/./node_modules/core-js/internals/set-helpers.js","webpack://websap/./node_modules/core-js/internals/set-is-disjoint-from.js","webpack://websap/./node_modules/core-js/internals/set-method-accept-set-like.js","webpack://websap/./node_modules/core-js/modules/es.set.symmetric-difference.v2.js","webpack://websap/./node_modules/core-js/internals/set-size.js","webpack://websap/./node_modules/core-js/modules/es.set.is-subset-of.v2.js","webpack://websap/./node_modules/core-js/internals/a-set.js","webpack://websap/./node_modules/core-js/modules/es.set.difference.v2.js","webpack://websap/./node_modules/core-js/modules/es.set.intersection.v2.js","webpack://websap/./node_modules/core-js/internals/set-iterate.js","webpack://websap/./node_modules/core-js/internals/set-is-superset-of.js","webpack://websap/./node_modules/core-js/internals/set-intersection.js","webpack://websap/./src/services/storageService.js","webpack://websap/./node_modules/core-js/internals/set-clone.js"],"sourcesContent":["'use strict';\nvar call = require('../internals/function-call');\n\nmodule.exports = function (record, fn, ITERATOR_INSTEAD_OF_RECORD) {\n  var iterator = ITERATOR_INSTEAD_OF_RECORD ? record : record.iterator;\n  var next = record.next;\n  var step, result;\n  while (!(step = call(next, iterator)).done) {\n    result = fn(step.value);\n    if (result !== undefined) return result;\n  }\n};\n","'use strict';\nvar $ = require('../internals/export');\nvar union = require('../internals/set-union');\nvar setMethodAcceptSetLike = require('../internals/set-method-accept-set-like');\n\n// `Set.prototype.union` method\n// https://tc39.es/ecma262/#sec-set.prototype.union\n$({ target: 'Set', proto: true, real: true, forced: !setMethodAcceptSetLike('union') }, {\n  union: union\n});\n","'use strict';\nvar $ = require('../internals/export');\nvar isSupersetOf = require('../internals/set-is-superset-of');\nvar setMethodAcceptSetLike = require('../internals/set-method-accept-set-like');\n\nvar INCORRECT = !setMethodAcceptSetLike('isSupersetOf', function (result) {\n  return !result;\n});\n\n// `Set.prototype.isSupersetOf` method\n// https://tc39.es/ecma262/#sec-set.prototype.issupersetof\n$({ target: 'Set', proto: true, real: true, forced: INCORRECT }, {\n  isSupersetOf: isSupersetOf\n});\n","'use strict';\nvar aSet = require('../internals/a-set');\nvar SetHelpers = require('../internals/set-helpers');\nvar clone = require('../internals/set-clone');\nvar size = require('../internals/set-size');\nvar getSetRecord = require('../internals/get-set-record');\nvar iterateSet = require('../internals/set-iterate');\nvar iterateSimple = require('../internals/iterate-simple');\n\nvar has = SetHelpers.has;\nvar remove = SetHelpers.remove;\n\n// `Set.prototype.difference` method\n// https://github.com/tc39/proposal-set-methods\nmodule.exports = function difference(other) {\n  var O = aSet(this);\n  var otherRec = getSetRecord(other);\n  var result = clone(O);\n  if (size(O) <= otherRec.size) iterateSet(O, function (e) {\n    if (otherRec.includes(e)) remove(result, e);\n  });\n  else iterateSimple(otherRec.getIterator(), function (e) {\n    if (has(O, e)) remove(result, e);\n  });\n  return result;\n};\n","'use strict';\nvar aSet = require('../internals/a-set');\nvar SetHelpers = require('../internals/set-helpers');\nvar clone = require('../internals/set-clone');\nvar getSetRecord = require('../internals/get-set-record');\nvar iterateSimple = require('../internals/iterate-simple');\n\nvar add = SetHelpers.add;\nvar has = SetHelpers.has;\nvar remove = SetHelpers.remove;\n\n// `Set.prototype.symmetricDifference` method\n// https://github.com/tc39/proposal-set-methods\nmodule.exports = function symmetricDifference(other) {\n  var O = aSet(this);\n  var keysIter = getSetRecord(other).getIterator();\n  var result = clone(O);\n  iterateSimple(keysIter, function (e) {\n    if (has(O, e)) remove(result, e);\n    else add(result, e);\n  });\n  return result;\n};\n","'use strict';\nvar aCallable = require('../internals/a-callable');\nvar anObject = require('../internals/an-object');\nvar call = require('../internals/function-call');\nvar toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\nvar getIteratorDirect = require('../internals/get-iterator-direct');\n\nvar INVALID_SIZE = 'Invalid size';\nvar $RangeError = RangeError;\nvar $TypeError = TypeError;\nvar max = Math.max;\n\nvar SetRecord = function (set, intSize) {\n  this.set = set;\n  this.size = max(intSize, 0);\n  this.has = aCallable(set.has);\n  this.keys = aCallable(set.keys);\n};\n\nSetRecord.prototype = {\n  getIterator: function () {\n    return getIteratorDirect(anObject(call(this.keys, this.set)));\n  },\n  includes: function (it) {\n    return call(this.has, this.set, it);\n  }\n};\n\n// `GetSetRecord` abstract operation\n// https://tc39.es/proposal-set-methods/#sec-getsetrecord\nmodule.exports = function (obj) {\n  anObject(obj);\n  var numSize = +obj.size;\n  // NOTE: If size is undefined, then numSize will be NaN\n  // eslint-disable-next-line no-self-compare -- NaN check\n  if (numSize !== numSize) throw new $TypeError(INVALID_SIZE);\n  var intSize = toIntegerOrInfinity(numSize);\n  if (intSize < 0) throw new $RangeError(INVALID_SIZE);\n  return new SetRecord(obj, intSize);\n};\n","'use strict';\nvar aSet = require('../internals/a-set');\nvar size = require('../internals/set-size');\nvar iterate = require('../internals/set-iterate');\nvar getSetRecord = require('../internals/get-set-record');\n\n// `Set.prototype.isSubsetOf` method\n// https://tc39.github.io/proposal-set-methods/#Set.prototype.isSubsetOf\nmodule.exports = function isSubsetOf(other) {\n  var O = aSet(this);\n  var otherRec = getSetRecord(other);\n  if (size(O) > otherRec.size) return false;\n  return iterate(O, function (e) {\n    if (!otherRec.includes(e)) return false;\n  }, true) !== false;\n};\n","'use strict';\nvar $ = require('../internals/export');\nvar isDisjointFrom = require('../internals/set-is-disjoint-from');\nvar setMethodAcceptSetLike = require('../internals/set-method-accept-set-like');\n\nvar INCORRECT = !setMethodAcceptSetLike('isDisjointFrom', function (result) {\n  return !result;\n});\n\n// `Set.prototype.isDisjointFrom` method\n// https://tc39.es/ecma262/#sec-set.prototype.isdisjointfrom\n$({ target: 'Set', proto: true, real: true, forced: INCORRECT }, {\n  isDisjointFrom: isDisjointFrom\n});\n","'use strict';\nvar aSet = require('../internals/a-set');\nvar add = require('../internals/set-helpers').add;\nvar clone = require('../internals/set-clone');\nvar getSetRecord = require('../internals/get-set-record');\nvar iterateSimple = require('../internals/iterate-simple');\n\n// `Set.prototype.union` method\n// https://github.com/tc39/proposal-set-methods\nmodule.exports = function union(other) {\n  var O = aSet(this);\n  var keysIter = getSetRecord(other).getIterator();\n  var result = clone(O);\n  iterateSimple(keysIter, function (it) {\n    add(result, it);\n  });\n  return result;\n};\n","'use strict';\nvar uncurryThis = require('../internals/function-uncurry-this');\n\n// eslint-disable-next-line es/no-set -- safe\nvar SetPrototype = Set.prototype;\n\nmodule.exports = {\n  // eslint-disable-next-line es/no-set -- safe\n  Set: Set,\n  add: uncurryThis(SetPrototype.add),\n  has: uncurryThis(SetPrototype.has),\n  remove: uncurryThis(SetPrototype['delete']),\n  proto: SetPrototype\n};\n","'use strict';\nvar aSet = require('../internals/a-set');\nvar has = require('../internals/set-helpers').has;\nvar size = require('../internals/set-size');\nvar getSetRecord = require('../internals/get-set-record');\nvar iterateSet = require('../internals/set-iterate');\nvar iterateSimple = require('../internals/iterate-simple');\nvar iteratorClose = require('../internals/iterator-close');\n\n// `Set.prototype.isDisjointFrom` method\n// https://tc39.github.io/proposal-set-methods/#Set.prototype.isDisjointFrom\nmodule.exports = function isDisjointFrom(other) {\n  var O = aSet(this);\n  var otherRec = getSetRecord(other);\n  if (size(O) <= otherRec.size) return iterateSet(O, function (e) {\n    if (otherRec.includes(e)) return false;\n  }, true) !== false;\n  var iterator = otherRec.getIterator();\n  return iterateSimple(iterator, function (e) {\n    if (has(O, e)) return iteratorClose(iterator, 'normal', false);\n  }) !== false;\n};\n","'use strict';\nvar getBuiltIn = require('../internals/get-built-in');\n\nvar createSetLike = function (size) {\n  return {\n    size: size,\n    has: function () {\n      return false;\n    },\n    keys: function () {\n      return {\n        next: function () {\n          return { done: true };\n        }\n      };\n    }\n  };\n};\n\nvar createSetLikeWithInfinitySize = function (size) {\n  return {\n    size: size,\n    has: function () {\n      return true;\n    },\n    keys: function () {\n      throw new Error('e');\n    }\n  };\n};\n\nmodule.exports = function (name, callback) {\n  var Set = getBuiltIn('Set');\n  try {\n    new Set()[name](createSetLike(0));\n    try {\n      // late spec change, early WebKit ~ Safari 17.0 beta implementation does not pass it\n      // https://github.com/tc39/proposal-set-methods/pull/88\n      new Set()[name](createSetLike(-1));\n      return false;\n    } catch (error2) {\n      if (!callback) return true;\n      // early V8 implementation bug\n      // https://issues.chromium.org/issues/351332634\n      try {\n        new Set()[name](createSetLikeWithInfinitySize(-Infinity));\n        return false;\n      } catch (error) {\n        var set = new Set();\n        set.add(1);\n        set.add(2);\n        return callback(set[name](createSetLikeWithInfinitySize(Infinity)));\n      }\n    }\n  } catch (error) {\n    return false;\n  }\n};\n","'use strict';\nvar $ = require('../internals/export');\nvar symmetricDifference = require('../internals/set-symmetric-difference');\nvar setMethodAcceptSetLike = require('../internals/set-method-accept-set-like');\n\n// `Set.prototype.symmetricDifference` method\n// https://tc39.es/ecma262/#sec-set.prototype.symmetricdifference\n$({ target: 'Set', proto: true, real: true, forced: !setMethodAcceptSetLike('symmetricDifference') }, {\n  symmetricDifference: symmetricDifference\n});\n","'use strict';\nvar uncurryThisAccessor = require('../internals/function-uncurry-this-accessor');\nvar SetHelpers = require('../internals/set-helpers');\n\nmodule.exports = uncurryThisAccessor(SetHelpers.proto, 'size', 'get') || function (set) {\n  return set.size;\n};\n","'use strict';\nvar $ = require('../internals/export');\nvar isSubsetOf = require('../internals/set-is-subset-of');\nvar setMethodAcceptSetLike = require('../internals/set-method-accept-set-like');\n\nvar INCORRECT = !setMethodAcceptSetLike('isSubsetOf', function (result) {\n  return result;\n});\n\n// `Set.prototype.isSubsetOf` method\n// https://tc39.es/ecma262/#sec-set.prototype.issubsetof\n$({ target: 'Set', proto: true, real: true, forced: INCORRECT }, {\n  isSubsetOf: isSubsetOf\n});\n","'use strict';\nvar has = require('../internals/set-helpers').has;\n\n// Perform ? RequireInternalSlot(M, [[SetData]])\nmodule.exports = function (it) {\n  has(it);\n  return it;\n};\n","'use strict';\nvar $ = require('../internals/export');\nvar difference = require('../internals/set-difference');\nvar setMethodAcceptSetLike = require('../internals/set-method-accept-set-like');\n\nvar INCORRECT = !setMethodAcceptSetLike('difference', function (result) {\n  return result.size === 0;\n});\n\n// `Set.prototype.difference` method\n// https://tc39.es/ecma262/#sec-set.prototype.difference\n$({ target: 'Set', proto: true, real: true, forced: INCORRECT }, {\n  difference: difference\n});\n","'use strict';\nvar $ = require('../internals/export');\nvar fails = require('../internals/fails');\nvar intersection = require('../internals/set-intersection');\nvar setMethodAcceptSetLike = require('../internals/set-method-accept-set-like');\n\nvar INCORRECT = !setMethodAcceptSetLike('intersection', function (result) {\n  return result.size === 2 && result.has(1) && result.has(2);\n}) || fails(function () {\n  // eslint-disable-next-line es/no-array-from, es/no-set, es/no-set-prototype-intersection -- testing\n  return String(Array.from(new Set([1, 2, 3]).intersection(new Set([3, 2])))) !== '3,2';\n});\n\n// `Set.prototype.intersection` method\n// https://tc39.es/ecma262/#sec-set.prototype.intersection\n$({ target: 'Set', proto: true, real: true, forced: INCORRECT }, {\n  intersection: intersection\n});\n","'use strict';\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar iterateSimple = require('../internals/iterate-simple');\nvar SetHelpers = require('../internals/set-helpers');\n\nvar Set = SetHelpers.Set;\nvar SetPrototype = SetHelpers.proto;\nvar forEach = uncurryThis(SetPrototype.forEach);\nvar keys = uncurryThis(SetPrototype.keys);\nvar next = keys(new Set()).next;\n\nmodule.exports = function (set, fn, interruptible) {\n  return interruptible ? iterateSimple({ iterator: keys(set), next: next }, fn) : forEach(set, fn);\n};\n","'use strict';\nvar aSet = require('../internals/a-set');\nvar has = require('../internals/set-helpers').has;\nvar size = require('../internals/set-size');\nvar getSetRecord = require('../internals/get-set-record');\nvar iterateSimple = require('../internals/iterate-simple');\nvar iteratorClose = require('../internals/iterator-close');\n\n// `Set.prototype.isSupersetOf` method\n// https://tc39.github.io/proposal-set-methods/#Set.prototype.isSupersetOf\nmodule.exports = function isSupersetOf(other) {\n  var O = aSet(this);\n  var otherRec = getSetRecord(other);\n  if (size(O) < otherRec.size) return false;\n  var iterator = otherRec.getIterator();\n  return iterateSimple(iterator, function (e) {\n    if (!has(O, e)) return iteratorClose(iterator, 'normal', false);\n  }) !== false;\n};\n","'use strict';\nvar aSet = require('../internals/a-set');\nvar SetHelpers = require('../internals/set-helpers');\nvar size = require('../internals/set-size');\nvar getSetRecord = require('../internals/get-set-record');\nvar iterateSet = require('../internals/set-iterate');\nvar iterateSimple = require('../internals/iterate-simple');\n\nvar Set = SetHelpers.Set;\nvar add = SetHelpers.add;\nvar has = SetHelpers.has;\n\n// `Set.prototype.intersection` method\n// https://github.com/tc39/proposal-set-methods\nmodule.exports = function intersection(other) {\n  var O = aSet(this);\n  var otherRec = getSetRecord(other);\n  var result = new Set();\n\n  if (size(O) > otherRec.size) {\n    iterateSimple(otherRec.getIterator(), function (e) {\n      if (has(O, e)) add(result, e);\n    });\n  } else {\n    iterateSet(O, function (e) {\n      if (otherRec.includes(e)) add(result, e);\n    });\n  }\n\n  return result;\n};\n","const DB_NAME = 'websapDatabase';\n// Incrementar la versión de la base de datos para forzar la actualización\nconst DB_VERSION = 3; // Incrementado a 3 para forzar upgradeneeded\nconst MENU_STORE = 'menuItems';\nconst IMAGE_STORE = 'menuImages';\nconst SOLD_ITEMS_STORE = 'soldItems'; \nconst BUSINESS_INFO_STORE = 'businessInfo';\nconst USERS_STORE = 'users';\nconst SHARED_MENU_STORE = 'sharedMenus';\n\n// Abrir la conexión a la base de datos con manejo mejorado de errores\nfunction openDatabase() {\n  return new Promise((resolve, reject) => {\n    try {\n      console.log(\"Intentando abrir la base de datos con versión:\", DB_VERSION);\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\n      \n      request.onerror = (event) => {\n        console.error(\"Error al abrir la base de datos:\", event.target.error);\n        reject('Error al abrir la base de datos: ' + event.target.errorCode);\n      };\n      \n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        console.log(\"Base de datos abierta con éxito, versión:\", db.version);\n        \n        // Verificar que todos los almacenes necesarios existen\n        const existingStores = Array.from(db.objectStoreNames);\n        console.log(\"Almacenes existentes:\", existingStores);\n        \n        resolve(db);\n      };\n      \n      request.onupgradeneeded = (event) => {\n        console.log(\"Actualizando estructura de la base de datos a versión:\", event.newVersion);\n        const db = event.target.result;\n        \n        // Crear todos los almacenes necesarios si no existen\n        const requiredStores = [\n          { name: USERS_STORE, keyPath: 'id' },\n          { name: MENU_STORE, keyPath: 'id' },\n          { name: IMAGE_STORE, keyPath: 'id' },\n          { name: SOLD_ITEMS_STORE, keyPath: 'id' },\n          { name: BUSINESS_INFO_STORE, keyPath: 'id' },\n          { name: SHARED_MENU_STORE, keyPath: 'id' }\n        ];\n        \n        // Crear cada almacén\n        requiredStores.forEach(store => {\n          if (!db.objectStoreNames.contains(store.name)) {\n            console.log(`Creando almacén: ${store.name}`);\n            db.createObjectStore(store.name, { keyPath: store.keyPath });\n          }\n        });\n      };\n    } catch (error) {\n      console.error(\"Error crítico en IndexedDB:\", error);\n      reject(error);\n    }\n  });\n}\n\n// Guardar elementos del menú\nexport async function saveMenuItems(items, areSpecial = false) {\n  try {\n    // Primero procesamos todas las imágenes y creamos copias de los objetos\n    const processedItems = [];\n    for (const item of items) {\n      // Crear una copia del elemento\n      const itemToStore = { ...item };\n      \n      // Asegurarse de que el elemento tiene un id\n      if (!itemToStore.id) {\n        itemToStore.id = Date.now() + Math.random().toString(36).substring(2, 10);\n      }\n      \n      // Añadir la propiedad isSpecial (asumiendo que viene del formulario)\n      itemToStore.isSpecial = item.isSpecial || false; // Valor por defecto: false\n      \n      // Si tiene imagen, guardarla por separado antes de la transacción principal\n      if (itemToStore.image && typeof itemToStore.image === 'string' && itemToStore.image.length > 0) {\n        try {\n          await saveMenuImage(itemToStore.id, itemToStore.image);\n          itemToStore.image = null;\n          itemToStore.hasStoredImage = true;\n        } catch (imageError) {\n          console.warn('Error al guardar imagen, continuando sin imagen:', imageError);\n          // Si hay error al guardar la imagen, continuamos sin ella\n          itemToStore.image = null;\n          itemToStore.hasStoredImage = false;\n        }\n      }\n      \n      processedItems.push(itemToStore);\n    }\n    \n    // Ahora guardamos todos los items en una sola transacción\n    const db = await openDatabase();\n    const transaction = db.transaction([MENU_STORE], 'readwrite');\n    const store = transaction.objectStore(MENU_STORE);\n    \n    // Usamos Promise.all para manejar todas las operaciones put juntas\n    const putPromises = processedItems.map(item => {\n      return new Promise((resolve, reject) => {\n        const request = store.put(item);\n        request.onsuccess = () => resolve();\n        request.onerror = (e) => reject(e.target.error);\n      });\n    });\n    \n    // Esperamos a que se completen todas las operaciones put\n    await Promise.all(putPromises);\n    \n    // Esperamos a que se complete la transacción\n    return new Promise((resolve, reject) => {\n      transaction.oncomplete = () => resolve(true);\n      transaction.onerror = (event) => reject(event.target.error);\n    });\n  } catch (error) {\n    console.error('Error al guardar elementos del menú:', error);\n    throw error;\n  }\n}\n\n// Guardar imagen de un elemento del menú\nexport async function saveMenuImage(itemId, imageData) {\n  try {\n    const db = await openDatabase();\n    const transaction = db.transaction([IMAGE_STORE], 'readwrite');\n    const store = transaction.objectStore(IMAGE_STORE);\n    \n    store.put({ id: itemId, data: imageData });\n    \n    return new Promise((resolve, reject) => {\n      transaction.oncomplete = () => resolve(true);\n      transaction.onerror = (event) => reject(event.target.error);\n    });\n  } catch (error) {\n    console.error('Error al guardar imagen:', error);\n    throw error;\n  }\n}\n\n// Obtener todos los elementos del menú\nexport async function getMenuItems() {\n  try {\n    const db = await openDatabase();\n    \n    // Verificar que el almacén existe\n    if (!Array.from(db.objectStoreNames).includes(MENU_STORE)) {\n      console.error(`El almacén ${MENU_STORE} no existe en la base de datos`);\n      return []; // Devolver array vacío en lugar de fallar\n    }\n    \n    const transaction = db.transaction([MENU_STORE], 'readonly');\n    const store = transaction.objectStore(MENU_STORE);\n    \n    const request = store.getAll();\n    \n    return new Promise((resolve, reject) => {\n      request.onsuccess = async () => {\n        let items = request.result;\n        \n        // Verificar que todos los elementos tengan IDs únicos\n        const uniqueItems = [];\n        const seenIds = new Set();\n        \n        for (const item of items) {\n          // Si el elemento no tiene ID o es un ID duplicado, generamos uno nuevo\n          if (!item.id || seenIds.has(item.id)) {\n            item.id = Date.now() + '-' + Math.random().toString(36).substring(2, 10);\n          }\n          \n          // Marcar este ID como visto\n          seenIds.add(item.id);\n          uniqueItems.push(item);\n        }\n        \n        // Recuperar imágenes para cada elemento\n        for (const item of uniqueItems) {\n          if (item.hasStoredImage) {\n            item.image = await getMenuImage(item.id);\n          }\n        }\n        \n        resolve(uniqueItems);\n      };\n      request.onerror = (event) => reject(event.target.error);\n    });\n  } catch (error) {\n    console.error('Error al obtener elementos del menú:', error);\n    return []; // Devolver array vacío en caso de error\n  }\n}\n\n// Eliminar un elemento del menú - RENOMBRANDO LA FUNCIÓN\nexport async function deleteMenuItemFromDB(itemId) {\n  try {\n    console.log(`Intentando eliminar elemento con ID: ${itemId}`);\n    \n    const db = await openDatabase();\n    const transaction = db.transaction([MENU_STORE, IMAGE_STORE], 'readwrite');\n    const menuStore = transaction.objectStore(MENU_STORE);\n    const imageStore = transaction.objectStore(IMAGE_STORE);\n    \n    // Verificar primero si el elemento existe\n    const getRequest = menuStore.get(itemId);\n    \n    return new Promise((resolve, reject) => {\n      getRequest.onsuccess = () => {\n        if (!getRequest.result) {\n          console.warn(`No se encontró el elemento con ID: ${itemId}`);\n          // Resolver con éxito incluso si el elemento no existe\n          resolve(true);\n          return;\n        }\n        \n        // Eliminar el elemento\n        const deleteRequest = menuStore.delete(itemId);\n        deleteRequest.onsuccess = () => {\n          console.log(`Elemento con ID ${itemId} eliminado correctamente`);\n          \n          // Intentar eliminar la imagen asociada (no falla si no existe)\n          const imageRequest = imageStore.delete(itemId);\n          imageRequest.onsuccess = () => {\n            console.log(`Imagen para elemento ${itemId} eliminada (si existía)`);\n            resolve(true);\n          };\n          imageRequest.onerror = (e) => {\n            // No fallar si la imagen no existe\n            console.warn(`Error al eliminar imagen para ${itemId}:`, e.target.error);\n            resolve(true);\n          };\n        };\n        \n        deleteRequest.onerror = (e) => {\n          console.error(`Error al eliminar elemento ${itemId}:`, e.target.error);\n          reject(e.target.error);\n        };\n      };\n      \n      getRequest.onerror = (event) => {\n        console.error(`Error al verificar existencia del elemento ${itemId}:`, event.target.error);\n        reject(event.target.error);\n      };\n    });\n  } catch (error) {\n    console.error('Error al eliminar elemento del menú:', error);\n    throw error;\n  }\n}\n\n// Mantener la función original por compatibilidad, pero que use la nueva\nexport async function deleteMenuItem(itemId) {\n  console.warn('La función deleteMenuItem está obsoleta, use deleteMenuItemFromDB en su lugar');\n  return deleteMenuItemFromDB(itemId);\n}\n\n// Obtener imagen de un elemento del menú\nexport async function getMenuImage(itemId) {\n  try {\n    const db = await openDatabase();\n    const transaction = db.transaction([IMAGE_STORE], 'readonly');\n    const store = transaction.objectStore(IMAGE_STORE);\n    \n    const request = store.get(itemId);\n    \n    return new Promise((resolve, reject) => {\n      request.onsuccess = () => {\n        if (request.result) {\n          resolve(request.result.data);\n        } else {\n          resolve(null);\n        }\n      };\n      request.onerror = (event) => reject(event.target.error);\n    });\n  } catch (error) {\n    console.error('Error al obtener imagen:', error);\n    throw error;\n  }\n}\n\n// Guardar información del negocio - MEJORADA\nexport async function saveBusinessInfo(businessInfo) {\n  try {\n    const db = await openDatabase();\n    const transaction = db.transaction(['businessInfo'], 'readwrite');\n    const store = transaction.objectStore('businessInfo');\n\n    // Crear una copia limpia del objeto sin referencias circulares o propiedades no serializables\n    const cleanBusinessInfo = {\n      id: businessInfo.id || 'business_info_1', // Usar un ID consistente\n      name: businessInfo.name || '',\n      description: businessInfo.description || '',\n      contact: businessInfo.contact || '',\n      address: businessInfo.address || '',\n      logo: businessInfo.logo || ''\n    };\n\n    // Manejar información de pago por separado si existe\n    if (businessInfo.paymentInfo) {\n      cleanBusinessInfo.paymentInfo = {\n        qrTitle: businessInfo.paymentInfo.qrTitle || '',\n        qrImage: businessInfo.paymentInfo.qrImage || '',\n        nequiNumber: businessInfo.paymentInfo.nequiNumber || '',\n        nequiImage: businessInfo.paymentInfo.nequiImage || '',\n        bankInfo: businessInfo.paymentInfo.bankInfo || '',\n        otherPaymentMethods: businessInfo.paymentInfo.otherPaymentMethods || ''\n      };\n    }\n\n    // Para debugging, verificamos que es serializable\n    try {\n      JSON.stringify(cleanBusinessInfo);\n    } catch (e) {\n      console.error('El objeto businessInfo no es serializable:', e);\n      throw new Error('El objeto businessInfo no es serializable');\n    }\n\n    // Guardar el objeto limpio\n    const request = store.put(cleanBusinessInfo);\n    \n    return new Promise((resolve, reject) => {\n      request.onsuccess = () => resolve(true);\n      request.onerror = (event) => {\n        console.error('Error específico al guardar businessInfo:', event.target.error);\n        reject(event.target.error);\n      };\n    });\n  } catch (error) {\n    console.error('Error al guardar información del negocio:', error);\n    throw error;\n  }\n}\n\n// Obtener información del negocio\nexport async function getBusinessInfo() {\n  try {\n    const db = await openDatabase();\n    \n    // Verificar que el almacén existe\n    if (!Array.from(db.objectStoreNames).includes(BUSINESS_INFO_STORE)) {\n      console.error(`El almacén ${BUSINESS_INFO_STORE} no existe en la base de datos`);\n      return {}; // Devolver objeto vacío en lugar de fallar\n    }\n    \n    const transaction = db.transaction([BUSINESS_INFO_STORE], 'readonly');\n    const store = transaction.objectStore(BUSINESS_INFO_STORE);\n    \n    const request = store.get('business_info_1');\n    \n    return new Promise((resolve, reject) => {\n      request.onsuccess = () => {\n        resolve(request.result || {});\n      };\n      request.onerror = (event) => {\n        console.error('Error en request:', event.target.error);\n        reject(event.target.error);\n      };\n    });\n  } catch (error) {\n    console.error('Error al obtener información del negocio:', error);\n    // Devolvemos un objeto vacío en lugar de fallar\n    return {};\n  }\n}\n\n// Guardar elementos vendidos\nexport async function saveSoldItems(items) {\n  try {\n    // Asegurarse de que items sea un array y que cada elemento sea serializable\n    if (!Array.isArray(items)) {\n      console.warn('saveSoldItems recibió un valor que no es array:', items);\n      items = [];\n    }\n    \n    // Limpiar los objetos para asegurar que sean serializables\n    const cleanItems = items.map(item => {\n      // Si el item no es un objeto, crear uno básico\n      if (!item || typeof item !== 'object') {\n        return {\n          name: 'Producto desconocido',\n          quantity: 1,\n          price: 0,\n          includesDrink: false\n        };\n      }\n      \n      // Crear una copia limpia con solo las propiedades necesarias\n      return {\n        name: String(item.name || 'Producto desconocido'),\n        quantity: Number(item.quantity) || 1,\n        price: Number(item.price) || 0,\n        includesDrink: Boolean(item.includesDrink)\n      };\n    });\n    \n    const db = await openDatabase();\n    const transaction = db.transaction([SOLD_ITEMS_STORE], 'readwrite');\n    const store = transaction.objectStore(SOLD_ITEMS_STORE);\n    \n    // Asegurarnos de que estamos guardando un objeto serializable\n    const soldItemsObject = { \n      id: 'sold_items_1', \n      items: cleanItems\n    };\n    \n    // Verificar que el objeto es serializable antes de guardarlo\n    try {\n      // Esto lanzará error si el objeto no es serializable\n      JSON.stringify(soldItemsObject);\n    } catch (e) {\n      console.error('El objeto soldItems no es serializable:', e);\n      throw new Error('El objeto soldItems no es serializable');\n    }\n    \n    const request = store.put(soldItemsObject);\n    \n    return new Promise((resolve, reject) => {\n      request.onsuccess = () => resolve(true);\n      request.onerror = (event) => {\n        console.error('Error específico al guardar soldItems:', event.target.error);\n        reject(event.target.error);\n      };\n    });\n  } catch (error) {\n    console.error('Error al guardar elementos vendidos:', error);\n    throw error;\n  }\n}\n\n// Obtener elementos vendidos\nexport async function getSoldItems() {\n  try {\n    const db = await openDatabase();\n    \n    // Verificar que el almacén existe\n    if (!Array.from(db.objectStoreNames).includes(SOLD_ITEMS_STORE)) {\n      console.error(`El almacén ${SOLD_ITEMS_STORE} no existe en la base de datos`);\n      return []; // Devolver array vacío en lugar de fallar\n    }\n    \n    const transaction = db.transaction([SOLD_ITEMS_STORE], 'readonly');\n    const store = transaction.objectStore(SOLD_ITEMS_STORE);\n    \n    const request = store.get('sold_items_1');\n    \n    return new Promise((resolve, reject) => {\n      request.onsuccess = () => {\n        if (request.result) {\n          resolve(request.result.items);\n        } else {\n          resolve([]);\n        }\n      };\n      request.onerror = (event) => reject(event.target.error);\n    });\n  } catch (error) {\n    console.error('Error al obtener elementos vendidos:', error);\n    return [];\n  }\n}\n\n// Eliminar completamente la función migrateFromLocalStorage ya que no queremos usar localStorage\nexport async function migrateFromLocalStorage() {\n  console.log(\"Función migrateFromLocalStorage en desuso - no se utilizará localStorage\");\n  return true; // Solo para mantener la compatibilidad con el código existente\n}\n\n// Comprimir imagen\nexport function compressImage(base64Image, maxWidth = 800, maxHeight = 600, quality = 0.7) {\n  return new Promise((resolve) => {\n    const img = new Image();\n    img.onload = () => {\n      // Crear un canvas para comprimir la imagen\n      const canvas = document.createElement('canvas');\n      \n      let width = img.width;\n      let height = img.height;\n      \n      // Calcular nuevas dimensiones manteniendo proporción\n      if (width > height) {\n        if (width > maxWidth) {\n          height = Math.round((height * maxWidth) / width);\n          width = maxWidth;\n        }\n      } else {\n        if (height > maxHeight) {\n          width = Math.round((width * maxHeight) / height);\n          height = maxHeight;\n        }\n      }\n      \n      canvas.width = width;\n      canvas.height = height;\n      \n      const ctx = canvas.getContext('2d');\n      ctx.drawImage(img, 0, 0, width, height);\n      \n      // Obtener imagen comprimida como JPEG con calidad reducida\n      const compressedImage = canvas.toDataURL('image/jpeg', quality);\n      resolve(compressedImage);\n    };\n    img.src = base64Image;\n  });\n}\n\n// Mejorar la función resetDatabase para asegurarnos de que no use localStorage\nexport async function resetDatabase() {\n  return new Promise((resolve, reject) => {\n    try {\n      console.log(\"Iniciando proceso de eliminación de la base de datos...\");\n      \n      const deleteRequest = indexedDB.deleteDatabase(DB_NAME);\n      \n      deleteRequest.onsuccess = () => {\n        console.log(\"Base de datos eliminada con éxito\");\n        \n        console.log(\"Limpieza completa. La aplicación está lista para comenzar de nuevo.\");\n        resolve(true);\n      };\n      \n      deleteRequest.onerror = (event) => {\n        console.error(\"Error al eliminar la base de datos:\", event.target.error);\n        reject(event.target.error);\n      };\n    } catch (error) {\n      console.error(\"Error al intentar resetear la base de datos:\", error);\n      reject(error);\n    }\n  });\n}\n\n// Añadir nueva función para validar disponibilidad\nexport async function checkItemAvailability(itemId) {\n  try {\n    const db = await openDatabase();\n    const transaction = db.transaction([MENU_STORE], 'readonly');\n    const store = transaction.objectStore(MENU_STORE);\n    \n    const item = await store.get(itemId);\n    \n    return {\n      isAvailable: item && item.availableQuantity > 0,\n      quantity: item ? item.availableQuantity : 0\n    };\n  } catch (error) {\n    console.error('Error al verificar disponibilidad:', error);\n    throw error;\n  }\n}\n\n/**\n * Actualiza la cantidad disponible de un plato en el inventario.\n * @param {string} itemId - ID del plato a actualizar\n * @param {number|string} newQuantity - Nueva cantidad disponible\n * @returns {Promise<boolean>} - Resultado de la operación\n */\nexport async function updateItemAvailability(itemId, newQuantity) {\n  try {\n    // Validar parámetros de entrada\n    if (!itemId) {\n      console.error('Error: ID del item no proporcionado');\n      return false;\n    }\n    \n    // Asegurarse de que newQuantity sea un número entero válido\n    // Usar parseInt en lugar de Math.floor para asegurar una conversión correcta a entero\n    const quantity = parseInt(Number(newQuantity), 10);\n    if (isNaN(quantity)) {\n      console.error(`Error: Cantidad inválida proporcionada: ${newQuantity} (${typeof newQuantity})`);\n      return false;\n    }\n    \n    console.log(`Actualizando disponibilidad para item ${itemId} a ${quantity} unidades (valor original: ${newQuantity}, tipo: ${typeof newQuantity})`);\n    \n    // Usar una transacción específica solo para este item\n    const db = await openDatabase();\n    const transaction = db.transaction([MENU_STORE], 'readwrite');\n    const store = transaction.objectStore(MENU_STORE);\n    \n    return new Promise((resolve, reject) => {\n      // Primero obtenemos el item actual\n      const getRequest = store.get(itemId);\n      \n      getRequest.onsuccess = (event) => {\n        const item = event.target.result;\n        \n        if (!item) {\n          console.error(`No se encontró el elemento con ID: ${itemId}`);\n          resolve(false);\n          return;\n        }\n        \n        // Guardar valores anteriores para mejor logging\n        const oldQuantity = parseInt(Number(item.availableQuantity) || 0, 10);\n        \n        // Actualizar la cantidad disponible, asegurando que sea un número entero\n        item.availableQuantity = quantity;\n        \n        // Guardar el item actualizado\n        const putRequest = store.put(item);\n        \n        putRequest.onsuccess = () => {\n          console.log(`Disponibilidad actualizada para ${item.name} (ID: ${itemId}): ${oldQuantity} → ${quantity} (diferencia: ${oldQuantity - quantity})`);\n          \n          // Intentar sincronizar con el backend (opcional, no bloquea)\n          try {\n            fetch('http://localhost:3000/actualizar-disponibilidad', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json',\n              },\n              body: JSON.stringify({\n                id: itemId,\n                availableQuantity: quantity\n              })\n            }).catch(syncError => {\n              // Simplemente registrar el error, no bloqueamos la operación principal\n              console.warn('Error al sincronizar con backend:', syncError);\n            });\n          } catch (syncError) {\n            console.warn('Error al sincronizar con el backend:', syncError);\n            // No bloqueamos la función principal por errores de sincronización\n          }\n          \n          resolve(true);\n        };\n        \n        putRequest.onerror = (error) => {\n          console.error(`Error al actualizar disponibilidad para ${itemId}:`, error);\n          reject(error);\n        };\n      };\n      \n      getRequest.onerror = (error) => {\n        console.error(`Error al obtener elemento ${itemId}:`, error);\n        reject(error);\n      };\n      \n      // Manejar errores de transacción\n      transaction.onerror = (error) => {\n        console.error('Error en transacción de actualización:', error);\n        reject(error);\n      };\n    });\n  } catch (error) {\n    console.error('Error al actualizar disponibilidad:', error);\n    return false;\n  }\n}\n\n// Guardar un elemento del menú individual\nexport async function saveMenuItem(item) {\n  try {\n    // Validar que el item sea un objeto y tenga id\n    if (!item || typeof item !== 'object') {\n      throw new Error('El item no es un objeto válido');\n    }\n    \n    if (!item.id) {\n      item.id = Date.now() + Math.random().toString(36).substring(2, 10);\n    }\n    \n    // Si tiene imagen y es un string largo, procesarla\n    if (item.image && typeof item.image === 'string' && item.image.length > 0 && !item.hasStoredImage) {\n      try {\n        await saveMenuImage(item.id, item.image);\n        item.image = null;\n        item.hasStoredImage = true;\n      } catch (imageError) {\n        console.warn('Error al guardar imagen, continuando sin imagen:', imageError);\n        item.image = null;\n        item.hasStoredImage = false;\n      }\n    }\n    \n    // Guardar el item en la base de datos\n    const db = await openDatabase();\n    const transaction = db.transaction([MENU_STORE], 'readwrite');\n    const store = transaction.objectStore(MENU_STORE);\n    \n    return new Promise((resolve, reject) => {\n      const request = store.put(item);\n      request.onsuccess = () => resolve(true);\n      request.onerror = (event) => reject(event.target.error);\n    });\n  } catch (error) {\n    console.error('Error al guardar elemento del menú:', error);\n    throw error;\n  }\n}","'use strict';\nvar SetHelpers = require('../internals/set-helpers');\nvar iterate = require('../internals/set-iterate');\n\nvar Set = SetHelpers.Set;\nvar add = SetHelpers.add;\n\nmodule.exports = function (set) {\n  var result = new Set();\n  iterate(set, function (it) {\n    add(result, it);\n  });\n  return result;\n};\n"],"names":["call","module","exports","record","fn","ITERATOR_INSTEAD_OF_RECORD","step","result","iterator","next","done","value","undefined","$","union","setMethodAcceptSetLike","target","proto","real","forced","isSupersetOf","INCORRECT","aSet","SetHelpers","clone","size","getSetRecord","iterateSet","iterateSimple","has","remove","other","O","this","otherRec","e","includes","getIterator","add","keysIter","aCallable","anObject","toIntegerOrInfinity","getIteratorDirect","INVALID_SIZE","$RangeError","RangeError","$TypeError","TypeError","max","Math","SetRecord","set","intSize","keys","prototype","it","obj","numSize","iterate","isDisjointFrom","uncurryThis","SetPrototype","Set","iteratorClose","getBuiltIn","createSetLike","createSetLikeWithInfinitySize","Error","name","callback","error2","Infinity","error","symmetricDifference","uncurryThisAccessor","isSubsetOf","difference","fails","intersection","String","Array","from","forEach","interruptible","DB_NAME","DB_VERSION","MENU_STORE","IMAGE_STORE","SOLD_ITEMS_STORE","BUSINESS_INFO_STORE","USERS_STORE","SHARED_MENU_STORE","openDatabase","Promise","resolve","reject","console","log","request","indexedDB","open","onerror","event","errorCode","onsuccess","db","version","existingStores","objectStoreNames","onupgradeneeded","newVersion","requiredStores","keyPath","store","contains","createObjectStore","async","saveMenuItems","items","areSpecial","processedItems","item","itemToStore","id","Date","now","random","toString","substring","isSpecial","image","length","saveMenuImage","hasStoredImage","imageError","warn","push","transaction","objectStore","putPromises","map","put","all","oncomplete","itemId","imageData","data","getMenuItems","getAll","uniqueItems","seenIds","getMenuImage","deleteMenuItemFromDB","menuStore","imageStore","getRequest","get","deleteRequest","delete","imageRequest","saveBusinessInfo","businessInfo","cleanBusinessInfo","description","contact","address","logo","paymentInfo","qrTitle","qrImage","nequiNumber","nequiImage","bankInfo","otherPaymentMethods","JSON","stringify","getBusinessInfo","saveSoldItems","isArray","cleanItems","quantity","Number","price","includesDrink","Boolean","soldItemsObject","getSoldItems","migrateFromLocalStorage","compressImage","base64Image","maxWidth","maxHeight","quality","img","Image","onload","canvas","document","createElement","width","height","round","ctx","getContext","drawImage","compressedImage","toDataURL","src","updateItemAvailability","newQuantity","parseInt","isNaN","oldQuantity","availableQuantity","putRequest","fetch","method","headers","body","catch","syncError"],"sourceRoot":""}